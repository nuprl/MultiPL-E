language: swift
name: HumanEval_79_decimal_to_binary
results:
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjb73grfa/tmpjb73grfa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488e24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488df46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488df46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488df457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjb73grfa                        0x00005638c2a6e492 <unavailable> + 5266

    5    libc.so.6                          0x00002b488e43b460 __libc_start_main +
    245

    6    tmpjb73grfa                        0x00005638c2a6e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal != 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpf5u2v3ia/tmpf5u2v3ia.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b393aa33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b393a72ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b393a72a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b393a7297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5u2v3ia                        0x0000561615e54492 <unavailable> + 5266

    5    libc.so.6                          0x00002b393ac1f460 __libc_start_main +
    245

    6    tmpf5u2v3ia                        0x0000561615e540f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpth61gypl/tmpth61gypl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ba5430c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ba5127b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ba5127988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ba51267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpth61gypl                        0x00005624a18f05b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b6ba561c460 __libc_start_main +
    245

    6    tmpth61gypl                        0x00005624a18f0219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpko0dy00m/tmpko0dy00m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb70c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb6dbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb6dbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb6dbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0dy00m                        0x0000559e150de672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6cb72b2460 __libc_start_main +
    245

    6    tmpko0dy00m                        0x0000559e150de2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpko0dy00m/tmpko0dy00m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb70c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb6dbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb6dbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb6dbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0dy00m                        0x0000559e150de672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6cb72b2460 __libc_start_main +
    245

    6    tmpko0dy00m                        0x0000559e150de2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        result.append(String(num % 2))\n        num /= 2\n    }\n\
    \    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpkkwhiw3o/tmpkkwhiw3o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b754f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b751f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b751f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b751ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkkwhiw3o                        0x00005558d497c672 <unavailable> + 5746

    5    libc.so.6                          0x00002b5b756e5460 __libc_start_main +
    245

    6    tmpkkwhiw3o                        0x00005558d497c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result = String(decimal % 2) + result\n        decimal\
    \ /= 2\n    }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_8c8trrr/tmp_8c8trrr.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab60b411c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab60b108b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab60b108988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab60b1077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8c8trrr                        0x0000556b5f983492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab60b5fd460 __libc_start_main +
    245

    6    tmp_8c8trrr                        0x0000556b5f9830f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp4byvjk2a/tmp4byvjk2a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af83f0d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af83edcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af83edcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af83edca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4byvjk2a                        0x00005559b50896c2 <unavailable> + 5826

    5    libc.so.6                          0x00002af83f2c0460 __libc_start_main +
    245

    6    tmp4byvjk2a                        0x00005559b5089329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmporpqybke/tmporpqybke.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bb4862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bb4559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bb4559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bb45587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmporpqybke                        0x00005577a843e6c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b5bb4a4e460 __libc_start_main +
    245

    6    tmporpqybke                        0x00005577a843e329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        binary.append(String(num % 2))\n        num /= 2\n    }\n\
    \    return binary.reversed() + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpe_jl0v3d/tmpe_jl0v3d.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba33e961c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba33e658b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba33e658988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba33e6577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_jl0v3d                        0x00005555ad7496b2 <unavailable> + 5810

    5    libc.so.6                          0x00002ba33eb4d460 __libc_start_main +
    245

    6    tmpe_jl0v3d                        0x00005555ad749319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(number % 2 == 0 ? \"0\" : \"1\")\n     \
    \   number /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpza3zq3ip/tmpza3zq3ip.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ba1527c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ba121eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ba121e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ba121d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza3zq3ip                        0x0000559638d225b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b7ba1713460 __libc_start_main +
    245

    6    tmpza3zq3ip                        0x0000559638d22219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpko0dy00m/tmpko0dy00m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb70c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb6dbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb6dbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb6dbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0dy00m                        0x0000559e150de672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6cb72b2460 __libc_start_main +
    245

    6    tmpko0dy00m                        0x0000559e150de2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmporpqybke/tmporpqybke.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bb4862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bb4559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bb4559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bb45587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmporpqybke                        0x00005577a843e6c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b5bb4a4e460 __libc_start_main +
    245

    6    tmporpqybke                        0x00005577a843e329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary += String(number % 2)\n        number /= 2\n  \
    \  }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpv1tpztfz/tmpv1tpztfz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc33b66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc3385db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc3385d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc3385c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1tpztfz                        0x0000562fb1d286c2 <unavailable> + 5826

    5    libc.so.6                          0x00002abc33d52460 __libc_start_main +
    245

    6    tmpv1tpztfz                        0x0000562fb1d28329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpko0dy00m/tmpko0dy00m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb70c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb6dbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb6dbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb6dbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0dy00m                        0x0000559e150de672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6cb72b2460 __libc_start_main +
    245

    6    tmpko0dy00m                        0x0000559e150de2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpko0dy00m/tmpko0dy00m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb70c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb6dbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb6dbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb6dbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0dy00m                        0x0000559e150de672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6cb72b2460 __libc_start_main +
    245

    6    tmpko0dy00m                        0x0000559e150de2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(number % 2 == 0 ? \"0\" : \"1\")\n     \
    \   number /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpza3zq3ip/tmpza3zq3ip.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ba1527c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ba121eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ba121e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ba121d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza3zq3ip                        0x0000559638d225b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b7ba1713460 __libc_start_main +
    245

    6    tmpza3zq3ip                        0x0000559638d22219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result += String(decimal % 2)\n        decimal /= 2\n\
    \    }\n    return String(result.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpp70fsmrv/tmpp70fsmrv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769f8bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769f5b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769f5b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769f5b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp70fsmrv                        0x000055ddcdb326c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b769faab460 __libc_start_main +
    245

    6    tmpp70fsmrv                        0x000055ddcdb32329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result = String(decimal % 2) + result\n        decimal\
    \ /= 2\n    }\n    return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpaqqi4yqm/tmpaqqi4yqm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b567b3f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b567b0ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b567b0eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b567b0ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaqqi4yqm                        0x000055adb2ca3492 <unavailable> + 5266

    5    libc.so.6                          0x00002b567b5e0460 __libc_start_main +
    245

    6    tmpaqqi4yqm                        0x000055adb2ca30f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp7385wjll/tmp7385wjll.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de4816c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de450db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de450d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de450c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7385wjll                        0x000055f6150ff672 <unavailable> + 5746

    5    libc.so.6                          0x00002b0de4a02460 __libc_start_main +
    245

    6    tmp7385wjll                        0x000055f6150ff2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp7385wjll/tmp7385wjll.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de4816c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de450db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de450d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de450c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7385wjll                        0x000055f6150ff672 <unavailable> + 5746

    5    libc.so.6                          0x00002b0de4a02460 __libc_start_main +
    245

    6    tmp7385wjll                        0x000055f6150ff2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(number % 2 == 0 ? \"0\" : \"1\")\n     \
    \   number /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpza3zq3ip/tmpza3zq3ip.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ba1527c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ba121eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ba121e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ba121d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza3zq3ip                        0x0000559638d225b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b7ba1713460 __libc_start_main +
    245

    6    tmpza3zq3ip                        0x0000559638d22219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\\(String(decimal, radix: 2))db\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpko0dy00m/tmpko0dy00m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb70c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb6dbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb6dbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb6dbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0dy00m                        0x0000559e150de672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6cb72b2460 __libc_start_main +
    245

    6    tmpko0dy00m                        0x0000559e150de2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjb73grfa/tmpjb73grfa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488e24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488df46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488df46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488df457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjb73grfa                        0x00005638c2a6e492 <unavailable> + 5266

    5    libc.so.6                          0x00002b488e43b460 __libc_start_main +
    245

    6    tmpjb73grfa                        0x00005638c2a6e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary += \"\\(decimal % 2)\"\n        decimal /= 2\n\
    \    }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppvkydju9/tmppvkydju9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cf9c37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cf992eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cf992e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cf992d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvkydju9                        0x0000564673936862 <unavailable> + 6242

    5    libc.so.6                          0x00002b6cf9e23460 __libc_start_main +
    245

    6    tmppvkydju9                        0x00005646739364c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var n = decimal\n    while n\
    \ > 0 {\n        result = String(n % 2) + result\n        n /= 2\n    }\n    result\
    \ += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpql_hozti/tmpql_hozti.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae574df8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae574aefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae574aef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae574aee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpql_hozti                        0x0000557854af44e2 <unavailable> + 5346

    5    libc.so.6                          0x00002ae574fe4460 __libc_start_main +
    245

    6    tmpql_hozti                        0x0000557854af4149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var temp = decimal\n    while\
    \ temp > 0 {\n        binary.append(String(temp % 2))\n        temp /= 2\n   \
    \ }\n    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmps1oilcgc/tmps1oilcgc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b6cbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b69b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04b69b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04b69b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1oilcgc                        0x0000555fcd001672 <unavailable> + 5746

    5    libc.so.6                          0x00002b04b6ea8460 __libc_start_main +
    245

    6    tmps1oilcgc                        0x0000555fcd0012d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        result.append(String(num % 2))\n        num /= 2\n    }\n\
    \    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpkkwhiw3o/tmpkkwhiw3o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b754f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b751f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b751f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b751ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkkwhiw3o                        0x00005558d497c672 <unavailable> + 5746

    5    libc.so.6                          0x00002b5b756e5460 __libc_start_main +
    245

    6    tmpkkwhiw3o                        0x00005558d497c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpko0dy00m/tmpko0dy00m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb70c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb6dbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb6dbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb6dbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0dy00m                        0x0000559e150de672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6cb72b2460 __libc_start_main +
    245

    6    tmpko0dy00m                        0x0000559e150de2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(number % 2 == 0 ? \"0\" : \"1\")\n     \
    \   number /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpza3zq3ip/tmpza3zq3ip.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ba1527c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ba121eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ba121e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ba121d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza3zq3ip                        0x0000559638d225b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b7ba1713460 __libc_start_main +
    245

    6    tmpza3zq3ip                        0x0000559638d22219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary += \"\\(decimal % 2)\"\n        decimal /= 2\n\
    \    }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppvkydju9/tmppvkydju9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cf9c37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cf992eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cf992e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cf992d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvkydju9                        0x0000564673936862 <unavailable> + 6242

    5    libc.so.6                          0x00002b6cf9e23460 __libc_start_main +
    245

    6    tmppvkydju9                        0x00005646739364c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var remainder = decimal\n   \
    \ while remainder > 0 {\n        result.append(String(remainder % 2))\n      \
    \  remainder /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpim7muo8m/tmpim7muo8m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65a8a15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65a870cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65a870c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65a870b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpim7muo8m                        0x0000563e6d503672 <unavailable> + 5746

    5    libc.so.6                          0x00002b65a8c01460 __libc_start_main +
    245

    6    tmpim7muo8m                        0x0000563e6d5032d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var remainder = decimal\n   \
    \ while remainder > 0 {\n        result.append(String(remainder % 2))\n      \
    \  remainder /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpim7muo8m/tmpim7muo8m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65a8a15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65a870cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65a870c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65a870b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpim7muo8m                        0x0000563e6d503672 <unavailable> + 5746

    5    libc.so.6                          0x00002b65a8c01460 __libc_start_main +
    245

    6    tmpim7muo8m                        0x0000563e6d5032d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjb73grfa/tmpjb73grfa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488e24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488df46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488df46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488df457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjb73grfa                        0x00005638c2a6e492 <unavailable> + 5266

    5    libc.so.6                          0x00002b488e43b460 __libc_start_main +
    245

    6    tmpjb73grfa                        0x00005638c2a6e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary += \"\\(number % 2)\"\n        number /= 2\n  \
    \  }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpvvd3yfay/tmpvvd3yfay.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45efc63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45ef95ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45ef95a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45ef9597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvd3yfay                        0x000055afd1445862 <unavailable> + 6242

    5    libc.so.6                          0x00002b45efe4f460 __libc_start_main +
    245

    6    tmpvvd3yfay                        0x000055afd14454c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(String(number % 2))\n        number /= 2\n\
    \    }\n    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpde5amprz/tmpde5amprz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d9c76ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d9c465b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d9c465988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d9c4647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde5amprz                        0x00005555c6209672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6d9c95a460 __libc_start_main +
    245

    6    tmpde5amprz                        0x00005555c62092d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp7385wjll/tmp7385wjll.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de4816c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de450db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de450d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de450c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7385wjll                        0x000055f6150ff672 <unavailable> + 5746

    5    libc.so.6                          0x00002b0de4a02460 __libc_start_main +
    245

    6    tmp7385wjll                        0x000055f6150ff2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary += String(decimal % 2)\n        decimal /= 2\n\
    \    }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppytcdj_v/tmppytcdj_v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47acc8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47ac985b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47ac985988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47ac9847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppytcdj_v                        0x000055a8f6d206c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b47ace7a460 __libc_start_main +
    245

    6    tmppytcdj_v                        0x000055a8f6d20329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        result.append(String(num % 2))\n        num /= 2\n    }\n\
    \    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpkkwhiw3o/tmpkkwhiw3o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b754f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b751f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b751f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b751ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkkwhiw3o                        0x00005558d497c672 <unavailable> + 5746

    5    libc.so.6                          0x00002b5b756e5460 __libc_start_main +
    245

    6    tmpkkwhiw3o                        0x00005558d497c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp4byvjk2a/tmp4byvjk2a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af83f0d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af83edcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af83edcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af83edca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4byvjk2a                        0x00005559b50896c2 <unavailable> + 5826

    5    libc.so.6                          0x00002af83f2c0460 __libc_start_main +
    245

    6    tmp4byvjk2a                        0x00005559b5089329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        result.append(String(num % 2))\n        num /= 2\n    }\n\
    \    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpkkwhiw3o/tmpkkwhiw3o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b754f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b751f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b751f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b751ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkkwhiw3o                        0x00005558d497c672 <unavailable> + 5746

    5    libc.so.6                          0x00002b5b756e5460 __libc_start_main +
    245

    6    tmpkkwhiw3o                        0x00005558d497c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = \"\\(number % 2)\" + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpq1k4yrz9/tmpq1k4yrz9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07d9bd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07d98c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07d98c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07d98c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq1k4yrz9                        0x0000556327687622 <unavailable> + 5666

    5    libc.so.6                          0x00002b07d9dbc460 __libc_start_main +
    245

    6    tmpq1k4yrz9                        0x0000556327687289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp7385wjll/tmp7385wjll.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de4816c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de450db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de450d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de450c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7385wjll                        0x000055f6150ff672 <unavailable> + 5746

    5    libc.so.6                          0x00002b0de4a02460 __libc_start_main +
    245

    6    tmp7385wjll                        0x000055f6150ff2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var remainder = decimal\n   \
    \ while remainder > 0 {\n        binary.append(String(remainder % 2))\n      \
    \  remainder /= 2\n    }\n    return binary.reversed() + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpv397qxhd/tmpv397qxhd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad86a5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad86a2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad86a2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad86a2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv397qxhd                        0x00005635ddda46b2 <unavailable> + 5810

    5    libc.so.6                          0x00002ad86a7a5460 __libc_start_main +
    245

    6    tmpv397qxhd                        0x00005635ddda4319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjb73grfa/tmpjb73grfa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488e24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488df46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488df46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488df457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjb73grfa                        0x00005638c2a6e492 <unavailable> + 5266

    5    libc.so.6                          0x00002b488e43b460 __libc_start_main +
    245

    6    tmpjb73grfa                        0x00005638c2a6e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp7385wjll/tmp7385wjll.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de4816c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de450db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de450d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de450c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7385wjll                        0x000055f6150ff672 <unavailable> + 5746

    5    libc.so.6                          0x00002b0de4a02460 __libc_start_main +
    245

    6    tmp7385wjll                        0x000055f6150ff2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var dec = decimal\n    while dec\
    \ > 0 {\n        binary = String(dec % 2) + binary\n        dec /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjbbgc9lh/tmpjbbgc9lh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab42985bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab429552b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab429552988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4295517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbbgc9lh                        0x0000564f126f0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab429a47460 __libc_start_main +
    245

    6    tmpjbbgc9lh                        0x0000564f126f00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(number % 2 == 0 ? \"0\" : \"1\")\n     \
    \   number /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpza3zq3ip/tmpza3zq3ip.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ba1527c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ba121eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ba121e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ba121d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza3zq3ip                        0x0000559638d225b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b7ba1713460 __libc_start_main +
    245

    6    tmpza3zq3ip                        0x0000559638d22219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary += String(number % 2)\n        number /= 2\n  \
    \  }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpv1tpztfz/tmpv1tpztfz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc33b66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc3385db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc3385d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc3385c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1tpztfz                        0x0000562fb1d286c2 <unavailable> + 5826

    5    libc.so.6                          0x00002abc33d52460 __libc_start_main +
    245

    6    tmpv1tpztfz                        0x0000562fb1d28329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(number % 2 == 0 ? \"0\" : \"1\")\n     \
    \   number /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpza3zq3ip/tmpza3zq3ip.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ba1527c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ba121eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ba121e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ba121d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza3zq3ip                        0x0000559638d225b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b7ba1713460 __libc_start_main +
    245

    6    tmpza3zq3ip                        0x0000559638d22219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(number % 2 == 0 ? \"0\" : \"1\")\n     \
    \   number /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpza3zq3ip/tmpza3zq3ip.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ba1527c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ba121eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ba121e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ba121d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza3zq3ip                        0x0000559638d225b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b7ba1713460 __libc_start_main +
    245

    6    tmpza3zq3ip                        0x0000559638d22219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binaryString = \"db\"\n    var decimal = decimal\n\
    \    while decimal > 0 {\n        binaryString.append(String(decimal % 2))\n \
    \       decimal /= 2\n    }\n    return binaryString.reversed() + \"db\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp2pbbewjh/tmp2pbbewjh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a83973c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a8366ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a8366a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a836697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2pbbewjh                        0x00005648d23bc6b2 <unavailable> + 5810

    5    libc.so.6                          0x00002b6a83b5f460 __libc_start_main +
    245

    6    tmp2pbbewjh                        0x00005648d23bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var remainder = decimal\n   \
    \ while remainder > 0 {\n        result.append(remainder % 2 == 0 ? \"0\" : \"\
    1\")\n        remainder /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpl25hb8gk/tmpl25hb8gk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6593bfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65938f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65938f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65938f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl25hb8gk                        0x0000556db3fc05b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b6593dea460 __libc_start_main +
    245

    6    tmpl25hb8gk                        0x0000556db3fc0219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var dec = decimal\n    while\
    \ dec > 0 {\n        binary.append(String(dec % 2))\n        dec /= 2\n    }\n\
    \    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpf_pmi4k4/tmpf_pmi4k4.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04c38b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04c35aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04c35ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04c35ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_pmi4k4                        0x0000562f82b4f672 <unavailable> + 5746

    5    libc.so.6                          0x00002b04c3aa3460 __libc_start_main +
    245

    6    tmpf_pmi4k4                        0x0000562f82b4f2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpko0dy00m/tmpko0dy00m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb70c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb6dbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb6dbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb6dbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0dy00m                        0x0000559e150de672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6cb72b2460 __libc_start_main +
    245

    6    tmpko0dy00m                        0x0000559e150de2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpvfuu_qhc/tmpvfuu_qhc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96b28c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96b25bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96b25bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96b25be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfuu_qhc                        0x000055b7268e8672 <unavailable> + 5746

    5    libc.so.6                          0x00002b96b2ab4460 __libc_start_main +
    245

    6    tmpvfuu_qhc                        0x000055b7268e82d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(String(number % 2))\n        number /= 2\n\
    \    }\n    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpde5amprz/tmpde5amprz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d9c76ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d9c465b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d9c465988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d9c4647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde5amprz                        0x00005555c6209672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6d9c95a460 __libc_start_main +
    245

    6    tmpde5amprz                        0x00005555c62092d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpvfuu_qhc/tmpvfuu_qhc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96b28c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96b25bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96b25bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96b25be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfuu_qhc                        0x000055b7268e8672 <unavailable> + 5746

    5    libc.so.6                          0x00002b96b2ab4460 __libc_start_main +
    245

    6    tmpvfuu_qhc                        0x000055b7268e82d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    return binary.reversed() + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp04i0s247/tmp04i0s247.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebea617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebea30eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebea30e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebea30d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp04i0s247                        0x000055984510b6b2 <unavailable> + 5810

    5    libc.so.6                          0x00002aebea803460 __libc_start_main +
    245

    6    tmp04i0s247                        0x000055984510b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary += String(decimal % 2)\n        decimal /= 2\n\
    \    }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppytcdj_v/tmppytcdj_v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47acc8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47ac985b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47ac985988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47ac9847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppytcdj_v                        0x000055a8f6d206c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b47ace7a460 __libc_start_main +
    245

    6    tmppytcdj_v                        0x000055a8f6d20329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjb73grfa/tmpjb73grfa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488e24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488df46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488df46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488df457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjb73grfa                        0x00005638c2a6e492 <unavailable> + 5266

    5    libc.so.6                          0x00002b488e43b460 __libc_start_main +
    245

    6    tmpjb73grfa                        0x00005638c2a6e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary += String(decimal % 2)\n        decimal /= 2\n\
    \    }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppytcdj_v/tmppytcdj_v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47acc8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47ac985b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47ac985988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47ac9847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppytcdj_v                        0x000055a8f6d206c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b47ace7a460 __libc_start_main +
    245

    6    tmppytcdj_v                        0x000055a8f6d20329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpth61gypl/tmpth61gypl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ba5430c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ba5127b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ba5127988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ba51267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpth61gypl                        0x00005624a18f05b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b6ba561c460 __libc_start_main +
    245

    6    tmpth61gypl                        0x00005624a18f0219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        binary.append(String(num % 2))\n        num /= 2\n    }\n\
    \    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpe8ss9f9f/tmpe8ss9f9f.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0ea87fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0ea576b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0ea576988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0ea5757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8ss9f9f                        0x000055ee1b67a672 <unavailable> + 5746

    5    libc.so.6                          0x00002ac0eaa6b460 __libc_start_main +
    245

    6    tmpe8ss9f9f                        0x000055ee1b67a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp7385wjll/tmp7385wjll.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de4816c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de450db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de450d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de450c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7385wjll                        0x000055f6150ff672 <unavailable> + 5746

    5    libc.so.6                          0x00002b0de4a02460 __libc_start_main +
    245

    6    tmp7385wjll                        0x000055f6150ff2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result += String(decimal % 2)\n        decimal /= 2\n\
    \    }\n    return String(result.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpp70fsmrv/tmpp70fsmrv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769f8bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769f5b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769f5b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769f5b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp70fsmrv                        0x000055ddcdb326c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b769faab460 __libc_start_main +
    245

    6    tmpp70fsmrv                        0x000055ddcdb32329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjb73grfa/tmpjb73grfa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488e24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488df46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488df46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488df457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjb73grfa                        0x00005638c2a6e492 <unavailable> + 5266

    5    libc.so.6                          0x00002b488e43b460 __libc_start_main +
    245

    6    tmpjb73grfa                        0x00005638c2a6e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp7385wjll/tmp7385wjll.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de4816c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de450db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de450d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de450c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7385wjll                        0x000055f6150ff672 <unavailable> + 5746

    5    libc.so.6                          0x00002b0de4a02460 __libc_start_main +
    245

    6    tmp7385wjll                        0x000055f6150ff2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(String(number % 2))\n        number /= 2\n\
    \    }\n    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpde5amprz/tmpde5amprz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d9c76ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d9c465b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d9c465988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d9c4647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde5amprz                        0x00005555c6209672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6d9c95a460 __libc_start_main +
    245

    6    tmpde5amprz                        0x00005555c62092d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpko0dy00m/tmpko0dy00m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb70c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb6dbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb6dbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb6dbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0dy00m                        0x0000559e150de672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6cb72b2460 __libc_start_main +
    245

    6    tmpko0dy00m                        0x0000559e150de2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpko0dy00m/tmpko0dy00m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb70c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb6dbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb6dbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb6dbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0dy00m                        0x0000559e150de672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6cb72b2460 __libc_start_main +
    245

    6    tmpko0dy00m                        0x0000559e150de2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(number % 2 == 0 ? \"0\" : \"1\")\n     \
    \   number /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpza3zq3ip/tmpza3zq3ip.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ba1527c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ba121eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ba121e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ba121d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza3zq3ip                        0x0000559638d225b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b7ba1713460 __libc_start_main +
    245

    6    tmpza3zq3ip                        0x0000559638d22219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp7385wjll/tmp7385wjll.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de4816c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de450db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de450d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de450c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7385wjll                        0x000055f6150ff672 <unavailable> + 5746

    5    libc.so.6                          0x00002b0de4a02460 __libc_start_main +
    245

    6    tmp7385wjll                        0x000055f6150ff2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary += String(number % 2)\n        number /= 2\n  \
    \  }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpv1tpztfz/tmpv1tpztfz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc33b66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc3385db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc3385d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc3385c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1tpztfz                        0x0000562fb1d286c2 <unavailable> + 5826

    5    libc.so.6                          0x00002abc33d52460 __libc_start_main +
    245

    6    tmpv1tpztfz                        0x0000562fb1d28329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        result.append(String(num % 2))\n        num /= 2\n    }\n\
    \    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpkkwhiw3o/tmpkkwhiw3o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b754f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b751f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b751f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b751ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkkwhiw3o                        0x00005558d497c672 <unavailable> + 5746

    5    libc.so.6                          0x00002b5b756e5460 __libc_start_main +
    245

    6    tmpkkwhiw3o                        0x00005558d497c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(number % 2 == 0 ? \"0\" : \"1\")\n     \
    \   number /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpza3zq3ip/tmpza3zq3ip.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ba1527c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ba121eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ba121e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ba121d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza3zq3ip                        0x0000559638d225b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b7ba1713460 __libc_start_main +
    245

    6    tmpza3zq3ip                        0x0000559638d22219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjb73grfa/tmpjb73grfa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488e24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488df46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488df46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488df457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjb73grfa                        0x00005638c2a6e492 <unavailable> + 5266

    5    libc.so.6                          0x00002b488e43b460 __libc_start_main +
    245

    6    tmpjb73grfa                        0x00005638c2a6e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        binary.append(String(num % 2))\n        num /= 2\n    }\n\
    \    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpe8ss9f9f/tmpe8ss9f9f.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0ea87fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0ea576b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0ea576988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0ea5757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8ss9f9f                        0x000055ee1b67a672 <unavailable> + 5746

    5    libc.so.6                          0x00002ac0eaa6b460 __libc_start_main +
    245

    6    tmpe8ss9f9f                        0x000055ee1b67a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjb73grfa/tmpjb73grfa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488e24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488df46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488df46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488df457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjb73grfa                        0x00005638c2a6e492 <unavailable> + 5266

    5    libc.so.6                          0x00002b488e43b460 __libc_start_main +
    245

    6    tmpjb73grfa                        0x00005638c2a6e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    return binary.reversed() + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp04i0s247/tmp04i0s247.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebea617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebea30eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebea30e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebea30d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp04i0s247                        0x000055984510b6b2 <unavailable> + 5810

    5    libc.so.6                          0x00002aebea803460 __libc_start_main +
    245

    6    tmp04i0s247                        0x000055984510b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\\(String(decimal, radix: 2))db\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        binary.append(String(num % 2))\n        num /= 2\n    }\n\
    \    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpe8ss9f9f/tmpe8ss9f9f.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0ea87fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0ea576b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0ea576988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0ea5757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8ss9f9f                        0x000055ee1b67a672 <unavailable> + 5746

    5    libc.so.6                          0x00002ac0eaa6b460 __libc_start_main +
    245

    6    tmpe8ss9f9f                        0x000055ee1b67a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpth61gypl/tmpth61gypl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ba5430c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ba5127b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ba5127988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ba51267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpth61gypl                        0x00005624a18f05b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b6ba561c460 __libc_start_main +
    245

    6    tmpth61gypl                        0x00005624a18f0219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjb73grfa/tmpjb73grfa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488e24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488df46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488df46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488df457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjb73grfa                        0x00005638c2a6e492 <unavailable> + 5266

    5    libc.so.6                          0x00002b488e43b460 __libc_start_main +
    245

    6    tmpjb73grfa                        0x00005638c2a6e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjb73grfa/tmpjb73grfa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488e24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488df46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488df46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488df457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjb73grfa                        0x00005638c2a6e492 <unavailable> + 5266

    5    libc.so.6                          0x00002b488e43b460 __libc_start_main +
    245

    6    tmpjb73grfa                        0x00005638c2a6e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary += String(decimal % 2)\n        decimal /= 2\n\
    \    }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppytcdj_v/tmppytcdj_v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47acc8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47ac985b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47ac985988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47ac9847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppytcdj_v                        0x000055a8f6d206c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b47ace7a460 __libc_start_main +
    245

    6    tmppytcdj_v                        0x000055a8f6d20329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    return binary.reversed() + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp04i0s247/tmp04i0s247.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebea617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebea30eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebea30e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebea30d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp04i0s247                        0x000055984510b6b2 <unavailable> + 5810

    5    libc.so.6                          0x00002aebea803460 __libc_start_main +
    245

    6    tmp04i0s247                        0x000055984510b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary.append(contentsOf: String(decimal % 2))\n    \
    \    decimal /= 2\n    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpv6eupa44/tmpv6eupa44.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66d7d3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66d7a33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66d7a33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66d7a327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv6eupa44                        0x000056167eab36c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b66d7f28460 __libc_start_main +
    245

    6    tmpv6eupa44                        0x000056167eab3329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjb73grfa/tmpjb73grfa.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488e24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488df46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488df46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488df457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjb73grfa                        0x00005638c2a6e492 <unavailable> + 5266

    5    libc.so.6                          0x00002b488e43b460 __libc_start_main +
    245

    6    tmpjb73grfa                        0x00005638c2a6e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpgjj4akux/tmpgjj4akux.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2350f55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2350c4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2350c4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2350c4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjj4akux                        0x000055f36552b492 <unavailable> + 5266

    5    libc.so.6                          0x00002b2351141460 __libc_start_main +
    245

    6    tmpgjj4akux                        0x000055f36552b0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result = String(decimal % 2) + result\n        decimal\
    \ /= 2\n    }\n    return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpaqqi4yqm/tmpaqqi4yqm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b567b3f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b567b0ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b567b0eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b567b0ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaqqi4yqm                        0x000055adb2ca3492 <unavailable> + 5266

    5    libc.so.6                          0x00002b567b5e0460 __libc_start_main +
    245

    6    tmpaqqi4yqm                        0x000055adb2ca30f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(String(number % 2))\n        number /= 2\n\
    \    }\n    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpde5amprz/tmpde5amprz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d9c76ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d9c465b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d9c465988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d9c4647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde5amprz                        0x00005555c6209672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6d9c95a460 __libc_start_main +
    245

    6    tmpde5amprz                        0x00005555c62092d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result = String(decimal % 2) + result\n        decimal\
    \ /= 2\n    }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_8c8trrr/tmp_8c8trrr.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab60b411c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab60b108b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab60b108988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab60b1077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8c8trrr                        0x0000556b5f983492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab60b5fd460 __libc_start_main +
    245

    6    tmp_8c8trrr                        0x0000556b5f9830f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(String(number % 2))\n        number /= 2\n\
    \    }\n    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpde5amprz/tmpde5amprz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d9c76ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d9c465b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d9c465988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d9c4647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde5amprz                        0x00005555c6209672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6d9c95a460 __libc_start_main +
    245

    6    tmpde5amprz                        0x00005555c62092d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpth61gypl/tmpth61gypl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ba5430c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ba5127b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ba5127988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ba51267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpth61gypl                        0x00005624a18f05b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b6ba561c460 __libc_start_main +
    245

    6    tmpth61gypl                        0x00005624a18f0219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary += String(decimal % 2)\n        decimal /= 2\n\
    \    }\n    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppytcdj_v/tmppytcdj_v.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47acc8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47ac985b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47ac985988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47ac9847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppytcdj_v                        0x000055a8f6d206c2 <unavailable> + 5826

    5    libc.so.6                          0x00002b47ace7a460 __libc_start_main +
    245

    6    tmppytcdj_v                        0x000055a8f6d20329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(number % 2 == 0 ? \"0\" : \"1\")\n     \
    \   number /= 2\n    }\n    return binary.reversed() + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpy0icb04m/tmpy0icb04m.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaac5ebec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaac5bb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaac5bb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaac5bb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy0icb04m                        0x000056270622f5f2 <unavailable> + 5618

    5    libc.so.6                          0x00002aaac60aa460 __libc_start_main +
    245

    6    tmpy0icb04m                        0x000056270622f259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary.append(String(number % 2))\n        number /= 2\n\
    \    }\n    binary.append(\"db\")\n    return String(binary.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpko0dy00m/tmpko0dy00m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cb70c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cb6dbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cb6dbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cb6dbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0dy00m                        0x0000559e150de672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6cb72b2460 __libc_start_main +
    245

    6    tmpko0dy00m                        0x0000559e150de2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(String(number % 2))\n        number /= 2\n\
    \    }\n    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpde5amprz/tmpde5amprz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d9c76ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d9c465b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d9c465988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d9c4647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde5amprz                        0x00005555c6209672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6d9c95a460 __libc_start_main +
    245

    6    tmpde5amprz                        0x00005555c62092d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(String(number % 2))\n        number /= 2\n\
    \    }\n    result.append(\"db\")\n    return String(result.reversed())\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpde5amprz/tmpde5amprz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d9c76ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d9c465b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d9c465988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d9c4647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde5amprz                        0x00005555c6209672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6d9c95a460 __libc_start_main +
    245

    6    tmpde5amprz                        0x00005555c62092d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpth61gypl/tmpth61gypl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ba5430c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ba5127b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ba5127988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ba51267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpth61gypl                        0x00005624a18f05b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b6ba561c460 __libc_start_main +
    245

    6    tmpth61gypl                        0x00005624a18f0219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var remainder = decimal\n    while\
    \ remainder > 0 {\n        binary = String(remainder % 2) + binary\n        remainder\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpx6x_mlnw/tmpx6x_mlnw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c8fb34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c8f82bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c8f82b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c8f82a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6x_mlnw                        0x0000559eb887a492 <unavailable> + 5266

    5    libc.so.6                          0x00002b6c8fd20460 __libc_start_main +
    245

    6    tmpx6x_mlnw                        0x0000559eb887a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var dec = decimal\n    while\
    \ dec > 0 {\n        binary += String(dec % 2)\n        dec /= 2\n    }\n    return\
    \ String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmprmttr901/tmprmttr901.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad20df7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad20dc75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad20dc75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad20dc747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprmttr901                        0x000055a69caca6c2 <unavailable> + 5826

    5    libc.so.6                          0x00002ad20e16a460 __libc_start_main +
    245

    6    tmprmttr901                        0x000055a69caca329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        binary.append(String(num % 2))\n        num /= 2\n    }\n\
    \    return String(binary.reversed()) + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpc5z2jkz7/tmpc5z2jkz7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba772b60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba772857b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba772857988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7728567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5z2jkz7                        0x000055b0ecd2a6c2 <unavailable> + 5826

    5    libc.so.6                          0x00002ba772d4c460 __libc_start_main +
    245

    6    tmpc5z2jkz7                        0x000055b0ecd2a329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpbjkqdq25/tmpbjkqdq25.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49ab596c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49ab28db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49ab28d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49ab28c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjkqdq25                        0x000055cb42d93622 <unavailable> + 5666

    5    libc.so.6                          0x00002b49ab782460 __libc_start_main +
    245

    6    tmpbjkqdq25                        0x000055cb42d93289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    result += \"db\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp_36n8ebs/tmp_36n8ebs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b28cedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b289e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b289e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b289e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_36n8ebs                        0x0000563d40a1f4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b0b28ed9460 __libc_start_main +
    245

    6    tmp_36n8ebs                        0x0000563d40a1f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpmijz7x3l/tmpmijz7x3l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673e02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673dd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673dd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673dd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmijz7x3l                        0x000055c02972c492 <unavailable> + 5266

    5    libc.so.6                          0x00002b673e218460 __libc_start_main +
    245

    6    tmpmijz7x3l                        0x000055c02972c0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\
    \n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpdl66nvel/tmpdl66nvel.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada0c632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada0c329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada0c329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada0c3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl66nvel                        0x0000557375db0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ada0c81e460 __libc_start_main +
    245

    6    tmpdl66nvel                        0x0000557375db00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013643
