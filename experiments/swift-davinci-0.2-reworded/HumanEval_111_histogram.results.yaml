language: swift
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8r7hjojj.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1xtxv04g.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8r7hjojj.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpwkyry25w/tmpwkyry25w.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cb2f1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cb2c15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cb2c15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cb2c147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkyry25w                        0x0000562e6abdfb86 <unavailable> + 7046

    5    libc.so.6                          0x00002b1cb310a460 __libc_start_main +
    245

    6    tmpwkyry25w                        0x0000562e6abdf599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var max = 0\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if let count = result[letter] {\n            result[letter] = count + 1\n  \
    \          if count + 1 > max {\n                max = count + 1\n           \
    \ }\n        } else {\n            result[letter] = 1\n            if 1 > max\
    \ {\n                max = 1\n            }\n        }\n    }\n    var finalResult\
    \ = [String : Int]()\n    for (key, value) in result {\n        if value == max\
    \ {\n            finalResult[key] = value\n        }\n    }\n    return finalResult\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpy9owod_q.swift:19:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var max = 0\n    for letter in\
    \ test.components(separatedBy: \" \") {\n        if let count = result[letter]\
    \ {\n            result[letter] = count + 1\n            if count + 1 > max {\n\
    \                max = count + 1\n            }\n        } else {\n          \
    \  result[letter] = 1\n            if 1 > max {\n                max = 1\n   \
    \         }\n        }\n    }\n    var finalResult = [String : Int]()\n    for\
    \ (key, value) in result {\n        if value == max {\n            finalResult[key]\
    \ = value\n        }\n    }\n    return finalResult\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbsantoph.swift:19:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpwkyry25w/tmpwkyry25w.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cb2f1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cb2c15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cb2c15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cb2c147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkyry25w                        0x0000562e6abdfb86 <unavailable> + 7046

    5    libc.so.6                          0x00002b1cb310a460 __libc_start_main +
    245

    6    tmpwkyry25w                        0x0000562e6abdf599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let value = histogram[letter]\
    \ {\n            histogram[letter] = value + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9yo5y6ks.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var max = 0\n    for letter in\
    \ test.components(separatedBy: \" \") {\n        if let count = result[letter]\
    \ {\n            result[letter] = count + 1\n            if count + 1 > max {\n\
    \                max = count + 1\n            }\n        } else {\n          \
    \  result[letter] = 1\n            if 1 > max {\n                max = 1\n   \
    \         }\n        }\n    }\n    return result.filter { $0.value == max }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpys0slvln.swift:19:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if result[word] == nil {\n        \
    \    result[word] = 1\n        } else {\n            result[word]! += 1\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpku82bt30.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfq3r4qoz.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfq3r4qoz.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.split(separator: \" \")\n    var dict = [String\
    \ : Int]()\n    for letter in letters {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpj1e64nw3/tmpj1e64nw3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b002b451c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b002b148b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b002b148988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b002b1477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1e64nw3                        0x000055f1e1005b86 <unavailable> + 7046

    5    libc.so.6                          0x00002b002b63d460 __libc_start_main +
    245

    6    tmpj1e64nw3                        0x000055f1e1005599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i]! += 1\n        }\n        if dict[i]!\
    \ > max {\n            max = dict[i]!\n        }\n    }\n    var result = [String\
    \ : Int]()\n    for (key, value) in dict {\n        if value == max {\n      \
    \      result[key] = value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2py_a409.swift:19:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    var max = 0\n    for letter in letters {\n        if let count =\
    \ result[String(letter)] {\n            result[String(letter)] = count + 1\n \
    \           if count + 1 > max {\n                max = count + 1\n          \
    \  }\n        } else {\n            result[String(letter)] = 1\n            if\
    \ 1 > max {\n                max = 1\n            }\n        }\n    }\n    var\
    \ finalResult = [String : Int]()\n    for (letter, count) in result {\n      \
    \  if count == max {\n            finalResult[letter] = count\n        }\n   \
    \ }\n    return finalResult\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    for char in test.characters {\n\
    \        if let count = dict[String(char)] {\n            dict[String(char)] =\
    \ count + 1\n        } else {\n            dict[String(char)] = 1\n        }\n\
    \    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpcx4fwjg7.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in test.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpsgmt59oi/tmpsgmt59oi.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5aa2214c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5aa1f0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5aa1f0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5aa1f0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgmt59oi                        0x0000561ac8fbbb86 <unavailable> + 7046

    5    libc.so.6                          0x00002b5aa2400460 __libc_start_main +
    245

    6    tmpsgmt59oi                        0x0000561ac8fbb599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpycyht8dz.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var max = 0\n    for char in\
    \ test.split(separator: \" \") {\n        if let count = result[String(char)]\
    \ {\n            result[String(char)] = count + 1\n            if count + 1 >\
    \ max {\n                max = count + 1\n            }\n        } else {\n  \
    \          result[String(char)] = 1\n            if 1 > max {\n              \
    \  max = 1\n            }\n        }\n    }\n    return result.filter { $0.value\
    \ == max }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if let count = dict[word] {\n     \
    \       dict[word] = count + 1\n        } else {\n            dict[word] = 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpob9imlfv.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    for char in test.characters\
    \ {\n        if char != \" \" {\n            if let count = dict[String(char)]\
    \ {\n                dict[String(char)] = count + 1\n                if count\
    \ + 1 > max {\n                    max = count + 1\n                }\n      \
    \      } else {\n                dict[String(char)] = 1\n                if 1\
    \ > max {\n                    max = 1\n                }\n            }\n   \
    \     }\n    }\n    var result = [String : Int]()\n    for (key, value) in dict\
    \ {\n        if value == max {\n            result[key] = value\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpj_6pedqz.swift:19:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in test.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    var maxLetters\
    \ = [String]()\n    for letter in test.components(separatedBy: \" \") {\n    \
    \    if let count = dict[letter] {\n            dict[letter] = count + 1\n   \
    \         if count + 1 > max {\n                max = count + 1\n            \
    \    maxLetters = [letter]\n            } else if count + 1 == max {\n       \
    \         maxLetters.append(letter)\n            }\n        } else {\n       \
    \     dict[letter] = 1\n            if max == 0 {\n                max = 1\n \
    \               maxLetters = [letter]\n            }\n        }\n    }\n    var\
    \ result = [String : Int]()\n    for letter in maxLetters {\n        result[letter]\
    \ = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_8tzrqvl.swift:20:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.components(separatedBy: \" \")\n    var dict\
    \ = [String : Int]()\n    for letter in letters {\n        if let count = dict[letter]\
    \ {\n            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_x4ga1xn.swift:17:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8r7hjojj.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpwkyry25w/tmpwkyry25w.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cb2f1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cb2c15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cb2c15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cb2c147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkyry25w                        0x0000562e6abdfb86 <unavailable> + 7046

    5    libc.so.6                          0x00002b1cb310a460 __libc_start_main +
    245

    6    tmpwkyry25w                        0x0000562e6abdf599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    var maxKeys =\
    \ [String]()\n    for char in test.characters {\n        if char != \" \" {\n\
    \            if let count = dict[String(char)] {\n                dict[String(char)]\
    \ = count + 1\n                if count + 1 > max {\n                    max =\
    \ count + 1\n                    maxKeys = [String(char)]\n                } else\
    \ if count + 1 == max {\n                    maxKeys.append(String(char))\n  \
    \              }\n            } else {\n                dict[String(char)] = 1\n\
    \                if max == 0 {\n                    max = 1\n                \
    \    maxKeys = [String(char)]\n                }\n            }\n        }\n \
    \   }\n    var result = [String : Int]()\n    for key in maxKeys {\n        result[key]\
    \ = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpwsb2vwbi.swift:20:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in test.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var max = 0\n    for letter in\
    \ test.split(separator: \" \") {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n            if count + 1\
    \ > max {\n                max = count + 1\n            }\n        } else {\n\
    \            result[String(letter)] = 1\n            if 1 > max {\n          \
    \      max = 1\n            }\n        }\n    }\n    return result.filter { $0.value\
    \ == max }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    for char in test.characters\
    \ {\n        if char == \" \" {\n            continue\n        }\n        if dict[String(char)]\
    \ == nil {\n            dict[String(char)] = 1\n        } else {\n           \
    \ dict[String(char)]! += 1\n        }\n        if dict[String(char)]! > max {\n\
    \            max = dict[String(char)]!\n        }\n    }\n    var result = [String\
    \ : Int]()\n    for (key, value) in dict {\n        if value == max {\n      \
    \      result[key] = value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqzkp2wf4.swift:19:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in test.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for item in array {\n        if let count = dict[item] {\n     \
    \       dict[item] = count + 1\n        } else {\n            dict[item] = 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp83g2354x.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    for letter in\
    \ test.components(separatedBy: \" \") {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n        if dict[letter]! > max {\n            max = dict[letter]!\n\
    \        }\n    }\n    var result = [String : Int]()\n    for (key, value) in\
    \ dict {\n        if value == max {\n            result[key] = value\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpj9izet9f.swift:19:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for letter in array {\n        if dict[letter] == nil {\n      \
    \      dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n  \
    \      }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8o5pc5_2.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    for char in test.split(separator:\
    \ \" \") {\n        if let count = dict[String(char)] {\n            dict[String(char)]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            dict[String(char)] = 1\n   \
    \         if 1 > max {\n                max = 1\n            }\n        }\n  \
    \  }\n    var result = [String : Int]()\n    for (key, value) in dict {\n    \
    \    if value == max {\n            result[key] = value\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if result[String(letter)] == nil\
    \ {\n            result[String(letter)] = 1\n        } else {\n            result[String(letter)]!\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp6775oaw8/tmp6775oaw8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cf72c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cf6fb7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cf6fb7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cf6fb67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6775oaw8                        0x0000555e7d650c76 <unavailable> + 7286

    5    libc.so.6                          0x00002b3cf74ac460 __libc_start_main +
    245

    6    tmp6775oaw8                        0x0000555e7d650689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1xtxv04g.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var max = 0\n    for letter\
    \ in test.split(separator: \" \") {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n            if count +\
    \ 1 > max {\n                max = count + 1\n            }\n        } else {\n\
    \            histogram[String(letter)] = 1\n            if 1 > max {\n       \
    \         max = 1\n            }\n        }\n    }\n    var result = [String :\
    \ Int]()\n    for (key, value) in histogram {\n        if value == max {\n   \
    \         result[key] = value\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var max = 0\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ if let count = result[letter] {\n            result[letter] = count + 1\n  \
    \          if count + 1 > max {\n                max = count + 1\n           \
    \ }\n        } else {\n            result[letter] = 1\n            if 1 > max\
    \ {\n                max = 1\n            }\n        }\n    }\n    return result.filter\
    \ { $0.value == max }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpsqmxgwfn.swift:19:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var max = 0\n    for letter in\
    \ test.split(separator: \" \") {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n            if count + 1\
    \ > max {\n                max = count + 1\n            }\n        } else {\n\
    \            result[String(letter)] = 1\n            if 1 > max {\n          \
    \      max = 1\n            }\n        }\n    }\n    return result.filter { $0.value\
    \ == max }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfut4ghls.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfq3r4qoz.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if result[word] == nil {\n        \
    \    result[word] = 1\n        } else {\n            result[word]! += 1\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpku82bt30.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        result[letter] = (result[letter]\
    \ ?? 0) + 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp6ay8q0h7.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var max = 0\n    let letters\
    \ = test.split(separator: \" \")\n    for letter in letters {\n        if let\
    \ count = histogram[String(letter)] {\n            histogram[String(letter)] =\
    \ count + 1\n            if count + 1 > max {\n                max = count + 1\n\
    \            }\n        } else {\n            histogram[String(letter)] = 1\n\
    \            if 1 > max {\n                max = 1\n            }\n        }\n\
    \    }\n    var result = [String : Int]()\n    for (letter, count) in histogram\
    \ {\n        if count == max {\n            result[letter] = count\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let arr = test.components(separatedBy:\
    \ \" \")\n    for i in arr {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpyx89ydkq.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    let arr = test.components(separatedBy: \" \")\n          \
    \    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfut4ghls.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let arr = test.components(separatedBy:\
    \ \" \")\n    for i in arr {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpyx89ydkq.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    let arr = test.components(separatedBy: \" \")\n          \
    \    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfq3r4qoz.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for char in array {\n        if let count = dict[char] {\n     \
    \       dict[char] = count + 1\n        } else {\n            dict[char] = 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdtgsr_ql.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfut4ghls.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var maxCount = 0\n    for letter\
    \ in test.split(separator: \" \") {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n            if count + 1 >\
    \ maxCount {\n                maxCount = count + 1\n            }\n        } else\
    \ {\n            dict[String(letter)] = 1\n            if maxCount == 0 {\n  \
    \              maxCount = 1\n            }\n        }\n    }\n    var result =\
    \ [String : Int]()\n    for (key, value) in dict {\n        if value == maxCount\
    \ {\n            result[key] = value\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpycyht8dz.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    for letter in\
    \ test.split(separator: \" \") {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n            if count + 1 >\
    \ max {\n                max = count + 1\n            }\n        } else {\n  \
    \          dict[String(letter)] = 1\n            if 1 > max {\n              \
    \  max = 1\n            }\n        }\n    }\n    return dict.filter { $0.value\
    \ == max }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var max = 0\n    for letter in\
    \ test.split(separator: \" \") {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n            if count + 1\
    \ > max {\n                max = count + 1\n            }\n        } else {\n\
    \            result[String(letter)] = 1\n            if 1 > max {\n          \
    \      max = 1\n            }\n        }\n    }\n    return result.filter { $0.value\
    \ == max }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpwkyry25w/tmpwkyry25w.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cb2f1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cb2c15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cb2c15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cb2c147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkyry25w                        0x0000562e6abdfb86 <unavailable> + 7046

    5    libc.so.6                          0x00002b1cb310a460 __libc_start_main +
    245

    6    tmpwkyry25w                        0x0000562e6abdf599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8r7hjojj.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if let count = dict[i] {\n           \
    \ dict[i] = count + 1\n        } else {\n            dict[i] = 1\n        }\n\
    \    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmkfly1n0.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.split(separator:\
    \ \" \")\n    for letter in array {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpd0lr3y7u/tmpd0lr3y7u.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40d2efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40cfe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40cfe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40cfe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0lr3y7u                        0x0000558f6dc82b86 <unavailable> + 7046

    5    libc.so.6                          0x00002ae40d4db460 __libc_start_main +
    245

    6    tmpd0lr3y7u                        0x0000558f6dc82599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    var max = 0\n    for letter in letters {\n        if let count =\
    \ result[String(letter)] {\n            result[String(letter)] = count + 1\n \
    \           if count + 1 > max {\n                max = count + 1\n          \
    \  }\n        } else {\n            result[String(letter)] = 1\n            if\
    \ 1 > max {\n                max = 1\n            }\n        }\n    }\n    return\
    \ result.filter { $0.value == max }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for word in array {\n        if let count = dict[word] {\n     \
    \       dict[word] = count + 1\n        } else {\n            dict[word] = 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpr7a0jrgd.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfq3r4qoz.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if let count = dict[i] {\n           \
    \ dict[i] = count + 1\n        } else {\n            dict[i] = 1\n        }\n\
    \    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmkfly1n0.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfut4ghls.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8r7hjojj.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let arr = test.split(separator:\
    \ \" \")\n    for i in arr {\n        if dict[String(i)] == nil {\n          \
    \  dict[String(i)] = 1\n        } else {\n            dict[String(i)]! += 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpn8smetbp/tmpn8smetbp.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cc3939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cc3630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cc3630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cc362f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8smetbp                        0x0000559a2b6cbc76 <unavailable> + 7286

    5    libc.so.6                          0x00002b6cc3b25460 __libc_start_main +
    245

    6    tmpn8smetbp                        0x0000559a2b6cb689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if let value = dict[i] {\n           \
    \ dict[i] = value + 1\n        } else {\n            dict[i] = 1\n        }\n\
    \    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpm1odi53r.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfq3r4qoz.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    var maxCount = 0\n    for letter in letters {\n        if result[String(letter)]\
    \ == nil {\n            result[String(letter)] = 1\n        } else {\n       \
    \     result[String(letter)]! += 1\n        }\n        if result[String(letter)]!\
    \ > maxCount {\n            maxCount = result[String(letter)]!\n        }\n  \
    \  }\n    return result.filter { $0.value == maxCount }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1xtxv04g.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.split(separator:\
    \ \" \") {\n        if let count = histogram[String(letter)] {\n            histogram[String(letter)]\
    \ = count + 1\n        } else {\n            histogram[String(letter)] = 1\n \
    \       }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpd_gzm2z8/tmpd_gzm2z8.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29059e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29056d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29056d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29056d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_gzm2z8                        0x000055eb34904b86 <unavailable> + 7046

    5    libc.so.6                          0x00002b2905bce460 __libc_start_main +
    245

    6    tmpd_gzm2z8                        0x000055eb34904599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    var maxArray =\
    \ [String]()\n    let array = test.split(separator: \" \")\n    for i in array\
    \ {\n        if dict[String(i)] == nil {\n            dict[String(i)] = 1\n  \
    \      } else {\n            dict[String(i)]! += 1\n        }\n        if dict[String(i)]!\
    \ > max {\n            max = dict[String(i)]!\n            maxArray = [String(i)]\n\
    \        } else if dict[String(i)]! == max {\n            maxArray.append(String(i))\n\
    \        }\n    }\n    for i in maxArray {\n        dict[i] = max\n    }\n   \
    \ return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp63x9s2ms/tmp63x9s2ms.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13daf4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13dac44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13dac44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13dac437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp63x9s2ms                        0x000056355a093d26 <unavailable> + 7462

    5    libc.so.6                          0x00002b13db139460 __libc_start_main +
    245

    6    tmp63x9s2ms                        0x000056355a093739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8r7hjojj.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if let value = dict[i] {\n           \
    \ dict[i] = value + 1\n        } else {\n            dict[i] = 1\n        }\n\
    \    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpm1odi53r.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if let count = dict[i] {\n           \
    \ dict[i] = count + 1\n        } else {\n            dict[i] = 1\n        }\n\
    \    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmkfly1n0.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpycyht8dz.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    for char in test.components(separatedBy:\
    \ \" \") {\n        if let count = dict[char] {\n            dict[char] = count\
    \ + 1\n        } else {\n            dict[char] = 1\n        }\n        if dict[char]!\
    \ > max {\n            max = dict[char]!\n        }\n    }\n    var result = [String\
    \ : Int]()\n    for (key, value) in dict {\n        if value == max {\n      \
    \      result[key] = value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_zefnwen.swift:19:22: error: value of type 'String' has no member\
    \ 'components'\n    for char in test.components(separatedBy: \" \") {\n      \
    \          ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if dict[String(letter)] == nil\
    \ {\n            dict[String(letter)] = 1\n        } else {\n            dict[String(letter)]!\
    \ += 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpaqf0w4ql/tmpaqf0w4ql.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba65e72dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba65e424b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba65e424988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba65e4237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaqf0w4ql                        0x000056359269dc76 <unavailable> + 7286

    5    libc.so.6                          0x00002ba65e919460 __libc_start_main +
    245

    6    tmpaqf0w4ql                        0x000056359269d689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for letter in array {\n        if dict[letter] == nil {\n      \
    \      dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n  \
    \      }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8o5pc5_2.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpwkyry25w/tmpwkyry25w.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cb2f1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cb2c15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cb2c15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cb2c147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkyry25w                        0x0000562e6abdfb86 <unavailable> + 7046

    5    libc.so.6                          0x00002b1cb310a460 __libc_start_main +
    245

    6    tmpwkyry25w                        0x0000562e6abdf599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1xtxv04g.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1xtxv04g.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp753aqiis/tmp753aqiis.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fc8acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fc5a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fc5a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fc5a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp753aqiis                        0x0000561c010d3b86 <unavailable> + 7046

    5    libc.so.6                          0x00002ab1fca98460 __libc_start_main +
    245

    6    tmp753aqiis                        0x0000561c010d3599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let words = test.split(separator:\
    \ \" \")\n    for word in words {\n        if let count = dict[String(word)] {\n\
    \            dict[String(word)] = count + 1\n        } else {\n            dict[String(word)]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp4h3yyx73/tmp4h3yyx73.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4915fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4912f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4912f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4912f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4h3yyx73                        0x0000560f771dbb86 <unavailable> + 7046

    5    libc.so.6                          0x00002ab4917e8460 __libc_start_main +
    245

    6    tmp4h3yyx73                        0x0000560f771db599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    for char in test.characters\
    \ {\n        if char != \" \" {\n            if let count = dict[String(char)]\
    \ {\n                dict[String(char)] = count + 1\n                if count\
    \ + 1 > max {\n                    max = count + 1\n                }\n      \
    \      } else {\n                dict[String(char)] = 1\n                if 1\
    \ > max {\n                    max = 1\n                }\n            }\n   \
    \     }\n    }\n    var result = [String : Int]()\n    for (key, value) in dict\
    \ {\n        if value == max {\n            result[key] = value\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpj_6pedqz.swift:19:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in test.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8r7hjojj.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if dict[String(letter)] == nil\
    \ {\n            dict[String(letter)] = 1\n        } else {\n            dict[String(letter)]!\
    \ += 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpaqf0w4ql/tmpaqf0w4ql.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba65e72dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba65e424b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba65e424988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba65e4237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaqf0w4ql                        0x000056359269dc76 <unavailable> + 7286

    5    libc.so.6                          0x00002ba65e919460 __libc_start_main +
    245

    6    tmpaqf0w4ql                        0x000056359269d689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp753aqiis/tmp753aqiis.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fc8acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fc5a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fc5a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fc5a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp753aqiis                        0x0000561c010d3b86 <unavailable> + 7046

    5    libc.so.6                          0x00002ab1fca98460 __libc_start_main +
    245

    6    tmp753aqiis                        0x0000561c010d3599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8r7hjojj.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    for letter in\
    \ test.characters {\n        if let value = dict[String(letter)] {\n         \
    \   dict[String(letter)] = value + 1\n            if value + 1 > max {\n     \
    \           max = value + 1\n            }\n        } else {\n            dict[String(letter)]\
    \ = 1\n            if 1 > max {\n                max = 1\n            }\n    \
    \    }\n    }\n    var result = [String : Int]()\n    for (key, value) in dict\
    \ {\n        if value == max {\n            result[key] = value\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpn5bv18fj.swift:19:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in test.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if let count = dict[i] {\n           \
    \ dict[i] = count + 1\n        } else {\n            dict[i] = 1\n        }\n\
    \    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmkfly1n0.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpwkyry25w/tmpwkyry25w.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cb2f1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cb2c15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cb2c15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cb2c147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkyry25w                        0x0000562e6abdfb86 <unavailable> + 7046

    5    libc.so.6                          0x00002b1cb310a460 __libc_start_main +
    245

    6    tmpwkyry25w                        0x0000562e6abdf599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var maxCount = 0\n    for\
    \ letter in test.split(separator: \" \") {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n            if count +\
    \ 1 > maxCount {\n                maxCount = count + 1\n            }\n      \
    \  } else {\n            histogram[String(letter)] = 1\n            if 1 > maxCount\
    \ {\n                maxCount = 1\n            }\n        }\n    }\n    var result\
    \ = [String : Int]()\n    for (letter, count) in histogram {\n        if count\
    \ == maxCount {\n            result[letter] = count\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    for char in test.split(separator:\
    \ \" \") {\n        if let count = dict[String(char)] {\n            dict[String(char)]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            dict[String(char)] = 1\n   \
    \         if 1 > max {\n                max = 1\n            }\n        }\n  \
    \  }\n    var result = [String : Int]()\n    for (key, value) in dict {\n    \
    \    if value == max {\n            result[key] = value\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp753aqiis/tmp753aqiis.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fc8acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fc5a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fc5a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fc5a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp753aqiis                        0x0000561c010d3b86 <unavailable> + 7046

    5    libc.so.6                          0x00002ab1fca98460 __libc_start_main +
    245

    6    tmp753aqiis                        0x0000561c010d3599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.split(separator:\
    \ \" \")\n    for letter in array {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpd0lr3y7u/tmpd0lr3y7u.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40d2efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40cfe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40cfe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40cfe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0lr3y7u                        0x0000558f6dc82b86 <unavailable> + 7046

    5    libc.so.6                          0x00002ae40d4db460 __libc_start_main +
    245

    6    tmpd0lr3y7u                        0x0000558f6dc82599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfut4ghls.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpsgmt59oi/tmpsgmt59oi.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5aa2214c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5aa1f0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5aa1f0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5aa1f0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgmt59oi                        0x0000561ac8fbbb86 <unavailable> + 7046

    5    libc.so.6                          0x00002b5aa2400460 __libc_start_main +
    245

    6    tmpsgmt59oi                        0x0000561ac8fbb599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for char in array {\n        if let count = dict[char] {\n     \
    \       dict[char] = count + 1\n        } else {\n            dict[char] = 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdtgsr_ql.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram: [String : Int] = [:]\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp93_pxn79.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for letter in array {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp0c20503k.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if result[String(letter)] == nil\
    \ {\n            result[String(letter)] = 1\n        } else {\n            result[String(letter)]!\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp6775oaw8/tmp6775oaw8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cf72c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cf6fb7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cf6fb7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cf6fb67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6775oaw8                        0x0000555e7d650c76 <unavailable> + 7286

    5    libc.so.6                          0x00002b3cf74ac460 __libc_start_main +
    245

    6    tmp6775oaw8                        0x0000555e7d650689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfq3r4qoz.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.components(separatedBy: \" \")\n    var dict\
    \ = [String : Int]()\n    for letter in letters {\n        if let count = dict[letter]\
    \ {\n            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_x4ga1xn.swift:17:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp753aqiis/tmp753aqiis.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fc8acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fc5a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fc5a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fc5a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp753aqiis                        0x0000561c010d3b86 <unavailable> + 7046

    5    libc.so.6                          0x00002ab1fca98460 __libc_start_main +
    245

    6    tmp753aqiis                        0x0000561c010d3599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    var maxCount = 0\n    for letter\
    \ in test.split(separator: \" \") {\n        let count = result[String(letter)]\
    \ ?? 0\n        result[String(letter)] = count + 1\n        maxCount = max(maxCount,\
    \ count + 1)\n    }\n    return result.filter { $0.value == maxCount }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if let count = result[word] {\n   \
    \         result[word] = count + 1\n        } else {\n            result[word]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5y5e9qv1.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    let array = test.components(separatedBy:\
    \ \" \")\n    for item in array {\n        if result[item] == nil {\n        \
    \    result[item] = 1\n        } else {\n            result[item]! += 1\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpa3sf1mt2.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1xtxv04g.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpwkyry25w/tmpwkyry25w.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cb2f1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cb2c15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cb2c15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cb2c147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkyry25w                        0x0000562e6abdfb86 <unavailable> + 7046

    5    libc.so.6                          0x00002b1cb310a460 __libc_start_main +
    245

    6    tmpwkyry25w                        0x0000562e6abdf599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfq3r4qoz.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if result[String(letter)] == nil\
    \ {\n            result[String(letter)] = 1\n        } else {\n            result[String(letter)]!\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp6775oaw8/tmp6775oaw8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cf72c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cf6fb7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cf6fb7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cf6fb67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6775oaw8                        0x0000555e7d650c76 <unavailable> + 7286

    5    libc.so.6                          0x00002b3cf74ac460 __libc_start_main +
    245

    6    tmp6775oaw8                        0x0000555e7d650689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if result[i] == nil {\n            result[i]\
    \ = 1\n        } else {\n            result[i] = result[i]! + 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpz9b3ylfh.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp753aqiis/tmp753aqiis.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fc8acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fc5a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fc5a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fc5a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp753aqiis                        0x0000561c010d3b86 <unavailable> + 7046

    5    libc.so.6                          0x00002ab1fca98460 __libc_start_main +
    245

    6    tmp753aqiis                        0x0000561c010d3599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.components(separatedBy:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpi1vy9gek.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if result[i] == nil {\n            result[i]\
    \ = 1\n        } else {\n            result[i] = result[i]! + 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpz9b3ylfh.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8r7hjojj.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfut4ghls.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i]! += 1\n        }\n        if dict[i]!\
    \ > max {\n            max = dict[i]!\n        }\n    }\n    var result = [String\
    \ : Int]()\n    for (key, value) in dict {\n        if value == max {\n      \
    \      result[key] = value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2py_a409.swift:19:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let testArray = test.components(separatedBy:\
    \ \" \")\n    for item in testArray {\n        if let count = result[item] {\n\
    \            result[item] = count + 1\n        } else {\n            result[item]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5nr7bpwd.swift:18:26: error: value of type 'String' has no member\
    \ 'components'\n    let testArray = test.components(separatedBy: \" \")\n    \
    \                ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfut4ghls.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    for char in test.characters\
    \ {\n        if char != \" \" {\n            if let count = dict[String(char)]\
    \ {\n                dict[String(char)] = count + 1\n                if count\
    \ + 1 > max {\n                    max = count + 1\n                }\n      \
    \      } else {\n                dict[String(char)] = 1\n                if 1\
    \ > max {\n                    max = 1\n                }\n            }\n   \
    \     }\n    }\n    var result = [String : Int]()\n    for (key, value) in dict\
    \ {\n        if value == max {\n            result[key] = value\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpj_6pedqz.swift:19:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in test.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8r7hjojj.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for letter in array {\n        if dict[letter] == nil {\n      \
    \      dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n  \
    \      }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8o5pc5_2.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for letter in array {\n        if let count = dict[letter] {\n \
    \           dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp08f8yf79.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if dict[String(letter)] == nil\
    \ {\n            dict[String(letter)] = 1\n        } else {\n            dict[String(letter)]!\
    \ += 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpaqf0w4ql/tmpaqf0w4ql.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba65e72dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba65e424b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba65e424988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba65e4237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaqf0w4ql                        0x000056359269dc76 <unavailable> + 7286

    5    libc.so.6                          0x00002ba65e919460 __libc_start_main +
    245

    6    tmpaqf0w4ql                        0x000056359269d689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let arr = test.components(separatedBy:\
    \ \" \")\n    var max = 0\n    for i in arr {\n        if let count = dict[i]\
    \ {\n            dict[i] = count + 1\n        } else {\n            dict[i] =\
    \ 1\n        }\n        if dict[i]! > max {\n            max = dict[i]!\n    \
    \    }\n    }\n    var result = [String : Int]()\n    for i in dict {\n      \
    \  if i.value == max {\n            result[i.key] = i.value\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpa_whr22w.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    let arr = test.components(separatedBy: \" \")\n          \
    \    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let arr = test.components(separatedBy:\
    \ \" \")\n    for i in arr {\n        if let count = dict[i] {\n            dict[i]\
    \ = count + 1\n        } else {\n            dict[i] = 1\n        }\n    }\n \
    \   return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpyats1hth.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    let arr = test.components(separatedBy: \" \")\n          \
    \    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.split(separator:\
    \ \" \") {\n        if let count = histogram[String(letter)] {\n            histogram[String(letter)]\
    \ = count + 1\n        } else {\n            histogram[String(letter)] = 1\n \
    \       }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpd_gzm2z8/tmpd_gzm2z8.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29059e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29056d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29056d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29056d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_gzm2z8                        0x000055eb34904b86 <unavailable> + 7046

    5    libc.so.6                          0x00002b2905bce460 __libc_start_main +
    245

    6    tmpd_gzm2z8                        0x000055eb34904599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfut4ghls.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.split(separator:\
    \ \" \")\n    for i in array {\n        if dict[String(i)] == nil {\n        \
    \    dict[String(i)] = 1\n        } else {\n            dict[String(i)]! += 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp8k119thx/tmp8k119thx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8855bd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88558cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88558cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88558ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8k119thx                        0x0000562487338c76 <unavailable> + 7286

    5    libc.so.6                          0x00002b8855dc4460 __libc_start_main +
    245

    6    tmp8k119thx                        0x0000562487338689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = dict[letter] {\n\
    \            dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8r7hjojj.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for item in array {\n        if let count = dict[item] {\n     \
    \       dict[item] = count + 1\n        } else {\n            dict[item] = 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp83g2354x.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1xtxv04g.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp753aqiis/tmp753aqiis.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fc8acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fc5a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fc5a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fc5a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp753aqiis                        0x0000561c010d3b86 <unavailable> + 7046

    5    libc.so.6                          0x00002ab1fca98460 __libc_start_main +
    245

    6    tmp753aqiis                        0x0000561c010d3599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    for char in test.components(separatedBy:\
    \ \" \") {\n        if let count = dict[char] {\n            dict[char] = count\
    \ + 1\n        } else {\n            dict[char] = 1\n        }\n        if dict[char]!\
    \ > max {\n            max = dict[char]!\n        }\n    }\n    var result = [String\
    \ : Int]()\n    for (key, value) in dict {\n        if value == max {\n      \
    \      result[key] = value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_zefnwen.swift:19:22: error: value of type 'String' has no member\
    \ 'components'\n    for char in test.components(separatedBy: \" \") {\n      \
    \          ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if let count = result[String(letter)]\
    \ {\n            result[String(letter)] = count + 1\n        } else {\n      \
    \      result[String(letter)] = 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp753aqiis/tmp753aqiis.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1fc8acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1fc5a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1fc5a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1fc5a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp753aqiis                        0x0000561c010d3b86 <unavailable> + 7046

    5    libc.so.6                          0x00002ab1fca98460 __libc_start_main +
    245

    6    tmp753aqiis                        0x0000561c010d3599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for letter in array {\n        if dict[letter] == nil {\n      \
    \      dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n  \
    \      }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8o5pc5_2.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let words = test.split(separator: \" \")\n    var dict = [String\
    \ : Int]()\n    for word in words {\n        if let count = dict[String(word)]\
    \ {\n            dict[String(word)] = count + 1\n        } else {\n          \
    \  dict[String(word)] = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmph7wmml3l/tmph7wmml3l.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a8f5cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a8f2c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a8f2c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a8f2c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7wmml3l                        0x00005560784b2b86 <unavailable> + 7046

    5    libc.so.6                          0x00002b5a8f7b7460 __libc_start_main +
    245

    6    tmph7wmml3l                        0x00005560784b2599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1xtxv04g.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if dict[letter] == nil {\n    \
    \        dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfut4ghls.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    for letter in\
    \ test.split(separator: \" \") {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n            if count + 1 >\
    \ max {\n                max = count + 1\n            }\n        } else {\n  \
    \          dict[String(letter)] = 1\n            if 1 > max {\n              \
    \  max = 1\n            }\n        }\n    }\n    var result = [String : Int]()\n\
    \    for (key, value) in dict {\n        if value == max {\n            result[key]\
    \ = value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820464
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    for char in test.split(separator:\
    \ \" \") {\n        if let count = dict[String(char)] {\n            dict[String(char)]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            dict[String(char)] = 1\n   \
    \         if max == 0 {\n                max = 1\n            }\n        }\n \
    \   }\n    var result = [String : Int]()\n    for (key, value) in dict {\n   \
    \     if value == max {\n            result[key] = value\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    for letter in letters {\n        if dict[String(letter)] == nil\
    \ {\n            dict[String(letter)] = 1\n        } else {\n            dict[String(letter)]!\
    \ += 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpaqf0w4ql/tmpaqf0w4ql.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba65e72dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba65e424b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba65e424988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba65e4237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaqf0w4ql                        0x000056359269dc76 <unavailable> + 7286

    5    libc.so.6                          0x00002ba65e919460 __libc_start_main +
    245

    6    tmpaqf0w4ql                        0x000056359269d689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dictionary: [String : Int] = [:]\n    let array = test.components(separatedBy:\
    \ \" \")\n    for item in array {\n        if let count = dictionary[item] {\n\
    \            dictionary[item] = count + 1\n        } else {\n            dictionary[item]\
    \ = 1\n        }\n    }\n    return dictionary\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmppuiwpafw.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1xtxv04g.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1xtxv04g.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    var max = 0\n    var maxLetters\
    \ = [String]()\n    for letter in test.components(separatedBy: \" \") {\n    \
    \    if let count = dict[letter] {\n            dict[letter] = count + 1\n   \
    \         if count + 1 > max {\n                max = count + 1\n            \
    \    maxLetters = [letter]\n            } else if count + 1 == max {\n       \
    \         maxLetters.append(letter)\n            }\n        } else {\n       \
    \     dict[letter] = 1\n            if max == 0 {\n                max = 1\n \
    \               maxLetters = [letter]\n            }\n        }\n    }\n    for\
    \ letter in maxLetters {\n        dict[letter] = max\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpa57vvkcg.swift:20:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for item in array {\n        if let value = dict[item] {\n     \
    \       dict[item] = value + 1\n        } else {\n            dict[item] = 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpeyyb1dkv.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.split(separator:\
    \ \" \")\n    var max = 0\n    for letter in letters {\n        if let count =\
    \ result[String(letter)] {\n            result[String(letter)] = count + 1\n \
    \           if count + 1 > max {\n                max = count + 1\n          \
    \  }\n        } else {\n            result[String(letter)] = 1\n            if\
    \ 1 > max {\n                max = 1\n            }\n        }\n    }\n    return\
    \ result.filter { $0.value == max }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if result[letter] == nil {\n  \
    \          result[letter] = 1\n        } else {\n            result[letter]! +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1xtxv04g.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 0
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var max = 0\n    for letter\
    \ in test.split(separator: \" \") {\n        if let count = histogram[String(letter)]\
    \ {\n            histogram[String(letter)] = count + 1\n        } else {\n   \
    \         histogram[String(letter)] = 1\n        }\n        if histogram[String(letter)]!\
    \ > max {\n            max = histogram[String(letter)]!\n        }\n    }\n  \
    \  return histogram.filter { $0.value == max }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820464
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if let count = result[word] {\n   \
    \         result[word] = count + 1\n        } else {\n            result[word]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5y5e9qv1.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let words = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820463
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5jgs_b0i.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphkh8k8ze.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    let letters = test.components(separatedBy: \" \")\n      \
    \            ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    let words = test.split(separator:\
    \ \" \")\n    for word in words {\n        if let count = histogram[String(word)]\
    \ {\n            histogram[String(word)] = count + 1\n        } else {\n     \
    \       histogram[String(word)] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpw7ct_ase/tmpw7ct_ase.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4947c2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4947922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4947922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49479217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7ct_ase                        0x000055c6de825b86 <unavailable> + 7046

    5    libc.so.6                          0x00002b4947e17460 __libc_start_main +
    245

    6    tmpw7ct_ase                        0x000055c6de825599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820464
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var dict = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    for i in array {\n        if dict[i] == nil {\n            dict[i]\
    \ = 1\n        } else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n\
    \    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfq3r4qoz.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let array = test.components(separatedBy: \" \")\n        \
    \        ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820462
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    let letters = test.split(separator: \" \")\n    var count = [String\
    \ : Int]()\n    for letter in letters {\n        if let value = count[String(letter)]\
    \ {\n            count[String(letter)] = value + 1\n        } else {\n       \
    \     count[String(letter)] = 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpk3bavgk8/tmpk3bavgk8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7c70f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7c6de8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7c6de8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7c6de77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3bavgk8                        0x0000557c3567db86 <unavailable> + 7046

    5    libc.so.6                          0x00002ac7c72dd460 __libc_start_main +
    245

    6    tmpk3bavgk8                        0x0000557c3567d599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1659820463
