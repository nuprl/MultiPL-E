language: swift
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpg60_blx1.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpg60_blx1.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpg60_blx1.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpg60_blx1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpg60_blx1.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpg60_blx1.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpg60_blx1.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpg60_blx1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpg60_blx1.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpg60_blx1.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpg60_blx1.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpg60_blx1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpg60_blx1.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpg60_blx1.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpg60_blx1.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpg60_blx1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            print(\"Invalid operator\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9jmdto1z.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp9jmdto1z.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp9jmdto1z.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp9jmdto1z.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            print(\"Invalid operator\")\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9i30wdjx.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp9i30wdjx.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp9i30wdjx.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp9i30wdjx.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpg60_blx1.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpg60_blx1.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpg60_blx1.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpg60_blx1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpg60_blx1.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpg60_blx1.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpg60_blx1.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpg60_blx1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpg60_blx1.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpg60_blx1.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpg60_blx1.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpg60_blx1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpg60_blx1.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpg60_blx1.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpg60_blx1.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpg60_blx1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpg60_blx1.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpg60_blx1.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpg60_blx1.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpg60_blx1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpg60_blx1.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpg60_blx1.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpg60_blx1.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpg60_blx1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            print(\"Invalid operator\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9jmdto1z.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp9jmdto1z.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp9jmdto1z.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp9jmdto1z.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            print(\"Invalid operator\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9jmdto1z.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp9jmdto1z.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp9jmdto1z.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp9jmdto1z.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            print(\"Invalid operator\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9jmdto1z.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp9jmdto1z.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp9jmdto1z.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp9jmdto1z.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            result = 0\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3c0zo5bv.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp3c0zo5bv.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp3c0zo5bv.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp3c0zo5bv.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var i =\
    \ 0\n    while i < operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i + 1]\n        case \"-\":\n        \
    \    result -= operand[i + 1]\n        case \"*\":\n            result *= operand[i\
    \ + 1]\n        case \"//\":\n            result /= operand[i + 1]\n        case\
    \ \"**\":\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n\
    \        default:\n            break\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp0kx1xkj2.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmp0kx1xkj2.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            print(\"Invalid operator\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9jmdto1z.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp9jmdto1z.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp9jmdto1z.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp9jmdto1z.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
