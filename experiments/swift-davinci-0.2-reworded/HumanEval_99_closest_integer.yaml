name: HumanEval_99_closest_integer
language: swift
prompt: "\n/// Create a function that takes a value (string) representing a number\n\
  /// and returns the closest integer to it. If the number is equidistant\n/// from\
  \ two integers, round it away from zero.\n/// Examples\n/// >>> closest_integer(value:\
  \ \"10\")\n/// 10\n/// >>> closest_integer(value: \"15.3\")\n/// 15\n/// Note:\n\
  /// Rounding away from zero means that if the given number is equidistant\n/// from\
  \ two integers, the one you should return is the one that is the\n/// farthest from\
  \ zero. For example closest_integer(\"14.5\") should\n/// return 15 and closest_integer(\"\
  -14.5\") should return -15.\nfunc closest_integer(value: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(closest_integer(value: \"10\") == 10)\n\
  assert(closest_integer(value: \"14.5\") == 15)\nassert(closest_integer(value: \"\
  -15.5\") == -16)\nassert(closest_integer(value: \"15.3\") == 15)\nassert(closest_integer(value:\
  \ \"0\") == 0)"
completions: ["    let number = Double(value)!\n    let rounded = round(number)\n\
    \    let difference = number - rounded\n    if difference > 0 {\n        return\
    \ Int(rounded + 1)\n    } else if difference < 0 {\n        return Int(rounded\
    \ - 1)\n    } else {\n        return Int(rounded)\n    }", "    let num = Double(value)!\n\
    \    let int = Int(num)\n    let decimal = num - Double(int)\n    if decimal >=\
    \ 0.5 {\n        return int + 1\n    } else {\n        return int\n    }", " \
    \   let doubleValue = Double(value)!\n    let roundedValue = round(doubleValue)\n\
    \    return Int(roundedValue)", "    let doubleValue = Double(value)!\n    let\
    \ intValue = Int(doubleValue)\n    let decimal = doubleValue - Double(intValue)\n\
    \    if decimal >= 0.5 {\n        return intValue + 1\n    } else {\n        return\
    \ intValue\n    }", "    let number = Double(value)!\n    let rounded = Int(number.rounded())\n\
    \    if number - Double(rounded) >= 0.5 {\n        return rounded + 1\n    } else\
    \ {\n        return rounded\n    }", "    let doubleValue = Double(value)!\n \
    \   let roundedValue = round(doubleValue)\n    return Int(roundedValue)", "  \
    \  let number = Double(value)!\n    let floor = Int(number.rounded(.down))\n \
    \   let ceil = Int(number.rounded(.up))\n    let floorDiff = abs(floor - number)\n\
    \    let ceilDiff = abs(ceil - number)\n    return floorDiff < ceilDiff ? floor\
    \ : ceil", "    let number = Double(value)!\n    let rounded = Int(number.rounded())\n\
    \    let floor = Int(number.rounded(.down))\n    let ceil = Int(number.rounded(.up))\n\
    \    if abs(number - Double(rounded)) < abs(number - Double(floor)) {\n      \
    \  return rounded\n    } else if abs(number - Double(rounded)) < abs(number -\
    \ Double(ceil)) {\n        return rounded\n    } else if abs(number - Double(floor))\
    \ < abs(number - Double(ceil)) {\n        return floor\n    } else {\n       \
    \ return ceil\n    }", "    let number = Double(value)!\n    let rounded = Int(number.rounded())\n\
    \    let floor = Int(number.rounded(.down))\n    let ceil = Int(number.rounded(.up))\n\
    \    if number - Double(floor) == 0.5 {\n        return floor\n    } else if number\
    \ - Double(ceil) == -0.5 {\n        return ceil\n    } else {\n        return\
    \ rounded\n    }", "    let number = Double(value)!\n    let rounded = Int(round(number))\n\
    \    let floor = Int(floor(number))\n    let ceil = Int(ceil(number))\n    if\
    \ abs(Double(rounded) - number) < abs(Double(floor) - number) {\n        return\
    \ rounded\n    } else {\n        return floor\n    }", "    let num = Double(value)!\n\
    \    let int = Int(num)\n    let decimal = num - Double(int)\n    if decimal >=\
    \ 0.5 {\n        return int + 1\n    } else {\n        return int\n    }", " \
    \   let doubleValue = Double(value)!\n    let roundedValue = round(doubleValue)\n\
    \    let roundedInt = Int(roundedValue)\n    return roundedInt", "    let doubleValue\
    \ = Double(value)!\n    let roundedValue = round(doubleValue)\n    let intValue\
    \ = Int(roundedValue)\n    return intValue", "    let doubleValue = Double(value)!\n\
    \    let roundedValue = round(doubleValue)\n    return Int(roundedValue)", " \
    \   let floatValue = Float(value) ?? 0\n    let intValue = Int(floatValue)\n \
    \   let decimal = floatValue - Float(intValue)\n    if decimal >= 0.5 {\n    \
    \    return intValue + 1\n    } else {\n        return intValue\n    }", "   \
    \ let doubleValue = Double(value)!\n    let roundedValue = round(doubleValue)\n\
    \    return Int(roundedValue)", "    let number = Double(value)!\n    let rounded\
    \ = Int(number.rounded())\n    let floor = Int(number.rounded(.down))\n    let\
    \ ceil = Int(number.rounded(.up))\n    if number - Double(floor) == 0.5 {\n  \
    \      return number > 0 ? ceil : floor\n    }\n    return rounded", "    let\
    \ number = Double(value)!\n    let integer = Int(number)\n    let decimal = number\
    \ - Double(integer)\n    if decimal < 0.5 {\n        return integer\n    } else\
    \ {\n        return integer + 1\n    }", "    let number = Double(value)!\n  \
    \  let intNumber = Int(number)\n    let decimal = number - Double(intNumber)\n\
    \    if decimal >= 0.5 {\n        return intNumber + 1\n    } else {\n       \
    \ return intNumber\n    }", "    let number = Double(value)!\n    let rounded\
    \ = number.rounded()\n    let ceiled = number.rounded(.up)\n    let floored =\
    \ number.rounded(.down)\n    let diff1 = abs(number - rounded)\n    let diff2\
    \ = abs(number - ceiled)\n    let diff3 = abs(number - floored)\n    if diff1\
    \ < diff2 && diff1 < diff3 {\n        return Int(rounded)\n    } else if diff2\
    \ < diff1 && diff2 < diff3 {\n        return Int(ceiled)\n    } else {\n     \
    \   return Int(floored)\n    }"]
stop_tokens:
- "\n}"
