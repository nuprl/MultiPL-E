language: swift
name: HumanEval_112_reverse_delete
results:
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: -4
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    // your code here\n    return (\"\", false)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"\
    bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\",\
    \ false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\n\
    assert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s:\
    \ \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"\
    v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") ==\
    \ (\"\", true))"
  status: Exception
  stderr: 'tmpsi_r4f33/tmpsi_r4f33.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04bc3b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04bc0a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04bc0a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04bc0a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsi_r4f33                        0x000055fac49df4b0 <unavailable> + 5296

    5    libc.so.6                          0x00002b04bc59c460 __libc_start_main +
    245

    6    tmpsi_r4f33                        0x000055fac49df039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result += String(char)\n        }\n    }\n\
    \    let isPalindrome = result == String(result.reversed())\n    return (result,\
    \ isPalindrome)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    let isPalindrome\
    \ = s == String(s.reversed())\n    return (s, isPalindrome)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let set = Set(c)\n    let result = s.filter { !set.contains($0)\
    \ }\n    return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    let\
    \ isPalindrome = result == String(result.reversed())\n    return (result, isPalindrome)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"\
    bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\",\
    \ false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\n\
    assert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s:\
    \ \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"\
    v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") ==\
    \ (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    let\
    \ isPalindrome = result == String(result.reversed())\n    return (result, isPalindrome)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"\
    bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\",\
    \ false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\n\
    assert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s:\
    \ \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"\
    v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") ==\
    \ (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpawa5j9lc.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let set = Set(c)\n    let result = s.filter { !set.contains($0)\
    \ }\n    return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    let\
    \ isPalindrome = result == String(result.reversed())\n    return (result, isPalindrome)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"\
    bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\",\
    \ false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\n\
    assert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s:\
    \ \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"\
    v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") ==\
    \ (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpawa5j9lc.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var s = s\n    for char in c {\n        s = s.replacingOccurrences(of:\
    \ String(char), with: \"\")\n    }\n    return (s, s == String(s.reversed()))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"\
    bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\",\
    \ false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\n\
    assert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s:\
    \ \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"\
    v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") ==\
    \ (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpldvt4rui.swift:17:15: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        s = s.replacingOccurrences(of: String(char),\
    \ with: \"\")\n            ~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    let\
    \ isPalindrome = result == String(result.reversed())\n    return (result, isPalindrome)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"\
    bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\",\
    \ false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\n\
    assert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s:\
    \ \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"\
    v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") ==\
    \ (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpawa5j9lc.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    let\
    \ isPalindrome = result == String(result.reversed())\n    return (result, isPalindrome)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"\
    bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\",\
    \ false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\n\
    assert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s:\
    \ \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"\
    v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") ==\
    \ (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpawa5j9lc.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    let isPalindrome\
    \ = s == String(s.reversed())\n    return (s, isPalindrome)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var s = s\n    for char in c {\n        s = s.replacingOccurrences(of:\
    \ String(char), with: \"\")\n    }\n    return (s, s == String(s.reversed()))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"\
    bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\",\
    \ false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\n\
    assert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s:\
    \ \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"\
    v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") ==\
    \ (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpldvt4rui.swift:17:15: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        s = s.replacingOccurrences(of: String(char),\
    \ with: \"\")\n            ~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var s = s\n    for char in c {\n        s = s.replacingOccurrences(of:\
    \ String(char), with: \"\")\n    }\n    return (s, s == String(s.reversed()))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"\
    bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\",\
    \ false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\n\
    assert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s:\
    \ \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"\
    v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") ==\
    \ (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpldvt4rui.swift:17:15: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        s = s.replacingOccurrences(of: String(char),\
    \ with: \"\")\n            ~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: -4
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    return (s, true)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: Exception
  stderr: 'tmpt_ayandg/tmpt_ayandg.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6de4aa9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6de47a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6de47a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6de479f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_ayandg                        0x000056040a4414b0 <unavailable> + 5296

    5    libc.so.6                          0x00002b6de4c95460 __libc_start_main +
    245

    6    tmpt_ayandg                        0x000056040a441039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let s = s.filter { !c.contains($0) }\n    return (s,\
    \ s == String(s.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(reverse_delete(s:\
    \ \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\"\
    , c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\", c:\
    \ \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\")\
    \ == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result += String(char)\n        }\n    }\n\
    \    return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: \"\\(char)\", with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpcomq_bga.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: \"\\\
    (char)\", with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 1
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = s\n    for char in c {\n        result\
    \ = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: SyntaxError
  stderr: "/tmp/tmpalimmeea.swift:17:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        result = result.replacingOccurrences(of: String(char),\
    \ with: \"\")\n                 ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    var result = \"\"\n    for char in s {\n        if\
    \ !c.contains(char) {\n            result.append(char)\n        }\n    }\n   \
    \ return (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\n\
    assert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"\
    dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"\
    a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"v\") == (\"\
    abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") == (\"abba\"\
    , true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
- exit_code: 0
  program: "\n/// Task\n/// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n/// then check\
    \ if the result string is palindrome.\n/// A string is called palindrome if it\
    \ reads the same backward as forward.\n/// You should return a tuple containing\
    \ the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s:\
    \ \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\"\
    , c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\",\
    \ c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String)\
    \ -> (String, Bool) {\n    let result = s.filter { !c.contains($0) }\n    return\
    \ (result, result == String(result.reversed()))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(reverse_delete(s: \"abcde\", c: \"ae\") == (\"bcd\", false))\nassert(reverse_delete(s:\
    \ \"abcdef\", c: \"b\") == (\"acdef\", false))\nassert(reverse_delete(s: \"abcdedcba\"\
    , c: \"ab\") == (\"cdedc\", true))\nassert(reverse_delete(s: \"dwik\", c: \"w\"\
    ) == (\"dik\", false))\nassert(reverse_delete(s: \"a\", c: \"a\") == (\"\", true))\n\
    assert(reverse_delete(s: \"abcdedcba\", c: \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"abcdedcba\", c: \"v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s:\
    \ \"vabba\", c: \"v\") == (\"abba\", true))\nassert(reverse_delete(s: \"mamma\"\
    , c: \"mia\") == (\"\", true))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824465
