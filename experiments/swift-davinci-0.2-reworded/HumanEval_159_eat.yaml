name: HumanEval_159_eat
language: swift
prompt: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
  \ of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n\
  /// you should return an array of [ total number of eaten carrots after your meals,\n\
  /// the number of carrots left after your meals ]\n/// if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n\
  /// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number:\
  \ 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining:\
  \ 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n\
  /// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n\
  /// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining\
  \ : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n\
  /// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n\
  /// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) ==\
  \ [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
  \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
  \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
  \ 4, need: 5, remaining: 1) == [5, 0])"
completions: ['    return [number + min(need, remaining), max(0, remaining - need)]',
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total < need ? total : need\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total > need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total > need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  '    return [number + min(need, remaining), max(0, remaining - need)]', "    let\
    \ eaten = number + min(need, remaining)\n    let left = max(0, remaining - need)\n\
    \    return [eaten, left]", "    let total = number + remaining\n    let eaten\
    \ = min(total, need)\n    let left = total - eaten\n    return [eaten, left]",
  "    let eaten = number + min(need, remaining)\n    let left = max(0, remaining\
    \ - need)\n    return [eaten, left]", "    let total = number + remaining\n  \
    \  let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    var total = number\n    var left = remaining\n    if number >= need {\n   \
    \     return [number, remaining]\n    }\n    total += remaining\n    left = 0\n\
    \    if total >= need {\n        return [total, left]\n    }\n    total = number\
    \ + remaining\n    left = 0\n    return [total, left]", "    var result = [Int]()\n\
    \    if number >= need {\n        result.append(number)\n        result.append(remaining)\n\
    \    } else {\n        if (number + remaining) >= need {\n            result.append(need)\n\
    \            result.append(remaining - (need - number))\n        } else {\n  \
    \          result.append(number + remaining)\n            result.append(0)\n \
    \       }\n    }\n    return result", "    let total = number + remaining\n  \
    \  let eaten = total > need ? need : total\n    return [eaten, total - eaten]",
  "    var result = [Int]()\n    var total = number + remaining\n    if total >= need\
    \ {\n        result.append(need)\n        result.append(total - need)\n    } else\
    \ {\n        result.append(total)\n        result.append(0)\n    }\n    return\
    \ result", "    let total = number + remaining\n    let eaten = total >= need\
    \ ? need : total\n    return [eaten, total - eaten]", "    var total = number\n\
    \    var left = remaining\n    if remaining >= need {\n        total += need\n\
    \        left -= need\n    } else {\n        total += remaining\n        left\
    \ = 0\n    }\n    return [total, left]", '    return [number + min(need, remaining),
    max(0, remaining - need)]', "    let total = number + remaining\n    if total\
    \ >= need {\n        return [need, total - need]\n    } else {\n        return\
    \ [total, 0]\n    }", "    let total = number + remaining\n    return [total >\
    \ need ? need : total, total > need ? total - need : 0]", "    var total = number\n\
    \    var left = remaining\n    if remaining < need {\n        total += remaining\n\
    \        left = 0\n    } else {\n        total += need\n        left -= need\n\
    \    }\n    return [total, left]", "    var number = number\n    var need = need\n\
    \    var remaining = remaining\n    var result = [Int]()\n    if number + remaining\
    \ >= need {\n        result.append(need)\n        result.append(remaining - (need\
    \ - number))\n    } else {\n        result.append(number + remaining)\n      \
    \  result.append(0)\n    }\n    return result", "    let total = number + remaining\n\
    \    let eaten = min(total, need)\n    let left = total - eaten\n    return [eaten,\
    \ left]", "    let total = number + remaining\n    let eaten = total > need ?\
    \ need : total\n    return [eaten, total - eaten]", "    var result = [Int]()\n\
    \    let total = number + remaining\n    if total >= need {\n        result.append(need)\n\
    \        result.append(total - need)\n    } else {\n        result.append(total)\n\
    \        result.append(0)\n    }\n    return result", "    var total = number\n\
    \    var left = remaining\n    if left >= need {\n        total += need\n    \
    \    left -= need\n    } else {\n        total += left\n        left = 0\n   \
    \ }\n    return [total, left]", "    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]", "    let\
    \ total = number + remaining\n    let eaten = total - need\n    return [eaten,\
    \ total - eaten]", "    let total = number + remaining\n    let eaten = total\
    \ > need ? need : total\n    return [eaten, total - eaten]", "    var total =\
    \ number\n    var left = remaining\n    if left >= need {\n        total += need\n\
    \        left -= need\n    } else {\n        total += left\n        left = 0\n\
    \    }\n    return [total, left]", "    let total = number + remaining\n    let\
    \ eaten = total > need ? need : total\n    return [eaten, total - eaten]", " \
    \   var result = [Int]()\n    if remaining >= need {\n        result.append(number\
    \ + need)\n        result.append(remaining - need)\n    } else {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    }\n    return result", "    let\
    \ total = number + remaining\n    let eaten = total >= need ? need : total\n \
    \   return [eaten, total - eaten]", '    return [number + min(need, remaining),
    max(0, remaining - need)]', "    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]", "    let\
    \ total = number + remaining\n    let eaten = total >= need ? need : total\n \
    \   return [eaten, total - eaten]", "    let total = number + remaining\n    let\
    \ eaten = total >= need ? need : total\n    return [eaten, total - eaten]", " \
    \   let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let left = total - need\n    return [total, left < 0 ? 0 : left]", "    var\
    \ total = number\n    var left = remaining\n    if number < need {\n        total\
    \ += left\n        left = 0\n    } else {\n        total += remaining\n      \
    \  left = 0\n    }\n    return [total, left]", "    let total = number + remaining\n\
    \    let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]", "    var\
    \ result = [Int]()\n    if number + remaining < need {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    } else {\n        result.append(need)\n\
    \        result.append(remaining - (need - number))\n    }\n    return result",
  '    return [number + min(need, remaining), max(0, remaining - need)]', "    let\
    \ total = number + remaining\n    if total >= need {\n        return [need, total\
    \ - need]\n    } else {\n        return [total, 0]\n    }", "    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let needed = need - number\n    let eaten = min(needed,\
    \ remaining)\n    return [eaten + number, remaining - eaten]", "    let total\
    \ = number + remaining\n    if total >= need {\n        return [need, total -\
    \ need]\n    } else {\n        return [total, 0]\n    }", "    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let total = number + remaining\n    let left = total -\
    \ need\n    return left >= 0 ? [need, left] : [total, 0]", "    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    var total = number\n    var left = remaining\n    if number\
    \ < need {\n        total += left\n        left = 0\n    } else {\n        left\
    \ -= need - number\n    }\n    return [total, left]", "    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]", "    var total = number\n    var left = remaining\n    if number\
    \ < need {\n        if remaining >= need - number {\n            total += need\
    \ - number\n            left -= need - number\n        } else {\n            total\
    \ += remaining\n            left = 0\n        }\n    }\n    return [total, left]",
  "    var total = number\n    var left = remaining\n    if number < need {\n    \
    \    total += left\n        left = 0\n    } else {\n        left = remaining -\
    \ need\n    }\n    return [total, left]", "    let total = number + remaining\n\
    \    if total < need {\n        return [total, 0]\n    } else {\n        return\
    \ [need, total - need]\n    }", "    let eaten = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [eaten, left]", '    return
    [number + min(need, remaining), max(0, remaining - need)]', "    let total = number\
    \ + remaining\n    let eaten = total < need ? total : need\n    return [eaten,\
    \ total - eaten]", "    var total = number\n    var left = remaining\n    if left\
    \ >= need {\n        total += need\n        left -= need\n    } else {\n     \
    \   total += left\n        left = 0\n    }\n    return [total, left]", "    let\
    \ total = number + remaining\n    if total >= need {\n        return [need, total\
    \ - need]\n    } else {\n        return [total, 0]\n    }", "    var total = number\n\
    \    var left = remaining\n    if remaining >= need {\n        total += need\n\
    \        left -= need\n    } else {\n        total += remaining\n        left\
    \ = 0\n    }\n    return [total, left]", "    let total = number + remaining\n\
    \    let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total < need ? total : need\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total > need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let left = total - need\n    return [total, left < 0 ? 0 : left]", "    if number\
    \ >= need {\n        return [number, remaining]\n    }\n    if remaining >= need\
    \ - number {\n        return [need, remaining - (need - number)]\n    }\n    return\
    \ [remaining + number, 0]", "    let total = number + remaining\n    let eaten\
    \ = total >= need ? need : total\n    return [eaten, total - eaten]", "    let\
    \ total = number + remaining\n    let eaten = total >= need ? need : total\n \
    \   return [eaten, total - eaten]", "    let total = number + remaining\n    let\
    \ eaten = total > need ? need : total\n    return [eaten, total - eaten]", " \
    \   var result = [Int]()\n    var total = number + remaining\n    if total >=\
    \ need {\n        total = need\n    }\n    result.append(total)\n    result.append(remaining\
    \ - (total - number))\n    return result", "    let total = number + remaining\n\
    \    let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    if total >= need {\n        return [need,\
    \ total - need]\n    } else {\n        return [total, 0]\n    }", "    var carrots\
    \ = number\n    var remainingCarrots = remaining\n    while carrots < need &&\
    \ remainingCarrots > 0 {\n        carrots += 1\n        remainingCarrots -= 1\n\
    \    }\n    return [carrots, remainingCarrots]", "    var eat = number\n    var\
    \ left = remaining\n    if number < need {\n        eat += left\n        left\
    \ = 0\n    } else {\n        left = number - need\n    }\n    return [eat, left]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    var total = number\n    var left = remaining\n\
    \    if remaining >= need {\n        total += need\n        left -= need\n   \
    \ } else {\n        total += remaining\n        left = 0\n    }\n    return [total,\
    \ left]", "    var result = [Int]()\n    var number = number\n    var need = need\n\
    \    var remaining = remaining\n    if number + remaining < need {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    } else {\n        result.append(need)\n\
    \        result.append(remaining - (need - number))\n    }\n    return result",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = min(total, need)\n    let left\
    \ = max(total - need, 0)\n    return [eaten, left]", "    let total = number +\
    \ remaining\n    let eaten = min(total, need)\n    let left = max(total - need,\
    \ 0)\n    return [eaten, left]", "    let total = number + remaining\n    let\
    \ eaten = total >= need ? need : total\n    return [eaten, total - eaten]", " \
    \   let total = number + remaining\n    if total < need {\n        return [total,\
    \ 0]\n    } else {\n        return [need, total - need]\n    }", "    let total\
    \ = number + remaining\n    let eaten = total >= need ? need : total\n    return\
    \ [eaten, total - eaten]", "    var result = [Int]()\n    if number + remaining\
    \ >= need {\n        result.append(need)\n        result.append(number + remaining\
    \ - need)\n    } else {\n        result.append(number + remaining)\n        result.append(0)\n\
    \    }\n    return result", "    let total = number + remaining\n    if total\
    \ >= need {\n        return [need, total - need]\n    } else {\n        return\
    \ [total, 0]\n    }", "    var result = [Int]()\n    let total = number + remaining\n\
    \    if total >= need {\n        result.append(need)\n        result.append(total\
    \ - need)\n    } else {\n        result.append(total)\n        result.append(0)\n\
    \    }\n    return result", "    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]", "    let\
    \ eaten = number + min(need, remaining)\n    let left = max(0, remaining - need)\n\
    \    return [eaten, left]", "    let total = number + remaining\n    if total\
    \ >= need {\n        return [need, total - need]\n    } else {\n        return\
    \ [total, 0]\n    }", "    let total = number + remaining\n    let eaten = total\
    \ > need ? need : total\n    return [eaten, total - eaten]", "    let total =\
    \ number + remaining\n    let eaten = total >= need ? need : total\n    return\
    \ [eaten, total - eaten]", '    return [number + min(need, remaining), max(0,
    remaining - need)]', "    var total = number\n    var left = remaining\n    if\
    \ number < need {\n        total += left\n        left = 0\n    } else {\n   \
    \     left -= need - number\n    }\n    return [total, left]", "    let total\
    \ = number + remaining\n    let eaten = total >= need ? need : total\n    return\
    \ [eaten, total - eaten]", "    let total = number + remaining\n    if total >=\
    \ need {\n        return [need, total - need]\n    } else {\n        return [total,\
    \ 0]\n    }", "    let total = number + remaining\n    let eaten = total >= need\
    \ ? need : total\n    return [eaten, total - eaten]", "    var number = number\n\
    \    var remaining = remaining\n    var result = [Int]()\n    if number + remaining\
    \ >= need {\n        number += need\n        remaining -= need\n    } else {\n\
    \        number += remaining\n        remaining = 0\n    }\n    result.append(number)\n\
    \    result.append(remaining)\n    return result", "    let total = number + remaining\n\
    \    let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    if number + remaining >= need {\n        return [need, number + remaining -\
    \ need]\n    } else {\n        return [number + remaining, 0]\n    }", "    let\
    \ total = number + remaining\n    let left = total - need\n    return [total,\
    \ left < 0 ? 0 : left]", "    var total = number\n    var left = remaining\n \
    \   if total + left >= need {\n        total += need\n        left -= need\n \
    \   } else {\n        total += left\n        left = 0\n    }\n    return [total,\
    \ left]", "    let total = number + remaining\n    let eaten = total >= need ?\
    \ need : total\n    return [eaten, total - eaten]", "    let total = number +\
    \ remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let total = number + remaining\n    let eaten = total\
    \ >= need ? need : total\n    return [eaten, total - eaten]", "    var result\
    \ = [Int]()\n    if number >= need {\n        result.append(number)\n        result.append(remaining)\n\
    \    } else {\n        if remaining >= need - number {\n            result.append(need)\n\
    \            result.append(remaining - (need - number))\n        } else {\n  \
    \          result.append(remaining + number)\n            result.append(0)\n \
    \       }\n    }\n    return result", "    var total = number\n    var left =\
    \ remaining\n    if left + number >= need {\n        total += need\n        left\
    \ = left + number - need\n    } else {\n        total += left + number\n     \
    \   left = 0\n    }\n    return [total, left]", "    var carrots = number\n  \
    \  var remainingCarrots = remaining\n    while carrots < need && remainingCarrots\
    \ > 0 {\n        carrots += 1\n        remainingCarrots -= 1\n    }\n    return\
    \ [carrots, remainingCarrots]", "    let total = number + remaining\n    return\
    \ [total, total - need]", "    let eaten = number + min(need, remaining)\n   \
    \ let left = max(0, remaining - need)\n    return [eaten, left]", "    var eaten\
    \ = number\n    var left = remaining\n    if number < need {\n        eaten +=\
    \ left\n        left = 0\n    } else {\n        left -= need\n    }\n    return\
    \ [eaten, left]", "    var total = number\n    var left = remaining\n    if number\
    \ < need {\n        total += left\n        left = 0\n    } else {\n        total\
    \ += need\n        left -= need\n    }\n    return [total, left]", "    let total\
    \ = number + remaining\n    let eaten = total > need ? need : total\n    return\
    \ [eaten, total - eaten]", "    let total = number + remaining\n    let eaten\
    \ = total - need\n    return [eaten, total - eaten]", "    let total = number\
    \ + remaining\n    let left = total - need\n    return [total, left < 0 ? 0 :\
    \ left]", "    let total = number + remaining\n    let eaten = total >= need ?\
    \ need : total\n    return [eaten, total - eaten]", "    let total = number +\
    \ remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let total = number + remaining\n    let eaten = total\
    \ >= need ? need : total\n    return [eaten, total - eaten]", "    let total =\
    \ number + remaining\n    let eaten = total > need ? need : total\n    return\
    \ [eaten, total - eaten]", "    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]", "    var\
    \ total = number\n    var left = remaining\n    if number < need {\n        total\
    \ += left\n        left = 0\n    } else {\n        left = remaining - (need -\
    \ number)\n    }\n    return [total, left]", "    let total = number + remaining\n\
    \    let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ if total >= need {\n        return [need, total - need]\n    } else {\n    \
    \    return [total, 0]\n    }", "    let total = number + remaining\n    let eaten\
    \ = total - need\n    return eaten < 0 ? [total, 0] : [total, eaten]", "    let\
    \ total = number + remaining\n    if total < need {\n        return [total, 0]\n\
    \    } else {\n        return [need, total - need]\n    }", "    var result: [Int]\
    \ = []\n    if number < 0 || need < 0 || remaining < 0 {\n        return result\n\
    \    }\n    if number > 1000 || need > 1000 || remaining > 1000 {\n        return\
    \ result\n    }\n    if number + remaining < need {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    } else {\n        result.append(need)\n\
    \        result.append(number + remaining - need)\n    }\n    return result",
  "    let total = number + remaining\n    return [min(total, need), max(total - need,\
    \ 0)]", "    let total = number + remaining\n    if total >= need {\n        return\
    \ [need, total - need]\n    } else {\n        return [total, 0]\n    }", "   \
    \ let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    var total = number + remaining\n   \
    \ if total >= need {\n        total = need\n    }\n    return [total, remaining\
    \ - (total - number)]", "    let total = number + remaining\n    let eaten = total\
    \ > need ? need : total\n    return [eaten, total - eaten]", '    return [number
    + min(need, remaining), max(0, remaining - need)]', "    let total = number +\
    \ remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    var numberOfCarrots = number\n    var numberOfRemainingCarrots\
    \ = remaining\n    var numberOfNeededCarrots = need\n    while numberOfNeededCarrots\
    \ > 0 && numberOfRemainingCarrots > 0 {\n        numberOfCarrots += 1\n      \
    \  numberOfRemainingCarrots -= 1\n        numberOfNeededCarrots -= 1\n    }\n\
    \    return [numberOfCarrots, numberOfRemainingCarrots]", "    let total = number\
    \ + remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let total = number + remaining\n    let eaten = total\
    \ >= need ? need : total\n    return [eaten, total - eaten]", "    let total =\
    \ number + remaining\n    let eaten = total > need ? need : total\n    return\
    \ [eaten, total - eaten]", "    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]", "    var\
    \ total = number\n    var left = remaining\n    if remaining >= need {\n     \
    \   total += need\n        left -= need\n    } else {\n        total += remaining\n\
    \        left = 0\n    }\n    return [total, left]", "    let total = number +\
    \ remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    var result = [Int]()\n    if number >= need {\n      \
    \  result.append(number)\n        result.append(remaining)\n    } else {\n   \
    \     if number + remaining >= need {\n            result.append(need)\n     \
    \       result.append(remaining - (need - number))\n        } else {\n       \
    \     result.append(number + remaining)\n            result.append(0)\n      \
    \  }\n    }\n    return result", "    let total = number + remaining\n    if total\
    \ < need {\n        return [total, 0]\n    } else {\n        return [need, total\
    \ - need]\n    }", "    var total = number\n    var left = remaining\n    if left\
    \ < need {\n        total += left\n        left = 0\n    } else {\n        total\
    \ += need\n        left -= need\n    }\n    return [total, left]", "    let total\
    \ = number + remaining\n    let eaten = total >= need ? need : total\n    return\
    \ [eaten, total - eaten]", "    if number + remaining < need {\n        return\
    \ [number + remaining, 0]\n    } else {\n        return [need, number + remaining\
    \ - need]\n    }", "    let total = number + remaining\n    let eaten = total\
    \ >= need ? need : total\n    return [eaten, total - eaten]", "    var result\
    \ = [Int]()\n    var total = number + remaining\n    if total >= need {\n    \
    \    result.append(need)\n        result.append(total - need)\n    } else {\n\
    \        result.append(total)\n        result.append(0)\n    }\n    return result",
  "    var total = number\n    var left = remaining\n    if remaining >= need {\n\
    \        total += need\n        left -= need\n    } else {\n        total += remaining\n\
    \        left = 0\n    }\n    return [total, left]", "    if number + remaining\
    \ < need {\n        return [number + remaining, 0]\n    } else {\n        return\
    \ [need, number + remaining - need]\n    }", "    let total = number + remaining\n\
    \    let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total >= need ? need : total\n\
    \    return [eaten, total - eaten]", "    var number = number\n    var need =\
    \ need\n    var remaining = remaining\n    number += need\n    if number > remaining\
    \ {\n        number = remaining\n    }\n    remaining -= number\n    return [number,\
    \ remaining]", "    var total = number\n    var left = remaining\n    if remaining\
    \ >= need {\n        total += need\n        left -= need\n    } else {\n     \
    \   total += remaining\n        left = 0\n    }\n    return [total, left]", " \
    \   var result: [Int] = []\n    if number + remaining >= need {\n        result.append(need)\n\
    \        result.append(remaining - (need - number))\n    } else {\n        result.append(number\
    \ + remaining)\n        result.append(0)\n    }\n    return result", "    let\
    \ total = number + remaining\n    let eaten = min(total, need)\n    let left =\
    \ total - eaten\n    return [eaten, left]", "    let total = number + remaining\n\
    \    let eaten = total > need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    if total >= need {\n        return [need,\
    \ total - need]\n    } else {\n        return [total, 0]\n    }", "    let total\
    \ = number + remaining\n    let eaten = total >= need ? need : total\n    return\
    \ [eaten, total - eaten]", "    var result = [number, remaining]\n    if need\
    \ > number {\n        result[0] += min(need - number, remaining)\n        result[1]\
    \ -= min(need - number, remaining)\n    }\n    return result", '    return [number
    + min(need, remaining), max(0, remaining - need)]', "    var result = [Int]()\n\
    \    var total = number + remaining\n    if total >= need {\n        result.append(need)\n\
    \        result.append(total - need)\n    } else {\n        result.append(total)\n\
    \        result.append(0)\n    }\n    return result", "    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let total = number + remaining\n    let eaten = total\
    \ >= need ? need : total\n    return [eaten, total - eaten]", "    var total =\
    \ number + remaining\n    if total >= need {\n        total = need\n    }\n  \
    \  return [total, remaining - (total - number)]", "    let total = number + remaining\n\
    \    let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    let total = number + remaining\n    let eaten = total < need ? total : need\n\
    \    return [eaten, total - eaten]", "    let total = number + remaining\n   \
    \ let eaten = total >= need ? need : total\n    return [eaten, total - eaten]",
  "    var total = number\n    var left = remaining\n    if need > remaining {\n \
    \       total += remaining\n        left = 0\n    } else {\n        total += need\n\
    \        left -= need\n    }\n    return [total, left]", "    let total = number\
    \ + remaining\n    let eaten = total > need ? need : total\n    return [eaten,\
    \ total - eaten]", "    var total = number\n    var left = remaining\n    if remaining\
    \ >= need {\n        total += need\n        left -= need\n    } else {\n     \
    \   total += remaining\n        left = 0\n    }\n    return [total, left]", " \
    \   var total = number\n    var left = remaining\n    if need > remaining {\n\
    \        total += remaining\n        left = 0\n    } else {\n        total +=\
    \ need\n        left -= need\n    }\n    return [total, left]", "    let total\
    \ = number + remaining\n    let left = total - need\n    return left >= 0 ? [need,\
    \ left] : [total, 0]", "    let total = number + remaining\n    if total >= need\
    \ {\n        return [need, total - need]\n    } else {\n        return [total,\
    \ 0]\n    }", '    return [number + min(need, remaining), max(0, remaining - need)]',
  "    var eaten = number\n    var left = remaining\n    if number + remaining >=\
    \ need {\n        eaten += need\n        left -= need\n    } else {\n        eaten\
    \ += remaining\n        left = 0\n    }\n    return [eaten, left]", "    var total\
    \ = number\n    var left = remaining\n    if need > remaining {\n        total\
    \ += remaining\n        left = 0\n    } else {\n        total += need\n      \
    \  left -= need\n    }\n    return [total, left]", "    var total = number\n \
    \   var left = remaining\n    if left >= need {\n        total += need\n     \
    \   left -= need\n    } else {\n        total += left\n        left = 0\n    }\n\
    \    return [total, left]", "    let total = number + remaining\n    let eaten\
    \ = total > need ? need : total\n    return [eaten, total - eaten]", "    var\
    \ result = [Int]()\n    var total = number + remaining\n    if total >= need {\n\
    \        result.append(need)\n        result.append(total - need)\n    } else\
    \ {\n        result.append(total)\n        result.append(0)\n    }\n    return\
    \ result", "    let total = number + remaining\n    let eaten = total > need ?\
    \ need : total\n    return [eaten, total - eaten]", "    let total = number +\
    \ remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let total = number + remaining\n    let eaten = total\
    \ >= need ? need : total\n    return [eaten, total - eaten]", "    let total =\
    \ number + remaining\n    let eaten = total > need ? need : total\n    return\
    \ [eaten, total - eaten]", "    if number + remaining >= need {\n        return\
    \ [need, number + remaining - need]\n    } else {\n        return [number + remaining,\
    \ 0]\n    }", '    return [number + min(need, remaining), max(0, remaining - need)]',
  "    let total = number + remaining\n    if total >= need {\n        return [need,\
    \ total - need]\n    } else {\n        return [total, 0]\n    }", "    let total\
    \ = number + remaining\n    let eaten = total < need ? total : need\n    return\
    \ [eaten, total - eaten]", "    var eaten = number\n    var left = remaining\n\
    \    while eaten < need && left > 0 {\n        eaten += 1\n        left -= 1\n\
    \    }\n    return [eaten, left]", "    var result = [Int]()\n    var total =\
    \ number + remaining\n    if total >= need {\n        result.append(need)\n  \
    \      result.append(total - need)\n    } else {\n        result.append(total)\n\
    \        result.append(0)\n    }\n    return result"]
stop_tokens:
- "\n}"
