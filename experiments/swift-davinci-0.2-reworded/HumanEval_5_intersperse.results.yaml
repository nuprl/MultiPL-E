language: swift
name: HumanEval_5_intersperse
results:
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        return\
    \ numbers.reduce([], combine: { (accumulator, element) in\n            if accumulator.isEmpty\
    \ {\n                return [element]\n            } else {\n                return\
    \ accumulator + [delimeter] + [element]\n            }\n        })\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpq86ed49i.swift:11:30: error: extraneous argument label 'combine:'\
    \ in call\n        return numbers.reduce([], combine: { (accumulator, element)\
    \ in\n                             ^    ~~~~~~~~~\n                          \
    \        \n"
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    guard numbers.count > 1 else { return numbers }\n    var result = [Int]()\n\
    \    for (index, number) in numbers.enumerated() {\n        result.append(number)\n\
    \        if index < numbers.count - 1 {\n            result.append(delimeter)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<numbers.count - 1 {\n        result.append(numbers[i])\n        result.append(delimeter)\n\
    \    }\n    result.append(numbers[numbers.count - 1])\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        result.append(number)\n\
    \        result.append(delimeter)\n    }\n    result.removeLast()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002af84b212c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af84af09561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af84af09286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af84af0913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af84af08bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002af84b00ac1d <unavailable> + 2489373

    6    tmpj7p7o8gz                        0x00005598e92b1a72 <unavailable> + 6770

    7    tmpj7p7o8gz                        0x00005598e92b1572 <unavailable> + 5490

    8    libc.so.6                          0x00002af84b3fe460 __libc_start_main +
    245

    9    tmpj7p7o8gz                        0x00005598e92b1279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    return numbers.reduce([]) { (acc, curr) in\n        acc + [curr, delimeter]\n\
    \    }.dropLast()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    guard numbers.count > 1 else { return numbers }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i < numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    result.append(numbers[0])\n\
    \    for i in 1..<numbers.count {\n        result.append(delimeter)\n        result.append(numbers[i])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for number in numbers {\n            result.append(number)\n\
    \            result.append(delimeter)\n        }\n        result.removeLast()\n\
    \        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<numbers.count {\n        result.append(numbers[i])\n        if i != numbers.count\
    \ - 1 {\n            result.append(delimeter)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count - 1 {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n        result.append(numbers[numbers.count\
    \ - 1])\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    return numbers.reduce([]) { (acc, number) in\n        acc + [number,\
    \ delimeter]\n    }.dropLast()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        return\
    \ [numbers[0]] + [delimeter] + intersperse(numbers: Array(numbers[1..<numbers.count]),\
    \ delimeter: delimeter)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpdozqs3ws/tmpdozqs3ws.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5775587c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b577527eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b577527e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b577527d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdozqs3ws                        0x0000560b02be585f <unavailable> + 6239

    5    libc.so.6                          0x00002b5775773460 __libc_start_main +
    245

    6    tmpdozqs3ws                        0x0000560b02be5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 1
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        let head\
    \ = numbers[0]\n        let tail = numbers[1..<numbers.count]\n        return\
    \ [head] + [delimeter] + intersperse(tail, delimeter: delimeter)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp590thxll.swift:13:50: error: missing argument label 'numbers:'\
    \ in call\n        return [head] + [delimeter] + intersperse(tail, delimeter:\
    \ delimeter)\n                                                 ^\n           \
    \                                       numbers: \n/tmp/tmp590thxll.swift:13:51:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n        return [head] + [delimeter] + intersperse(tail, delimeter:\
    \ delimeter)\n                                                  ^\n"
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        result.append(number)\n\
    \        result.append(delimeter)\n    }\n    result.removeLast()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002af84b212c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af84af09561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af84af09286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af84af0913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af84af08bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002af84b00ac1d <unavailable> + 2489373

    6    tmpj7p7o8gz                        0x00005598e92b1a72 <unavailable> + 6770

    7    tmpj7p7o8gz                        0x00005598e92b1572 <unavailable> + 5490

    8    libc.so.6                          0x00002af84b3fe460 __libc_start_main +
    245

    9    tmpj7p7o8gz                        0x00005598e92b1279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for (index, number) in numbers.enumerated() {\n         \
    \   result.append(number)\n            if index < numbers.count - 1 {\n      \
    \          result.append(delimeter)\n            }\n        }\n        return\
    \ result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i < numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count - 1 {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n        result.append(numbers[numbers.count\
    \ - 1])\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i < numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    guard let first = numbers.first else { return [] }\n    return [first]\
    \ + intersperse(numbers: Array(numbers.dropFirst()), delimeter: delimeter).flatMap\
    \ { [delimeter, $0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'tmpfj14f4cv/tmpfj14f4cv.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3d6680c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3d6377b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3d6377988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3d63767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfj14f4cv                        0x000056348d00779f <unavailable> + 6047

    5    libc.so.6                          0x00002ad3d686c460 __libc_start_main +
    245

    6    tmpfj14f4cv                        0x000056348d007299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<numbers.count - 1 {\n        result.append(numbers[i])\n        result.append(delimeter)\n\
    \    }\n    result.append(numbers[numbers.count - 1])\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i < numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        result.append(number)\n\
    \        result.append(delimeter)\n    }\n    result.removeLast()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002af84b212c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af84af09561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af84af09286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af84af0913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af84af08bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002af84b00ac1d <unavailable> + 2489373

    6    tmpj7p7o8gz                        0x00005598e92b1a72 <unavailable> + 6770

    7    tmpj7p7o8gz                        0x00005598e92b1572 <unavailable> + 5490

    8    libc.so.6                          0x00002af84b3fe460 __libc_start_main +
    245

    9    tmpj7p7o8gz                        0x00005598e92b1279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<numbers.count {\n        result.append(numbers[i])\n        if i != numbers.count\
    \ - 1 {\n            result.append(delimeter)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i < numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for (i, number) in numbers.enumerated() {\n\
    \        result.append(number)\n        if i != numbers.count - 1 {\n        \
    \    result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<numbers.count - 1 {\n        result.append(numbers[i])\n        result.append(delimeter)\n\
    \    }\n    result.append(numbers[numbers.count - 1])\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    var i = 0\n    while i < numbers.count -\
    \ 1 {\n        result.append(numbers[i])\n        result.append(delimeter)\n \
    \       i += 1\n    }\n    result.append(numbers[i])\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b962273ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9622435561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9622435286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b962243513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9622434bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9622234e83 <unavailable> + 188035

    6    tmpjej4daj1                        0x000055c431696858 <unavailable> + 6232

    7    tmpjej4daj1                        0x000055c4316963d2 <unavailable> + 5074

    8    libc.so.6                          0x00002b962292a460 __libc_start_main +
    245

    9    tmpjej4daj1                        0x000055c4316960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for (i, number) in numbers.enumerated() {\n\
    \        result.append(number)\n        if i < numbers.count - 1 {\n         \
    \   result.append(delimeter)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<numbers.count - 1 {\n        result.append(numbers[i])\n        result.append(delimeter)\n\
    \    }\n    result.append(numbers[numbers.count - 1])\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count {\n            result.append(numbers[i])\n\
    \            if i < numbers.count - 1 {\n                result.append(delimeter)\n\
    \            }\n        }\n        return result\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == []\
    \ as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8,\
    \ 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2,\
    \ 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i < numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count - 1 {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n        result.append(numbers[numbers.count\
    \ - 1])\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<numbers.count - 1 {\n        result.append(numbers[i])\n        result.append(delimeter)\n\
    \    }\n    result.append(numbers[numbers.count - 1])\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    return numbers.reduce([]) { (acc, number) in\n        acc + [number,\
    \ delimeter]\n    }.dropLast()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<numbers.count {\n        result.append(numbers[i])\n        if i != numbers.count\
    \ - 1 {\n            result.append(delimeter)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        result.append(number)\n\
    \        result.append(delimeter)\n    }\n    result.removeLast()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002af84b212c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af84af09561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af84af09286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af84af0913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af84af08bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002af84b00ac1d <unavailable> + 2489373

    6    tmpj7p7o8gz                        0x00005598e92b1a72 <unavailable> + 6770

    7    tmpj7p7o8gz                        0x00005598e92b1572 <unavailable> + 5490

    8    libc.so.6                          0x00002af84b3fe460 __libc_start_main +
    245

    9    tmpj7p7o8gz                        0x00005598e92b1279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for (index, number) in numbers.enumerated() {\n         \
    \   result.append(number)\n            if index != numbers.count - 1 {\n     \
    \           result.append(delimeter)\n            }\n        }\n        return\
    \ result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count - 1 {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n        result.append(numbers[numbers.count\
    \ - 1])\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<numbers.count {\n        result.append(numbers[i])\n        if i != numbers.count\
    \ - 1 {\n            result.append(delimeter)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count - 1 {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n        result.append(numbers[numbers.count\
    \ - 1])\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<numbers.count - 1 {\n        result.append(numbers[i])\n        result.append(delimeter)\n\
    \    }\n    result.append(numbers[numbers.count - 1])\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for (index, number) in numbers.enumerated() {\n        result.append(number)\n\
    \        if index != numbers.count - 1 {\n            result.append(delimeter)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<numbers.count {\n        result.append(numbers[i])\n        if i != numbers.count\
    \ - 1 {\n            result.append(delimeter)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i < numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i < numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count - 1 {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n        result.append(numbers[numbers.count\
    \ - 1])\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        result.append(numbers[i])\n       \
    \ if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count - 1 {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n        result.append(numbers[numbers.count\
    \ - 1])\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count - 1 {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n        result.append(numbers[numbers.count\
    \ - 1])\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<numbers.count - 1 {\n        result.append(numbers[i])\n        result.append(delimeter)\n\
    \    }\n    result.append(numbers[numbers.count - 1])\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count - 1 {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n        result.append(numbers[numbers.count\
    \ - 1])\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index < numbers.count - 1 {\n \
    \           result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count - 1 {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n        result.append(numbers[numbers.count\
    \ - 1])\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count - 1 {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n        result.append(numbers[numbers.count\
    \ - 1])\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i < numbers.count - 1 {\n            result.append(delimeter)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    if numbers.count\
    \ == 1 {\n        return numbers\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<numbers.count - 1 {\n        result.append(numbers[i])\n        result.append(delimeter)\n\
    \    }\n    result.append(numbers[numbers.count - 1])\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count - 1 {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n        result.append(numbers[numbers.count\
    \ - 1])\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    } else {\n        var result\
    \ = [Int]()\n        for i in 0..<numbers.count - 1 {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n        result.append(numbers[numbers.count\
    \ - 1])\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    guard !numbers.isEmpty else { return [] }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count {\n        if i == numbers.count - 1 {\n     \
    \       result.append(numbers[i])\n        } else {\n            result.append(numbers[i])\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for (index, number) in numbers.enumerated()\
    \ {\n        result.append(number)\n        if index != numbers.count - 1 {\n\
    \            result.append(delimeter)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter: 7)\
    \ == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
    \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2)\
    \ == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    return numbers.reduce([]) { (accumulator, number) in\n        accumulator\
    \ + [number, delimeter]\n    }.dropLast()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\n\
    assert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8,\
    \ 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    if numbers.isEmpty {\n        return []\n    }\n    var result = [Int]()\n\
    \    for i in 0..<numbers.count - 1 {\n        result.append(numbers[i])\n   \
    \     result.append(delimeter)\n    }\n    result.append(numbers[numbers.count\
    \ - 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(intersperse(numbers:\
    \ [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers: [5,\
    \ 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter:\
    \ 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n\
    /// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n\
    \        if i != numbers.count - 1 {\n            result.append(delimeter)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(intersperse(numbers: [] as [Int], delimeter: 7) == [] as [Int])\nassert(intersperse(numbers:\
    \ [5, 6, 3, 2], delimeter: 8) == [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers:\
    \ [2, 2, 2], delimeter: 2) == [2, 2, 2, 2, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
