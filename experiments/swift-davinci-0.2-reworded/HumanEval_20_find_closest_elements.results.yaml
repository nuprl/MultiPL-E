language: swift
name: HumanEval_20_find_closest_elements
results:
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ (i+1)..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmplv5hza1j/tmplv5hza1j.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf0b88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf087fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf087f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf087e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplv5hza1j                        0x0000557463007962 <unavailable> + 6498

    5    libc.so.6                          0x00002aaaf0d74460 __libc_start_main +
    245

    6    tmplv5hza1j                        0x00005574630073b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_difference: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < closest_difference {\n                closest_difference = difference\n\
    \                closest_elements = (numbers[i], numbers[j])\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpa4o_6tj9/tmpa4o_6tj9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fdc868c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fdc55fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fdc55f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fdc55e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4o_6tj9                        0x000055cdb0300912 <unavailable> + 6418

    5    libc.so.6                          0x00002b9fdca54460 __libc_start_main +
    245

    6    tmpa4o_6tj9                        0x000055cdb0300369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closest_difference {\n                closest = (numbers[i], numbers[j])\n \
    \               closest_difference = difference\n            }\n        }\n  \
    \  }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpsxseobg0/tmpsxseobg0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b353093bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3530632b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3530632988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35306317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxseobg0                        0x0000559204582912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3530b27460 __libc_start_main +
    245

    6    tmpsxseobg0                        0x0000559204582369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp8b7532j/tmpp8b7532j.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9183df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9183ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9183ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9183ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8b7532j                        0x000055e5ace22962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9183fde460 __libc_start_main +
    245

    6    tmpp8b7532j                        0x000055e5ace223b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp8b7532j/tmpp8b7532j.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9183df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9183ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9183ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9183ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8b7532j                        0x000055e5ace22962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9183fde460 __libc_start_main +
    245

    6    tmpp8b7532j                        0x000055e5ace223b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmplyi2sk6c/tmplyi2sk6c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7eb910ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7eb8e05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7eb8e05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7eb8e047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplyi2sk6c                        0x0000564172d4a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7eb92fa460 __libc_start_main +
    245

    6    tmplyi2sk6c                        0x0000564172d4a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp8b7532j/tmpp8b7532j.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9183df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9183ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9183ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9183ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8b7532j                        0x000055e5ace22962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9183fde460 __libc_start_main +
    245

    6    tmpp8b7532j                        0x000055e5ace223b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp8b7532j/tmpp8b7532j.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9183df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9183ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9183ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9183ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8b7532j                        0x000055e5ace22962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9183fde460 __libc_start_main +
    245

    6    tmpp8b7532j                        0x000055e5ace223b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmrdwcf5z/tmpmrdwcf5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b081cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b07ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b07ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b07ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrdwcf5z                        0x000055c8bbff6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b083ba460 __libc_start_main +
    245

    6    tmpmrdwcf5z                        0x000055c8bbff6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_difference: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < closest_difference {\n                closest_difference = difference\n\
    \                closest_elements = (numbers[i], numbers[j])\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpa4o_6tj9/tmpa4o_6tj9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fdc868c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fdc55fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fdc55f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fdc55e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4o_6tj9                        0x000055cdb0300912 <unavailable> + 6418

    5    libc.so.6                          0x00002b9fdca54460 __libc_start_main +
    245

    6    tmpa4o_6tj9                        0x000055cdb0300369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp64yk2myb/tmp64yk2myb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b626679dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6266494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6266494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62664937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64yk2myb                        0x000055f623213912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6266989460 __libc_start_main +
    245

    6    tmp64yk2myb                        0x000055f623213369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_difference = Double.infinity\n\
    \    var min_difference_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_difference_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_difference_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1omsbnsp/tmp1omsbnsp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5861d14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5861a0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5861a0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5861a0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1omsbnsp                        0x0000557291a40962 <unavailable> + 6498

    5    libc.so.6                          0x00002b5861f00460 __libc_start_main +
    245

    6    tmp1omsbnsp                        0x0000557291a403b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest_pair\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest_pair\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0yxkeap3/tmp0yxkeap3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93a5b3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93a5835b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93a5835988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93a58347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0yxkeap3                        0x00005645c62a7912 <unavailable> + 6418

    5    libc.so.6                          0x00002b93a5d2a460 __libc_start_main +
    245

    6    tmp0yxkeap3                        0x00005645c62a7369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpuno6vu0d/tmpuno6vu0d.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af187d80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af187a77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af187a77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af187a767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuno6vu0d                        0x00005558460f8912 <unavailable> + 6418

    5    libc.so.6                          0x00002af187f6c460 __libc_start_main +
    245

    6    tmpuno6vu0d                        0x00005558460f8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpl65v9lid/tmpl65v9lid.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b26e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b23ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b23dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b23dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl65v9lid                        0x0000564654959962 <unavailable> + 6498

    5    libc.so.6                          0x00002b38b28d2460 __libc_start_main +
    245

    6    tmpl65v9lid                        0x00005646549593b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let newDistance = abs(numbers[i]\
    \ - numbers[j])\n            if newDistance < distance {\n                distance\
    \ = newDistance\n                closest = (numbers[i], numbers[j])\n        \
    \    }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpihag7hxr/tmpihag7hxr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6b915ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6b8e51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6b8e51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6b8e507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpihag7hxr                        0x0000562ccb038912 <unavailable> + 6418

    5    libc.so.6                          0x00002af6b9346460 __libc_start_main +
    245

    6    tmpihag7hxr                        0x0000562ccb038369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closest_difference {\n                closest = (numbers[i], numbers[j])\n \
    \               closest_difference = difference\n            }\n        }\n  \
    \  }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpsxseobg0/tmpsxseobg0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b353093bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3530632b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3530632988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35306317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxseobg0                        0x0000559204582912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3530b27460 __libc_start_main +
    245

    6    tmpsxseobg0                        0x0000559204582369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmplyi2sk6c/tmplyi2sk6c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7eb910ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7eb8e05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7eb8e05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7eb8e047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplyi2sk6c                        0x0000564172d4a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7eb92fa460 __libc_start_main +
    245

    6    tmplyi2sk6c                        0x0000564172d4a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closestElements = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(numbers[0] - numbers[1])\n    \n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closestDistance = distance\n                closestElements = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    \n    return closestElements\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpib3xo5dm/tmpib3xo5dm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c6c338c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c6c02fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c6c02f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c6c02e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpib3xo5dm                        0x000055b95a52d912 <unavailable> + 6418

    5    libc.so.6                          0x00002b2c6c524460 __libc_start_main +
    245

    6    tmpib3xo5dm                        0x000055b95a52d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDifference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closestDifference {\n                closestDifference = difference\n      \
    \          closest = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkciuwqll/tmpkciuwqll.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6273050c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6272d47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6272d47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6272d467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkciuwqll                        0x00005615c0395912 <unavailable> + 6418

    5    libc.so.6                          0x00002b627323c460 __libc_start_main +
    245

    6    tmpkciuwqll                        0x00005615c0395369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_diff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff {\n\
    \                closest = (numbers[i], numbers[j])\n                closest_diff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpu_68hps0/tmpu_68hps0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c347dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c344d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c344d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c344d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_68hps0                        0x000055e4aa5f3912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5c349c6460 __libc_start_main +
    245

    6    tmpu_68hps0                        0x000055e4aa5f3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmrdwcf5z/tmpmrdwcf5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b081cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b07ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b07ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b07ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrdwcf5z                        0x000055c8bbff6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b083ba460 __libc_start_main +
    245

    6    tmpmrdwcf5z                        0x000055c8bbff6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDifference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closestDifference {\n                closestDifference = difference\n      \
    \          closest = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkciuwqll/tmpkciuwqll.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6273050c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6272d47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6272d47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6272d467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkciuwqll                        0x00005615c0395912 <unavailable> + 6418

    5    libc.so.6                          0x00002b627323c460 __libc_start_main +
    245

    6    tmpkciuwqll                        0x00005615c0395369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp8b7532j/tmpp8b7532j.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9183df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9183ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9183ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9183ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8b7532j                        0x000055e5ace22962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9183fde460 __libc_start_main +
    245

    6    tmpp8b7532j                        0x000055e5ace223b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmrdwcf5z/tmpmrdwcf5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b081cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b07ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b07ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b07ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrdwcf5z                        0x000055c8bbff6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b083ba460 __libc_start_main +
    245

    6    tmpmrdwcf5z                        0x000055c8bbff6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmrdwcf5z/tmpmrdwcf5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b081cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b07ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b07ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b07ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrdwcf5z                        0x000055c8bbff6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b083ba460 __libc_start_main +
    245

    6    tmpmrdwcf5z                        0x000055c8bbff6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp8b7532j/tmpp8b7532j.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9183df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9183ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9183ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9183ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8b7532j                        0x000055e5ace22962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9183fde460 __libc_start_main +
    245

    6    tmpp8b7532j                        0x000055e5ace223b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmrdwcf5z/tmpmrdwcf5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b081cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b07ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b07ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b07ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrdwcf5z                        0x000055c8bbff6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b083ba460 __libc_start_main +
    245

    6    tmpmrdwcf5z                        0x000055c8bbff6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp64yk2myb/tmp64yk2myb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b626679dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6266494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6266494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62664937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64yk2myb                        0x000055f623213912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6266989460 __libc_start_main +
    245

    6    tmp64yk2myb                        0x000055f623213369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpl65v9lid/tmpl65v9lid.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b26e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b23ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b23dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b23dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl65v9lid                        0x0000564654959962 <unavailable> + 6498

    5    libc.so.6                          0x00002b38b28d2460 __libc_start_main +
    245

    6    tmpl65v9lid                        0x00005646549593b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpuno6vu0d/tmpuno6vu0d.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af187d80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af187a77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af187a77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af187a767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuno6vu0d                        0x00005558460f8912 <unavailable> + 6418

    5    libc.so.6                          0x00002af187f6c460 __libc_start_main +
    245

    6    tmpuno6vu0d                        0x00005558460f8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp64yk2myb/tmp64yk2myb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b626679dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6266494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6266494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62664937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64yk2myb                        0x000055f623213912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6266989460 __libc_start_main +
    245

    6    tmp64yk2myb                        0x000055f623213369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var result:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                result\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpttt874cp/tmpttt874cp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a2c5d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a2c2cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a2c2cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a2c2ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttt874cp                        0x0000556b8dd64962 <unavailable> + 6498

    5    libc.so.6                          0x00002b2a2c7c4460 __libc_start_main +
    245

    6    tmpttt874cp                        0x0000556b8dd643b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpl65v9lid/tmpl65v9lid.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b26e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b23ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b23dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b23dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl65v9lid                        0x0000564654959962 <unavailable> + 6498

    5    libc.so.6                          0x00002b38b28d2460 __libc_start_main +
    245

    6    tmpl65v9lid                        0x00005646549593b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp64yk2myb/tmp64yk2myb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b626679dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6266494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6266494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62664937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64yk2myb                        0x000055f623213912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6266989460 __libc_start_main +
    245

    6    tmp64yk2myb                        0x000055f623213369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_diff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff {\n\
    \                closest = (numbers[i], numbers[j])\n                closest_diff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpu_68hps0/tmpu_68hps0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c347dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c344d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c344d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c344d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_68hps0                        0x000055e4aa5f3912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5c349c6460 __libc_start_main +
    245

    6    tmpu_68hps0                        0x000055e4aa5f3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_difference: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < closest_difference {\n                closest_difference = difference\n\
    \                closest_elements = (numbers[i], numbers[j])\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpa4o_6tj9/tmpa4o_6tj9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fdc868c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fdc55fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fdc55f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fdc55e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4o_6tj9                        0x000055cdb0300912 <unavailable> + 6418

    5    libc.so.6                          0x00002b9fdca54460 __libc_start_main +
    245

    6    tmpa4o_6tj9                        0x000055cdb0300369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in (i+1)..<numbers.count {\n            let diff = abs(numbers[i] -\
    \ numbers[j])\n            if diff < min_diff {\n                min_diff = diff\n\
    \                min_pair = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpxdsf2rk4/tmpxdsf2rk4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaca9e7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaca9b76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaca9b76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaca9b757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdsf2rk4                        0x0000556adb521962 <unavailable> + 6498

    5    libc.so.6                          0x00002aacaa06b460 __libc_start_main +
    245

    6    tmpxdsf2rk4                        0x0000556adb5213b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpotiv5689/tmpotiv5689.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15b01b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15afeaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15afeaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15afea97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotiv5689                        0x000055d944ffb912 <unavailable> + 6418

    5    libc.so.6                          0x00002b15b039f460 __libc_start_main +
    245

    6    tmpotiv5689                        0x000055d944ffb369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpl65v9lid/tmpl65v9lid.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b26e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b23ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b23dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b23dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl65v9lid                        0x0000564654959962 <unavailable> + 6498

    5    libc.so.6                          0x00002b38b28d2460 __libc_start_main +
    245

    6    tmpl65v9lid                        0x00005646549593b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_i\
    \ = 0\n    var min_j = 0\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min_i = i\n           \
    \     min_j = j\n            }\n        }\n    }\n    return (numbers[min_i],\
    \ numbers[min_j])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpd2h6txzy/tmpd2h6txzy.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad2b214c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad2af0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad2af0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad2af0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2h6txzy                        0x000055d4bb4fb962 <unavailable> + 6498

    5    libc.so.6                          0x00002aad2b400460 __libc_start_main +
    245

    6    tmpd2h6txzy                        0x000055d4bb4fb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpl65v9lid/tmpl65v9lid.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b26e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b23ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b23dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b23dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl65v9lid                        0x0000564654959962 <unavailable> + 6498

    5    libc.so.6                          0x00002b38b28d2460 __libc_start_main +
    245

    6    tmpl65v9lid                        0x00005646549593b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min1\
    \ = 0.0\n    var min2 = 0.0\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < min {\n\
    \                min = abs(numbers[i] - numbers[j])\n                min1 = numbers[i]\n\
    \                min2 = numbers[j]\n            }\n        }\n    }\n    return\
    \ (min1, min2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp2y_qsrj_/tmp2y_qsrj_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56af78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac56ac6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac56ac6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac56ac6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2y_qsrj_                        0x000055a5f8fa6962 <unavailable> + 6498

    5    libc.so.6                          0x00002ac56b164460 __libc_start_main +
    245

    6    tmp2y_qsrj_                        0x000055a5f8fa63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_index\
    \ = 0\n    for i in 0..<numbers.count - 1 {\n        let diff = abs(numbers[i]\
    \ - numbers[i + 1])\n        if diff < min {\n            min = diff\n       \
    \     min_index = i\n        }\n    }\n    return (numbers[min_index], numbers[min_index\
    \ + 1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpz957pkf1/tmpz957pkf1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b0833ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b08035b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b08035988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b080347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz957pkf1                        0x0000560d19441962 <unavailable> + 6498

    5    libc.so.6                          0x00002b3b0852a460 __libc_start_main +
    245

    6    tmpz957pkf1                        0x0000560d194413b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp64yk2myb/tmp64yk2myb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b626679dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6266494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6266494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62664937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64yk2myb                        0x000055f623213912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6266989460 __libc_start_main +
    245

    6    tmp64yk2myb                        0x000055f623213369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (0, 0)\n\
    \    var minDiff: Double = Double.infinity\n    for i in 0..<numbers.count - 1\
    \ {\n        for j in i + 1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < minDiff {\n                minDiff = diff\n\
    \                closest = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpvd9pdg98/tmpvd9pdg98.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2551055c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2550d4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2550d4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2550d4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvd9pdg98                        0x0000562bcf884962 <unavailable> + 6498

    5    libc.so.6                          0x00002b2551241460 __libc_start_main +
    245

    6    tmpvd9pdg98                        0x0000562bcf8843b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closestPair: (Double, Double) = (0.0,\
    \ 0.0)\n    var closestDistance: Double = Double.infinity\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closestDistance = distance\n                closestPair = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return closestPair\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpz89r4k7c/tmpz89r4k7c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1916e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1913d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1913d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1913d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz89r4k7c                        0x0000556ddf497962 <unavailable> + 6498

    5    libc.so.6                          0x00002ab1918ce460 __libc_start_main +
    245

    6    tmpz89r4k7c                        0x0000556ddf4973b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpuno6vu0d/tmpuno6vu0d.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af187d80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af187a77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af187a77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af187a767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuno6vu0d                        0x00005558460f8912 <unavailable> + 6418

    5    libc.so.6                          0x00002af187f6c460 __libc_start_main +
    245

    6    tmpuno6vu0d                        0x00005558460f8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp8b7532j/tmpp8b7532j.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9183df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9183ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9183ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9183ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8b7532j                        0x000055e5ace22962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9183fde460 __libc_start_main +
    245

    6    tmpp8b7532j                        0x000055e5ace223b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpnhd1pkfa/tmpnhd1pkfa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6215a1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6215715b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6215715988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62157147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhd1pkfa                        0x00005588c4361912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6215c0a460 __libc_start_main +
    245

    6    tmpnhd1pkfa                        0x00005588c4361369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpl65v9lid/tmpl65v9lid.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b26e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b23ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b23dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b23dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl65v9lid                        0x0000564654959962 <unavailable> + 6498

    5    libc.so.6                          0x00002b38b28d2460 __libc_start_main +
    245

    6    tmpl65v9lid                        0x00005646549593b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            let d = abs(numbers[i] -\
    \ numbers[j])\n            if d < diff {\n                closest = (numbers[i],\
    \ numbers[j])\n                diff = d\n            }\n        }\n    }\n   \
    \ return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_9ugiwx/tmp7_9ugiwx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb1db29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb1d820b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb1d820988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb1d81f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_9ugiwx                        0x000055d305dbf912 <unavailable> + 6418

    5    libc.so.6                          0x00002abb1dd15460 __libc_start_main +
    245

    6    tmp7_9ugiwx                        0x000055d305dbf369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_diff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff {\n\
    \                closest = (numbers[i], numbers[j])\n                closest_diff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpu_68hps0/tmpu_68hps0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c347dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c344d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c344d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c344d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_68hps0                        0x000055e4aa5f3912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5c349c6460 __libc_start_main +
    245

    6    tmpu_68hps0                        0x000055e4aa5f3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbllo1whn/tmpbllo1whn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab438fc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab438cb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab438cb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab438cb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbllo1whn                        0x000055915ba59912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab4391ad460 __libc_start_main +
    245

    6    tmpbllo1whn                        0x000055915ba59369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min1\
    \ = 0.0\n    var min2 = 0.0\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < min {\n\
    \                min = abs(numbers[i] - numbers[j])\n                min1 = numbers[i]\n\
    \                min2 = numbers[j]\n            }\n        }\n    }\n    return\
    \ (min1, min2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp2y_qsrj_/tmp2y_qsrj_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56af78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac56ac6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac56ac6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac56ac6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2y_qsrj_                        0x000055a5f8fa6962 <unavailable> + 6498

    5    libc.so.6                          0x00002ac56b164460 __libc_start_main +
    245

    6    tmp2y_qsrj_                        0x000055a5f8fa63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_diff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff {\n\
    \                closest = (numbers[i], numbers[j])\n                closest_diff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpu_68hps0/tmpu_68hps0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c347dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c344d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c344d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c344d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_68hps0                        0x000055e4aa5f3912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5c349c6460 __libc_start_main +
    245

    6    tmpu_68hps0                        0x000055e4aa5f3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var result:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                result\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpttt874cp/tmpttt874cp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a2c5d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a2c2cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a2c2cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a2c2ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttt874cp                        0x0000556b8dd64962 <unavailable> + 6498

    5    libc.so.6                          0x00002b2a2c7c4460 __libc_start_main +
    245

    6    tmpttt874cp                        0x0000556b8dd643b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let newDiff = abs(numbers[i]\
    \ - numbers[j])\n            if newDiff < diff {\n                closest = (numbers[i],\
    \ numbers[j])\n                diff = newDiff\n            }\n        }\n    }\n\
    \    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp2w0rc1_s/tmp2w0rc1_s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e75a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e75769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e75769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e757687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2w0rc1_s                        0x00005626db752912 <unavailable> + 6418

    5    libc.so.6                          0x00002b9e75c5e460 __libc_start_main +
    245

    6    tmp2w0rc1_s                        0x00005626db752369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp64yk2myb/tmp64yk2myb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b626679dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6266494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6266494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62664937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64yk2myb                        0x000055f623213912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6266989460 __libc_start_main +
    245

    6    tmp64yk2myb                        0x000055f623213369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpncm_rry5/tmpncm_rry5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17a7848c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17a753fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17a753f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17a753e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpncm_rry5                        0x0000560ca7f1e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b17a7a34460 __libc_start_main +
    245

    6    tmpncm_rry5                        0x0000560ca7f1e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbllo1whn/tmpbllo1whn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab438fc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab438cb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab438cb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab438cb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbllo1whn                        0x000055915ba59912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab4391ad460 __libc_start_main +
    245

    6    tmpbllo1whn                        0x000055915ba59369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDiff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closestDiff {\n \
    \               closest = (numbers[i], numbers[j])\n                closestDiff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfn_rrv8q/tmpfn_rrv8q.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeb9661c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeb9358b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeb9358988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeb93577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn_rrv8q                        0x00005570a1e67912 <unavailable> + 6418

    5    libc.so.6                          0x00002aaeb984d460 __libc_start_main +
    245

    6    tmpfn_rrv8q                        0x00005570a1e67369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpeabho3wq/tmpeabho3wq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeed244fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeed2146b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeed2146988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeed21457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeabho3wq                        0x000055583e76f912 <unavailable> + 6418

    5    libc.so.6                          0x00002aeed263b460 __libc_start_main +
    245

    6    tmpeabho3wq                        0x000055583e76f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let newDiff = abs(numbers[i]\
    \ - numbers[j])\n            if newDiff < diff {\n                closest = (numbers[i],\
    \ numbers[j])\n                diff = newDiff\n            }\n        }\n    }\n\
    \    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp2w0rc1_s/tmp2w0rc1_s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e75a72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e75769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e75769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e757687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2w0rc1_s                        0x00005626db752912 <unavailable> + 6418

    5    libc.so.6                          0x00002b9e75c5e460 __libc_start_main +
    245

    6    tmp2w0rc1_s                        0x00005626db752369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_diff_elements = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_diff_elements = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return min_diff_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpaqdq7ss8/tmpaqdq7ss8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84305f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84302e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84302e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84302e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaqdq7ss8                        0x000055f3f8d8a962 <unavailable> + 6498

    5    libc.so.6                          0x00002b84307de460 __libc_start_main +
    245

    6    tmpaqdq7ss8                        0x000055f3f8d8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmrdwcf5z/tmpmrdwcf5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b081cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b07ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b07ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b07ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrdwcf5z                        0x000055c8bbff6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b083ba460 __libc_start_main +
    245

    6    tmpmrdwcf5z                        0x000055c8bbff6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDifference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closestDifference {\n                closestDifference = difference\n      \
    \          closest = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkciuwqll/tmpkciuwqll.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6273050c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6272d47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6272d47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6272d467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkciuwqll                        0x00005615c0395912 <unavailable> + 6418

    5    libc.so.6                          0x00002b627323c460 __libc_start_main +
    245

    6    tmpkciuwqll                        0x00005615c0395369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_index\
    \ = 0\n    var max_index = 0\n    for i in 0..<numbers.count - 1 {\n        let\
    \ diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min {\n         \
    \   min = diff\n            min_index = i\n            max_index = i + 1\n   \
    \     }\n    }\n    return (numbers[min_index], numbers[max_index])\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpqcexv70z/tmpqcexv70z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab08db8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab08d885b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab08d885988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab08d8847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcexv70z                        0x0000559628082962 <unavailable> + 6498

    5    libc.so.6                          0x00002ab08dd7a460 __libc_start_main +
    245

    6    tmpqcexv70z                        0x00005596280823b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp719po06e/tmp719po06e.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85492c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8548fb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8548fb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8548fb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp719po06e                        0x00005620b02b6962 <unavailable> + 6498

    5    libc.so.6                          0x00002b85494ae460 __libc_start_main +
    245

    6    tmp719po06e                        0x00005620b02b63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpnhd1pkfa/tmpnhd1pkfa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6215a1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6215715b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6215715988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62157147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhd1pkfa                        0x00005588c4361912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6215c0a460 __libc_start_main +
    245

    6    tmpnhd1pkfa                        0x00005588c4361369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count - 1 {\n        for j in i + 1..<numbers.count {\n     \
    \       let distance = abs(numbers[i] - numbers[j])\n            if distance <\
    \ closestDistance {\n                closest = (numbers[i], numbers[j])\n    \
    \            closestDistance = distance\n            }\n        }\n    }\n   \
    \ return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjyar70sj/tmpjyar70sj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14e5e8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14e5b85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14e5b85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14e5b847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjyar70sj                        0x0000561445b6e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b14e607a460 __libc_start_main +
    245

    6    tmpjyar70sj                        0x0000561445b6e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_difference = Double.infinity\n\
    \    var min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_pair = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpov3g9rf4/tmpov3g9rf4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f14aeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f147e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f147e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f147e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpov3g9rf4                        0x0000562c7ccda962 <unavailable> + 6498

    5    libc.so.6                          0x00002b2f14cd6460 __libc_start_main +
    245

    6    tmpov3g9rf4                        0x0000562c7ccda3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_i\
    \ = 0\n    var min_j = 0\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min_i = i\n           \
    \     min_j = j\n            }\n        }\n    }\n    return (numbers[min_i],\
    \ numbers[min_j])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpd2h6txzy/tmpd2h6txzy.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad2b214c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad2af0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad2af0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad2af0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2h6txzy                        0x000055d4bb4fb962 <unavailable> + 6498

    5    libc.so.6                          0x00002aad2b400460 __libc_start_main +
    245

    6    tmpd2h6txzy                        0x000055d4bb4fb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_difference: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < closest_difference {\n                closest_difference = difference\n\
    \                closest_elements = (numbers[i], numbers[j])\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpa4o_6tj9/tmpa4o_6tj9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fdc868c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fdc55fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fdc55f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fdc55e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4o_6tj9                        0x000055cdb0300912 <unavailable> + 6418

    5    libc.so.6                          0x00002b9fdca54460 __libc_start_main +
    245

    6    tmpa4o_6tj9                        0x000055cdb0300369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_diff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff {\n\
    \                closest = (numbers[i], numbers[j])\n                closest_diff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpu_68hps0/tmpu_68hps0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c347dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c344d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c344d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c344d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_68hps0                        0x000055e4aa5f3912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5c349c6460 __libc_start_main +
    245

    6    tmpu_68hps0                        0x000055e4aa5f3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_i\
    \ = 0\n    var min_j = 0\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min_i = i\n           \
    \     min_j = j\n            }\n        }\n    }\n    return (numbers[min_i],\
    \ numbers[min_j])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpd2h6txzy/tmpd2h6txzy.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad2b214c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad2af0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad2af0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad2af0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2h6txzy                        0x000055d4bb4fb962 <unavailable> + 6498

    5    libc.so.6                          0x00002aad2b400460 __libc_start_main +
    245

    6    tmpd2h6txzy                        0x000055d4bb4fb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDiff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closestDiff {\n \
    \               closest = (numbers[i], numbers[j])\n                closestDiff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfn_rrv8q/tmpfn_rrv8q.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeb9661c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeb9358b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeb9358988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeb93577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn_rrv8q                        0x00005570a1e67912 <unavailable> + 6418

    5    libc.so.6                          0x00002aaeb984d460 __libc_start_main +
    245

    6    tmpfn_rrv8q                        0x00005570a1e67369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDiff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closestDiff {\n \
    \               closest = (numbers[i], numbers[j])\n                closestDiff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfn_rrv8q/tmpfn_rrv8q.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeb9661c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeb9358b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeb9358988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeb93577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn_rrv8q                        0x00005570a1e67912 <unavailable> + 6418

    5    libc.so.6                          0x00002aaeb984d460 __libc_start_main +
    245

    6    tmpfn_rrv8q                        0x00005570a1e67369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmrdwcf5z/tmpmrdwcf5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b081cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b07ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b07ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b07ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrdwcf5z                        0x000055c8bbff6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b083ba460 __libc_start_main +
    245

    6    tmpmrdwcf5z                        0x000055c8bbff6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_diff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff {\n\
    \                closest = (numbers[i], numbers[j])\n                closest_diff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpu_68hps0/tmpu_68hps0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c347dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c344d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c344d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c344d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_68hps0                        0x000055e4aa5f3912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5c349c6460 __libc_start_main +
    245

    6    tmpu_68hps0                        0x000055e4aa5f3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_difference = Double.infinity\n\
    \    var min_numbers = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_numbers = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_numbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp149b9dq2/tmp149b9dq2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bf6af2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bf67e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bf67e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bf67e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp149b9dq2                        0x0000555b3aecd962 <unavailable> + 6498

    5    libc.so.6                          0x00002b7bf6cde460 __libc_start_main +
    245

    6    tmp149b9dq2                        0x0000555b3aecd3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmrdwcf5z/tmpmrdwcf5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b081cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b07ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b07ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b07ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrdwcf5z                        0x000055c8bbff6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b083ba460 __libc_start_main +
    245

    6    tmpmrdwcf5z                        0x000055c8bbff6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDistance = Double.infinity\n   \
    \ var minNumbers = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j\
    \ in i+1..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < minDistance {\n                minDistance = distance\n\
    \                minNumbers = (numbers[i], numbers[j])\n            }\n      \
    \  }\n    }\n    return minNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp684kd47/tmpp684kd47.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53f7ad6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53f77cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53f77cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53f77cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp684kd47                        0x000055a36f133962 <unavailable> + 6498

    5    libc.so.6                          0x00002b53f7cc2460 __libc_start_main +
    245

    6    tmpp684kd47                        0x000055a36f1333b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmplyi2sk6c/tmplyi2sk6c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7eb910ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7eb8e05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7eb8e05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7eb8e047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplyi2sk6c                        0x0000564172d4a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7eb92fa460 __libc_start_main +
    245

    6    tmplyi2sk6c                        0x0000564172d4a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n     \
    \   for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp8b7532j/tmpp8b7532j.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9183df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9183ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9183ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9183ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8b7532j                        0x000055e5ace22962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9183fde460 __libc_start_main +
    245

    6    tmpp8b7532j                        0x000055e5ace223b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp9fqp0le/tmpp9fqp0le.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a131cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a1013b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a1013988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a10127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9fqp0le                        0x000055c55606b962 <unavailable> + 6498

    5    libc.so.6                          0x00002af0a1508460 __libc_start_main +
    245

    6    tmpp9fqp0le                        0x000055c55606b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp64yk2myb/tmp64yk2myb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b626679dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6266494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6266494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62664937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64yk2myb                        0x000055f623213912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6266989460 __libc_start_main +
    245

    6    tmp64yk2myb                        0x000055f623213369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp9fqp0le/tmpp9fqp0le.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a131cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a1013b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a1013988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a10127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9fqp0le                        0x000055c55606b962 <unavailable> + 6498

    5    libc.so.6                          0x00002af0a1508460 __libc_start_main +
    245

    6    tmpp9fqp0le                        0x000055c55606b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_index\
    \ = 0\n    var max_index = 0\n    for i in 0..<numbers.count {\n        for j\
    \ in i..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < min {\n\
    \                min = abs(numbers[i] - numbers[j])\n                min_index\
    \ = i\n                max_index = j\n            }\n        }\n    }\n    return\
    \ (numbers[min_index], numbers[max_index])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcxt3kxen/tmpcxt3kxen.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4155d2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4155a26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4155a26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4155a257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxt3kxen                        0x00005611c83417fe <unavailable> + 6142

    5    libc.so.6                          0x00002b4155f1b460 __libc_start_main +
    245

    6    tmpcxt3kxen                        0x00005611c83413b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp9fqp0le/tmpp9fqp0le.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a131cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a1013b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a1013988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a10127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9fqp0le                        0x000055c55606b962 <unavailable> + 6498

    5    libc.so.6                          0x00002af0a1508460 __libc_start_main +
    245

    6    tmpp9fqp0le                        0x000055c55606b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_diff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff {\n\
    \                closest = (numbers[i], numbers[j])\n                closest_diff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpu_68hps0/tmpu_68hps0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c347dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c344d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c344d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c344d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_68hps0                        0x000055e4aa5f3912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5c349c6460 __libc_start_main +
    245

    6    tmpu_68hps0                        0x000055e4aa5f3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp64yk2myb/tmp64yk2myb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b626679dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6266494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6266494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62664937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64yk2myb                        0x000055f623213912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6266989460 __libc_start_main +
    245

    6    tmp64yk2myb                        0x000055f623213369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_difference: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count - 1 {\n        for j in i + 1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < closest_difference {\n                closest_difference = difference\n\
    \                closest_elements = (numbers[i], numbers[j])\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpqf1g07uq/tmpqf1g07uq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14b5f51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14b5c48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14b5c48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14b5c477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqf1g07uq                        0x000055b0bf604912 <unavailable> + 6418

    5    libc.so.6                          0x00002b14b613d460 __libc_start_main +
    245

    6    tmpqf1g07uq                        0x000055b0bf604369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_difference: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < closest_difference {\n                closest_difference = difference\n\
    \                closest_elements = (numbers[i], numbers[j])\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpa4o_6tj9/tmpa4o_6tj9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fdc868c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fdc55fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fdc55f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fdc55e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4o_6tj9                        0x000055cdb0300912 <unavailable> + 6418

    5    libc.so.6                          0x00002b9fdca54460 __libc_start_main +
    245

    6    tmpa4o_6tj9                        0x000055cdb0300369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpuno6vu0d/tmpuno6vu0d.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af187d80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af187a77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af187a77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af187a767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuno6vu0d                        0x00005558460f8912 <unavailable> + 6418

    5    libc.so.6                          0x00002af187f6c460 __libc_start_main +
    245

    6    tmpuno6vu0d                        0x00005558460f8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_diff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff {\n\
    \                closest = (numbers[i], numbers[j])\n                closest_diff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpu_68hps0/tmpu_68hps0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c347dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c344d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c344d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c344d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_68hps0                        0x000055e4aa5f3912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5c349c6460 __libc_start_main +
    245

    6    tmpu_68hps0                        0x000055e4aa5f3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpl65v9lid/tmpl65v9lid.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b26e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b23ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b23dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b23dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl65v9lid                        0x0000564654959962 <unavailable> + 6498

    5    libc.so.6                          0x00002b38b28d2460 __libc_start_main +
    245

    6    tmpl65v9lid                        0x00005646549593b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count - 1 {\n \
    \       let diff = abs(numbers[i] - numbers[i + 1])\n        if diff < minDiff\
    \ {\n            minDiff = diff\n            minPair = (numbers[i], numbers[i\
    \ + 1])\n        }\n    }\n    return minPair\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpoq7o637_/tmpoq7o637_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaee87eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaee84e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaee84e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaee84e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoq7o637_                        0x000055a6ebea9962 <unavailable> + 6498

    5    libc.so.6                          0x00002aaee89da460 __libc_start_main +
    245

    6    tmpoq7o637_                        0x000055a6ebea93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDifference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closestDifference {\n                closestDifference = difference\n      \
    \          closest = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkciuwqll/tmpkciuwqll.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6273050c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6272d47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6272d47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6272d467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkciuwqll                        0x00005615c0395912 <unavailable> + 6418

    5    libc.so.6                          0x00002b627323c460 __libc_start_main +
    245

    6    tmpkciuwqll                        0x00005615c0395369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closest_difference {\n                closest = (numbers[i], numbers[j])\n \
    \               closest_difference = difference\n            }\n        }\n  \
    \  }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpsxseobg0/tmpsxseobg0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b353093bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3530632b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3530632988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35306317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxseobg0                        0x0000559204582912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3530b27460 __libc_start_main +
    245

    6    tmpsxseobg0                        0x0000559204582369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min1\
    \ = 0.0\n    var min2 = 0.0\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < min {\n\
    \                min = abs(numbers[i] - numbers[j])\n                min1 = numbers[i]\n\
    \                min2 = numbers[j]\n            }\n        }\n    }\n    return\
    \ (min1, min2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp2y_qsrj_/tmp2y_qsrj_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56af78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac56ac6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac56ac6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac56ac6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2y_qsrj_                        0x000055a5f8fa6962 <unavailable> + 6498

    5    libc.so.6                          0x00002ac56b164460 __libc_start_main +
    245

    6    tmp2y_qsrj_                        0x000055a5f8fa63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var result:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                result\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpttt874cp/tmpttt874cp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a2c5d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a2c2cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a2c2cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a2c2ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttt874cp                        0x0000556b8dd64962 <unavailable> + 6498

    5    libc.so.6                          0x00002b2a2c7c4460 __libc_start_main +
    245

    6    tmpttt874cp                        0x0000556b8dd643b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_diff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff {\n\
    \                closest = (numbers[i], numbers[j])\n                closest_diff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwn5cpwc_/tmpwn5cpwc_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae28a599c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae28a290b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae28a290988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae28a28f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwn5cpwc_                        0x000055d1edeb4912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae28a785460 __libc_start_main +
    245

    6    tmpwn5cpwc_                        0x000055d1edeb4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmrdwcf5z/tmpmrdwcf5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b081cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b07ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b07ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b07ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrdwcf5z                        0x000055c8bbff6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b083ba460 __libc_start_main +
    245

    6    tmpmrdwcf5z                        0x000055c8bbff6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmplyi2sk6c/tmplyi2sk6c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7eb910ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7eb8e05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7eb8e05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7eb8e047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplyi2sk6c                        0x0000564172d4a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7eb92fa460 __libc_start_main +
    245

    6    tmplyi2sk6c                        0x0000564172d4a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var minDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < minDiff {\n                minDiff = diff\n\
    \                closest = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpnpe29fyy/tmpnpe29fyy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06a712cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06a6e23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06a6e23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06a6e227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpe29fyy                        0x000055ed207b1912 <unavailable> + 6418

    5    libc.so.6                          0x00002b06a7318460 __libc_start_main +
    245

    6    tmpnpe29fyy                        0x000055ed207b1369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpl65v9lid/tmpl65v9lid.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b26e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b23ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b23dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b23dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl65v9lid                        0x0000564654959962 <unavailable> + 6498

    5    libc.so.6                          0x00002b38b28d2460 __libc_start_main +
    245

    6    tmpl65v9lid                        0x00005646549593b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(numbers[0] - numbers[1])\n   \
    \ for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n     \
    \       let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_pair = (numbers[i], numbers[j])\n\
    \                closest_difference = difference\n            }\n        }\n \
    \   }\n    return closest_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpq83to8bw/tmpq83to8bw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affe4756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affe444db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affe444d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affe444c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq83to8bw                        0x000055d1282dd912 <unavailable> + 6418

    5    libc.so.6                          0x00002affe4942460 __libc_start_main +
    245

    6    tmpq83to8bw                        0x000055d1282dd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_difference = Double.infinity\n\
    \    var closest_elements = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp6ly84j4v/tmp6ly84j4v.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b813ab9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b813a893b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b813a893988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b813a8927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ly84j4v                        0x0000561f478a1962 <unavailable> + 6498

    5    libc.so.6                          0x00002b813ad88460 __libc_start_main +
    245

    6    tmp6ly84j4v                        0x0000561f478a13b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmrdwcf5z/tmpmrdwcf5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b081cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b07ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b07ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b07ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrdwcf5z                        0x000055c8bbff6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b083ba460 __libc_start_main +
    245

    6    tmpmrdwcf5z                        0x000055c8bbff6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minDiffPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < minDiff {\n                minDiff = diff\n\
    \                minDiffPair = (numbers[i], numbers[j])\n            }\n     \
    \   }\n    }\n    return minDiffPair\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpol49bjco/tmpol49bjco.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c7b713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c7b40ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c7b40a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c7b4097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpol49bjco                        0x000055721cee7962 <unavailable> + 6498

    5    libc.so.6                          0x00002b4c7b8ff460 __libc_start_main +
    245

    6    tmpol49bjco                        0x000055721cee73b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closest_difference {\n                closest = (numbers[i], numbers[j])\n \
    \               closest_difference = difference\n            }\n        }\n  \
    \  }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpsxseobg0/tmpsxseobg0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b353093bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3530632b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3530632988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35306317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxseobg0                        0x0000559204582912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3530b27460 __libc_start_main +
    245

    6    tmpsxseobg0                        0x0000559204582369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count - 1 {\n \
    \       for j in i + 1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < minDiff {\n                minDiff = diff\n\
    \                minPair = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpx9zyq_ez/tmpx9zyq_ez.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b359d7a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b359d49cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b359d49c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b359d49b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx9zyq_ez                        0x0000560b4c98e962 <unavailable> + 6498

    5    libc.so.6                          0x00002b359d991460 __libc_start_main +
    245

    6    tmpx9zyq_ez                        0x0000560b4c98e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmrdwcf5z/tmpmrdwcf5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b081cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b07ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b07ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b07ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrdwcf5z                        0x000055c8bbff6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b083ba460 __libc_start_main +
    245

    6    tmpmrdwcf5z                        0x000055c8bbff6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDifference = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let difference = abs(numbers[i] - numbers[j])\n            if difference <\
    \ closestDifference {\n                closestDifference = difference\n      \
    \          closest = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkciuwqll/tmpkciuwqll.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6273050c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6272d47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6272d47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6272d467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkciuwqll                        0x00005615c0395912 <unavailable> + 6418

    5    libc.so.6                          0x00002b627323c460 __libc_start_main +
    245

    6    tmpkciuwqll                        0x00005615c0395369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minDiffElements = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < minDiff {\n                minDiff = diff\n\
    \                minDiffElements = (numbers[i], numbers[j])\n            }\n \
    \       }\n    }\n    return minDiffElements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0i4bxjmo/tmp0i4bxjmo.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1338e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1335deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1335de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1335dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0i4bxjmo                        0x00005570f32aa962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba133ad3460 __libc_start_main +
    245

    6    tmp0i4bxjmo                        0x00005570f32aa3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp64yk2myb/tmp64yk2myb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b626679dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6266494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6266494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62664937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64yk2myb                        0x000055f623213912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6266989460 __libc_start_main +
    245

    6    tmp64yk2myb                        0x000055f623213369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_index\
    \ = 0\n    var max_index = 0\n    for i in 0..<numbers.count {\n        for j\
    \ in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_index\
    \ = i\n                max_index = j\n            }\n        }\n    }\n    return\
    \ (numbers[min_index], numbers[max_index])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3012mxme/tmp3012mxme.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b694a56ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b694a265b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b694a265988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b694a2647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3012mxme                        0x0000561af496a962 <unavailable> + 6498

    5    libc.so.6                          0x00002b694a75a460 __libc_start_main +
    245

    6    tmp3012mxme                        0x0000561af496a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_index\
    \ = 0\n    var max_index = 0\n    for i in 0..<numbers.count {\n        for j\
    \ in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_index\
    \ = i\n                max_index = j\n            }\n        }\n    }\n    return\
    \ (numbers[min_index], numbers[max_index])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3012mxme/tmp3012mxme.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b694a56ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b694a265b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b694a265988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b694a2647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3012mxme                        0x0000561af496a962 <unavailable> + 6498

    5    libc.so.6                          0x00002b694a75a460 __libc_start_main +
    245

    6    tmp3012mxme                        0x0000561af496a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp64yk2myb/tmp64yk2myb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b626679dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6266494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6266494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62664937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64yk2myb                        0x000055f623213912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6266989460 __libc_start_main +
    245

    6    tmp64yk2myb                        0x000055f623213369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ min_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp9fqp0le/tmpp9fqp0le.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a131cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a1013b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a1013988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a10127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9fqp0le                        0x000055c55606b962 <unavailable> + 6498

    5    libc.so.6                          0x00002af0a1508460 __libc_start_main +
    245

    6    tmpp9fqp0le                        0x000055c55606b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpotiv5689/tmpotiv5689.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15b01b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15afeaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15afeaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15afea97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotiv5689                        0x000055d944ffb912 <unavailable> + 6418

    5    libc.so.6                          0x00002b15b039f460 __libc_start_main +
    245

    6    tmpotiv5689                        0x000055d944ffb369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmrdwcf5z/tmpmrdwcf5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b081cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b07ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b07ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b07ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrdwcf5z                        0x000055c8bbff6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b083ba460 __libc_start_main +
    245

    6    tmpmrdwcf5z                        0x000055c8bbff6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDiff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closestDiff {\n \
    \               closest = (numbers[i], numbers[j])\n                closestDiff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfn_rrv8q/tmpfn_rrv8q.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeb9661c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeb9358b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeb9358988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeb93577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn_rrv8q                        0x00005570a1e67912 <unavailable> + 6418

    5    libc.so.6                          0x00002aaeb984d460 __libc_start_main +
    245

    6    tmpfn_rrv8q                        0x00005570a1e67369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ - 1 {\n        for j in i + 1..<numbers.count {\n            let distance =\
    \ abs(numbers[i] - numbers[j])\n            if distance < closest_distance {\n\
    \                closest_elements = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp9i0g236e/tmp9i0g236e.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b27169c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b26e60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b26e60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b26e5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9i0g236e                        0x000055f657f97912 <unavailable> + 6418

    5    libc.so.6                          0x00002b2b27355460 __libc_start_main +
    245

    6    tmp9i0g236e                        0x000055f657f97369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements: (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closest_distance: Double = abs(numbers[0]\
    \ - numbers[1])\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpnhd1pkfa/tmpnhd1pkfa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6215a1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6215715b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6215715988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62157147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhd1pkfa                        0x00005588c4361912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6215c0a460 __libc_start_main +
    245

    6    tmpnhd1pkfa                        0x00005588c4361369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_index\
    \ = 0\n    var max_index = 0\n    for i in 0..<numbers.count {\n        for j\
    \ in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_index\
    \ = i\n                max_index = j\n            }\n        }\n    }\n    return\
    \ (numbers[min_index], numbers[max_index])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3012mxme/tmp3012mxme.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b694a56ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b694a265b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b694a265988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b694a2647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3012mxme                        0x0000561af496a962 <unavailable> + 6498

    5    libc.so.6                          0x00002b694a75a460 __libc_start_main +
    245

    6    tmp3012mxme                        0x0000561af496a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDiff = abs(closest.0 - closest.1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ diff = abs(numbers[i] - numbers[j])\n            if diff < closestDiff {\n \
    \               closest = (numbers[i], numbers[j])\n                closestDiff\
    \ = diff\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfn_rrv8q/tmpfn_rrv8q.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeb9661c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeb9358b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeb9358988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeb93577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn_rrv8q                        0x00005570a1e67912 <unavailable> + 6418

    5    libc.so.6                          0x00002aaeb984d460 __libc_start_main +
    245

    6    tmpfn_rrv8q                        0x00005570a1e67369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp64yk2myb/tmp64yk2myb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b626679dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6266494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6266494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62664937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64yk2myb                        0x000055f623213912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6266989460 __libc_start_main +
    245

    6    tmp64yk2myb                        0x000055f623213369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwif0evdf/tmpwif0evdf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab12c140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab12be37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab12be37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab12be367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwif0evdf                        0x00005564c7053912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab12c32c460 __libc_start_main +
    245

    6    tmpwif0evdf                        0x00005564c7053369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjsekr7nf/tmpjsekr7nf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad400b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad3fdacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad3fdac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad3fdab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjsekr7nf                        0x000055aa0cccc912 <unavailable> + 6418

    5    libc.so.6                          0x00002aad402a1460 __libc_start_main +
    245

    6    tmpjsekr7nf                        0x000055aa0cccc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min: Double = Double.infinity\n   \
    \ var result: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n  \
    \      for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] -\
    \ numbers[j])\n            if diff < min {\n                min = diff\n     \
    \           result = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp6m0cvor6/tmp6m0cvor6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b790430ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7904001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7904001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79040007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6m0cvor6                        0x000055bf0465c962 <unavailable> + 6498

    5    libc.so.6                          0x00002b79044f6460 __libc_start_main +
    245

    6    tmp6m0cvor6                        0x000055bf0465c3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = abs(closest.0 - closest.1)\n    for i\
    \ in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod8_swnx/tmpod8_swnx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84ef928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84ef61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84ef61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84ef61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod8_swnx                        0x000056443d1bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b84efb14460 __libc_start_main +
    245

    6    tmpod8_swnx                        0x000056443d1bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpl65v9lid/tmpl65v9lid.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b26e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b23ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b23dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b23dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl65v9lid                        0x0000564654959962 <unavailable> + 6498

    5    libc.so.6                          0x00002b38b28d2460 __libc_start_main +
    245

    6    tmpl65v9lid                        0x00005646549593b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpl65v9lid/tmpl65v9lid.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b26e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b23ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b23dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b23dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl65v9lid                        0x0000564654959962 <unavailable> + 6498

    5    libc.so.6                          0x00002b38b28d2460 __libc_start_main +
    245

    6    tmpl65v9lid                        0x00005646549593b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min {\n                min = diff\n                min_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return min_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpl65v9lid/tmpl65v9lid.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b26e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b23ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b23dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b23dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl65v9lid                        0x0000564654959962 <unavailable> + 6498

    5    libc.so.6                          0x00002b38b28d2460 __libc_start_main +
    245

    6    tmpl65v9lid                        0x00005646549593b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_index\
    \ = 0\n    for i in 0..<numbers.count-1 {\n        let diff = abs(numbers[i+1]\
    \ - numbers[i])\n        if diff < min {\n            min = diff\n           \
    \ min_index = i\n        }\n    }\n    return (numbers[min_index], numbers[min_index+1])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzdnwa7b2/tmpzdnwa7b2.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0df9a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0df699b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0df699988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0df6987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzdnwa7b2                        0x0000557d627cb962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba0dfb8e460 __libc_start_main +
    245

    6    tmpzdnwa7b2                        0x0000557d627cb3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(closest.0 - closest.1)\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3bd6fu7s/tmp3bd6fu7s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9d3614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9d330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9d330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9d330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bd6fu7s                        0x0000560dc74ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac9d3800460 __libc_start_main +
    245

    6    tmp3bd6fu7s                        0x0000560dc74ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmrdwcf5z/tmpmrdwcf5z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b081cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b07ec5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b07ec5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b07ec47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrdwcf5z                        0x000055c8bbff6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7b083ba460 __libc_start_main +
    245

    6    tmpmrdwcf5z                        0x000055c8bbff6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013461
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var min_index\
    \ = 0\n    for i in 0..<numbers.count - 1 {\n        let diff = abs(numbers[i]\
    \ - numbers[i + 1])\n        if diff < min {\n            min = diff\n       \
    \     min_index = i\n        }\n    }\n    return (numbers[min_index], numbers[min_index\
    \ + 1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpz957pkf1/tmpz957pkf1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b0833ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b08035b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b08035988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b080347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz957pkf1                        0x0000560d19441962 <unavailable> + 6498

    5    libc.so.6                          0x00002b3b0852a460 __libc_start_main +
    245

    6    tmpz957pkf1                        0x0000560d194413b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013462
