name: HumanEval_43_pairs_sum_to_zero
language: swift
prompt: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns\
  \ true if there are two distinct elements in the array that\n/// sum to zero, and\
  \ false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>>\
  \ pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1,\
  \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n\
  /// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) ->\
  \ Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
  assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
  \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\n\
  assert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9,\
  \ -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) ==\
  \ true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l:\
  \ [-3, 9, -1, 4, 2, 31]) == false)"
completions: ["    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    // TODO: Implement me!\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var seen: Set<Int>\
    \ = []\n    for i in l {\n        if seen.contains(-i) {\n            return true\n\
    \        }\n        seen.insert(i)\n    }\n    return false", "    var seen =\
    \ Set<Int>()\n    for i in l {\n        if seen.contains(-i) {\n            return\
    \ true\n        }\n        seen.insert(i)\n    }\n    return false", "    var\
    \ dict: [Int: Int] = [:]\n    for i in l {\n        if dict[i] != nil {\n    \
    \        return true\n        }\n        dict[-i] = i\n    }\n    return false",
  "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n   \
    \         return true\n        }\n        set.insert(i)\n    }\n    return false",
  "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n   \
    \         return true\n        }\n        set.insert(i)\n    }\n    return false",
  "    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num) {\n\
    \            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set: Set<Int> = Set()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var seen: Set<Int> = []\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false", "    var s = Set<Int>()\n    for i in l {\n        if s.contains(-i)\
    \ {\n            return true\n        }\n        s.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", '    return false', "    var dict: [Int: Int] = [:]\n    for i in l\
    \ {\n        if dict[i] != nil {\n            return true\n        }\n       \
    \ dict[-i] = 1\n    }\n    return false", "    var set = Set<Int>()\n    for num\
    \ in l {\n        if set.contains(-num) {\n            return true\n        }\n\
    \        set.insert(num)\n    }\n    return false", "    var dict: [Int: Int]\
    \ = [:]\n    for i in l {\n        if dict[i] != nil {\n            return true\n\
    \        }\n        dict[-i] = 1\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var dict = [Int:\
    \ Int]()\n    for i in l {\n        if let _ = dict[i] {\n            return true\n\
    \        }\n        dict[-i] = 1\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var seen = Set<Int>()\n\
    \    for i in l {\n        if seen.contains(-i) {\n            return true\n \
    \       }\n        seen.insert(i)\n    }\n    return false", "    var seen = Set<Int>()\n\
    \    for i in l {\n        if seen.contains(-i) {\n            return true\n \
    \       }\n        seen.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for num in l {\n        if set.contains(-num) {\n            return true\n\
    \        }\n        set.insert(num)\n    }\n    return false", "    var set =\
    \ Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n            return\
    \ true\n        }\n        set.insert(i)\n    }\n    return false", "    var dict\
    \ = [Int: Int]()\n    for num in l {\n        if dict[num] != nil {\n        \
    \    return true\n        }\n        dict[-num] = 1\n    }\n    return false",
  "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n   \
    \         return true\n        }\n        set.insert(i)\n    }\n    return false",
  "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n   \
    \         return true\n        }\n        set.insert(i)\n    }\n    return false",
  "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n   \
    \         return true\n        }\n        set.insert(i)\n    }\n    return false",
  "    var dict = [Int: Int]()\n    for num in l {\n        if dict[num] != nil {\n\
    \            return true\n        }\n        dict[-num] = 1\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false", "    var seen = Set<Int>()\n    for x in l {\n        if seen.contains(-x)\
    \ {\n            return true\n        }\n        seen.insert(x)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false", "    var set: Set<Int> = Set()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var dict = [Int: Int]()\n    for i in l {\n        if dict[i] !=\
    \ nil {\n            return true\n        }\n        dict[-i] = 1\n    }\n   \
    \ return false", "    var l = l\n    l.sort()\n    var i = 0\n    var j = l.count\
    \ - 1\n    while i < j {\n        if l[i] + l[j] == 0 {\n            return true\n\
    \        } else if l[i] + l[j] < 0 {\n            i += 1\n        } else {\n \
    \           j -= 1\n        }\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for num in l {\n        if set.contains(-num) {\n            return true\n\
    \        }\n        set.insert(num)\n    }\n    return false", "    var set =\
    \ Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n            return\
    \ true\n        }\n        set.insert(i)\n    }\n    return false", "    var set:\
    \ Set<Int> = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n   \
    \         return true\n        }\n        set.insert(i)\n    }\n    return false",
  "    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i) {\n \
    \           return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false", "    var s = Set<Int>()\n    for i in l {\n        if s.contains(-i)\
    \ {\n            return true\n        }\n        s.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false", "    var dict = [Int: Int]()\n    for i in l {\n        if dict[i] !=\
    \ nil {\n            return true\n        }\n        dict[-i] = 1\n    }\n   \
    \ return false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var dict: [Int: Int] = [:]\n    for i in l {\n        if dict[i]\
    \ != nil {\n            return true\n        }\n        dict[-i] = i\n    }\n\
    \    return false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for n in l {\n        if set.contains(-n)\
    \ {\n            return true\n        }\n        set.insert(n)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var dict: [Int: Int] = [:]\n    for i in l {\n        if dict[i]\
    \ != nil {\n            return true\n        }\n        dict[-i] = 1\n    }\n\
    \    return false", "    // TODO: Implement this function\n    return false",
  "    var seen = Set<Int>()\n    for x in l {\n        if seen.contains(-x) {\n \
    \           return true\n        }\n        seen.insert(x)\n    }\n    return\
    \ false", "    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false", "    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var dict = [Int: Int]()\n    for i in l {\n        if dict[i] !=\
    \ nil {\n            return true\n        }\n        dict[-i] = 1\n    }\n   \
    \ return false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false", "    var set: Set<Int> = Set()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    // TODO: Implement me!\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var seen = Set<Int>()\n\
    \    for i in l {\n        if seen.contains(-i) {\n            return true\n \
    \       }\n        seen.insert(i)\n    }\n    return false", "    var dict: [Int:\
    \ Int] = [:]\n    for i in l {\n        if dict[i] != nil {\n            return\
    \ true\n        }\n        dict[-i] = 1\n    }\n    return false", "    var set\
    \ = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n            return\
    \ true\n        }\n        set.insert(i)\n    }\n    return false", "    var set\
    \ = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n            return\
    \ true\n        }\n        set.insert(i)\n    }\n    return false", "    var set\
    \ = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n            return\
    \ true\n        }\n        set.insert(i)\n    }\n    return false", "    var set\
    \ = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n            return\
    \ true\n        }\n        set.insert(i)\n    }\n    return false", "    var set\
    \ = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n            return\
    \ true\n        }\n        set.insert(i)\n    }\n    return false", "    var set\
    \ = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n            return\
    \ true\n        }\n        set.insert(i)\n    }\n    return false", '    return
    false', "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set: Set<Int> = Set()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set: Set<Int> = Set()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var seen: Set<Int> = []\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false", "    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false", "    var set: Set<Int> = Set()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set: Set<Int> = Set()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", '    return false', "    var seen: Set<Int> = []\n    for i in l {\n\
    \        if seen.contains(-i) {\n            return true\n        }\n        seen.insert(i)\n\
    \    }\n    return false", "    var seen = Set<Int>()\n    for i in l {\n    \
    \    if seen.contains(-i) {\n            return true\n        }\n        seen.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for num in l {\n   \
    \     if set.contains(-num) {\n            return true\n        }\n        set.insert(num)\n\
    \    }\n    return false", "    var dict = [Int: Int]()\n    for i in l {\n  \
    \      if dict[i] != nil {\n            return true\n        }\n        dict[-i]\
    \ = 1\n    }\n    return false", "    var set: Set<Int> = Set()\n    for i in\
    \ l {\n        if set.contains(-i) {\n            return true\n        }\n   \
    \     set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n   \
    \ for num in l {\n        if set.contains(-num) {\n            return true\n \
    \       }\n        set.insert(num)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var set = Set<Int>()\n\
    \    for i in l {\n        if set.contains(-i) {\n            return true\n  \
    \      }\n        set.insert(i)\n    }\n    return false", "    var dict = [Int:\
    \ Bool]()\n    for i in l {\n        if dict[i] != nil {\n            return true\n\
    \        }\n        dict[-i] = true\n    }\n    return false", "    var set =\
    \ Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n            return\
    \ true\n        }\n        set.insert(i)\n    }\n    return false", "    var set\
    \ = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n            return\
    \ true\n        }\n        set.insert(i)\n    }\n    return false", "    var set\
    \ = Set<Int>()\n    for num in l {\n        if set.contains(-num) {\n        \
    \    return true\n        }\n        set.insert(num)\n    }\n    return false",
  "    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i) {\n \
    \           return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false", "    var dict = [Int: Bool]()\n    for i in l {\n        if dict[i]\
    \ != nil {\n            return true\n        }\n        dict[-i] = true\n    }\n\
    \    return false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", '    return false', "    var set = Set<Int>()\n    for i in l {\n  \
    \      if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var s = Set<Int>()\n    for i in l {\n       \
    \ if s.contains(-i) {\n            return true\n        }\n        s.insert(i)\n\
    \    }\n    return false", "    var s = Set<Int>()\n    for i in l {\n       \
    \ if s.contains(-i) {\n            return true\n        }\n        s.insert(i)\n\
    \    }\n    return false", "    var seen = Set<Int>()\n    for i in l {\n    \
    \    if seen.contains(-i) {\n            return true\n        }\n        seen.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for num in l {\n   \
    \     if set.contains(-num) {\n            return true\n        }\n        set.insert(num)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var dict: [Int: Int] = [:]\n    for i in l {\n\
    \        if dict[i] != nil {\n            return true\n        }\n        dict[-i]\
    \ = 1\n    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n\
    \        if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set: Set<Int> = Set()\n    for i in l {\n\
    \        if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var set = Set<Int>()\n    for i in l {\n     \
    \   if set.contains(-i) {\n            return true\n        }\n        set.insert(i)\n\
    \    }\n    return false", "    var dict = [Int: Int]()\n    for num in l {\n\
    \        if dict[num] != nil {\n            return true\n        }\n        dict[-num]\
    \ = 1\n    }\n    return false", "    let set = Set(l)\n    for x in set {\n \
    \       if set.contains(-x) {\n            return true\n        }\n    }\n   \
    \ return false", "    var set = Set<Int>()\n    for num in l {\n        if set.contains(-num)\
    \ {\n            return true\n        }\n        set.insert(num)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false", "    // TODO: Implement this function\n    return false", "    var set\
    \ = Set<Int>()\n    for num in l {\n        if set.contains(-num) {\n        \
    \    return true\n        }\n        set.insert(num)\n    }\n    return false",
  "    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i) {\n \
    \           return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false", "    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false"]
stop_tokens:
- "\n}"
