language: swift
name: HumanEval_27_flip_case
results:
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isLowercase {\n            result.append(char.uppercased())\n    \
    \    } else {\n            result.append(char.lowercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isUppercase {\n\
    \            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplsmk_9pj.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = \"\"\n    for character in string {\n\
    \        if character.isUppercase {\n            newString.append(character.lowercased())\n\
    \        } else {\n            newString.append(character.uppercased())\n    \
    \    }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for character in string {\n\
    \        if character.isUppercase {\n            result.append(character.lowercased())\n\
    \        } else {\n            result.append(character.uppercased())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flippedString = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flippedString.append(char.lowercased())\n\
    \        } else {\n            flippedString.append(char.uppercased())\n     \
    \   }\n    }\n    return flippedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char.uppercased())\n    \
    \    }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isLowercase {\n            flipped.append(char.uppercased())\n  \
    \      } else {\n            flipped.append(char.lowercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = \"\"\n    for char in string {\n  \
    \      if char.isUppercase {\n            newString.append(char.lowercased())\n\
    \        } else {\n            newString.append(char.uppercased())\n        }\n\
    \    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isUppercase {\n\
    \            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplsmk_9pj.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = \"\"\n    for char in string {\n  \
    \      if char.isUppercase {\n            newString.append(char.lowercased())\n\
    \        } else {\n            newString.append(char.uppercased())\n        }\n\
    \    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isUppercase {\n\
    \            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplsmk_9pj.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isUppercase {\n\
    \            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplsmk_9pj.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isLowercase {\n\
    \            return $0.uppercased()\n        } else {\n            return $0.lowercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmping7nz6r.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isUppercase {\n\
    \            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplsmk_9pj.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isUppercase {\n\
    \            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplsmk_9pj.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char.uppercased())\n    \
    \    }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isLowercase {\n            flipped.append(char.uppercased())\n  \
    \      } else {\n            flipped.append(char.lowercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpltli3v31.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char.uppercased())\n    \
    \    }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lowercase = CharacterSet.lowercaseLetters\n   \
    \ let uppercase = CharacterSet.uppercaseLetters\n    var newString = \"\"\n  \
    \  for char in string.characters {\n        if lowercase.contains(UnicodeScalar(String(char))!)\
    \ {\n            newString.append(char.uppercased())\n        } else if uppercase.contains(UnicodeScalar(String(char))!)\
    \ {\n            newString.append(char.lowercased())\n        } else {\n     \
    \       newString.append(char)\n        }\n    }\n    return newString\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpa9ml38k8.swift:6:21: error: cannot find 'CharacterSet' in scope\n\
    \    let lowercase = CharacterSet.lowercaseLetters\n                    ^~~~~~~~~~~~\n\
    /tmp/tmpa9ml38k8.swift:7:21: error: cannot find 'CharacterSet' in scope\n    let\
    \ uppercase = CharacterSet.uppercaseLetters\n                    ^~~~~~~~~~~~\n\
    /tmp/tmpa9ml38k8.swift:9:24: error: 'characters' is unavailable: Please use String\
    \ directly\n    for char in string.characters {\n                       ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char.uppercased())\n    \
    \    }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map({ $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpmfspvc39.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map({ $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() })\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isUppercase {\n\
    \            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplsmk_9pj.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flippedString = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flippedString.append(char.lowercased())\n\
    \        } else {\n            flippedString.append(char.uppercased())\n     \
    \   }\n    }\n    return flippedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isUppercase {\n\
    \            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplsmk_9pj.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isUppercase {\n\
    \            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplsmk_9pj.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char.uppercased())\n    \
    \    }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char.uppercased())\n    \
    \    }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char.uppercased())\n    \
    \    }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flippedString = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flippedString.append(char.lowercased())\n\
    \        } else {\n            flippedString.append(char.uppercased())\n     \
    \   }\n    }\n    return flippedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isUppercase {\n\
    \            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplsmk_9pj.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lowercase = CharacterSet.lowercaseLetters\n   \
    \ let uppercase = CharacterSet.uppercaseLetters\n    let flipped = string.unicodeScalars.map\
    \ {\n        if lowercase.contains($0) {\n            return Character(UnicodeScalar($0.value\
    \ - 32)!)\n        } else if uppercase.contains($0) {\n            return Character(UnicodeScalar($0.value\
    \ + 32)!)\n        } else {\n            return Character(UnicodeScalar($0.value)!)\n\
    \        }\n    }\n    return String(flipped)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp87qjmrw4.swift:6:21: error: cannot find 'CharacterSet' in scope\n\
    \    let lowercase = CharacterSet.lowercaseLetters\n                    ^~~~~~~~~~~~\n\
    /tmp/tmp87qjmrw4.swift:7:21: error: cannot find 'CharacterSet' in scope\n    let\
    \ uppercase = CharacterSet.uppercaseLetters\n                    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { char in\n        if char.isUppercase\
    \ {\n            return char.lowercased()\n        } else {\n            return\
    \ char.uppercased()\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpa879whc8.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { char in\n \
    \          ~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped = \"\"\n    for char in string {\n    \
    \    if char.isUppercase {\n            flipped.append(char.lowercased())\n  \
    \      } else {\n            flipped.append(char.uppercased())\n        }\n  \
    \  }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isLowercase ? $0.uppercased()\
    \ : $0.lowercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4_7lqjo.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        if $0.isUppercase {\n\
    \            return $0.lowercased()\n        } else {\n            return $0.uppercased()\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmplsmk_9pj.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map {\n         \
    \  ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flippedString = \"\"\n    for character in string\
    \ {\n        if character.isUppercase {\n            flippedString.append(character.lowercased())\n\
    \        } else {\n            flippedString.append(character.uppercased())\n\
    \        }\n    }\n    return flippedString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for char in string {\n\
    \        if char.isUppercase {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char.uppercased())\n    \
    \    }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    let lowercase = CharacterSet.lowercaseLetters\n   \
    \ let uppercase = CharacterSet.uppercaseLetters\n    var newString = \"\"\n  \
    \  for char in string.unicodeScalars {\n        if lowercase.contains(char) {\n\
    \            newString.append(Character(char).uppercased())\n        } else if\
    \ uppercase.contains(char) {\n            newString.append(Character(char).lowercased())\n\
    \        } else {\n            newString.append(Character(char))\n        }\n\
    \    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp2c4g76ec.swift:6:21: error: cannot find 'CharacterSet' in scope\n\
    \    let lowercase = CharacterSet.lowercaseLetters\n                    ^~~~~~~~~~~~\n\
    /tmp/tmp2c4g76ec.swift:7:21: error: cannot find 'CharacterSet' in scope\n    let\
    \ uppercase = CharacterSet.uppercaseLetters\n                    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for char in string {\n     \
    \   if char.isUppercase {\n            result.append(char.lowercased())\n    \
    \    } else {\n            result.append(char.uppercased())\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824428
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased() }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp6hcw1kte.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased() }\n           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824428
