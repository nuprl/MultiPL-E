language: swift
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp4lr0fcvf/tmp4lr0fcvf.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51c78c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51c75bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51c75ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51c75b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lr0fcvf                        0x000055af414d5461 <unavailable> + 5217

    5    libc.so.6                          0x00002b51c7aaf460 __libc_start_main +
    245

    6    tmp4lr0fcvf                        0x000055af414d4f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var characters = Set<Character>()\n    for character in\
    \ string {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpg4m655lr/tmpg4m655lr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fe80c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fe7dbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fe7dba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fe7db97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg4m655lr                        0x0000560b746135f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b3fe82af460 __libc_start_main +
    245

    6    tmpg4m655lr                        0x0000560b74613129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercaseString = string.lowercased()\n    let characters\
    \ = Array(lowercaseString)\n    let distinctCharacters = Set(characters)\n   \
    \ return distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp4lr0fcvf/tmp4lr0fcvf.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51c78c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51c75bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51c75ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51c75b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lr0fcvf                        0x000055af414d5461 <unavailable> + 5217

    5    libc.so.6                          0x00002b51c7aaf460 __libc_start_main +
    245

    6    tmp4lr0fcvf                        0x000055af414d4f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6yn5uwzr/tmp6yn5uwzr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dda902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dda5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dda5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dda5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yn5uwzr                        0x00005597bd2715f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b2ddaaee460 __libc_start_main +
    245

    6    tmp6yn5uwzr                        0x00005597bd271129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacters = Set<Character>()\n    for character\
    \ in string {\n        distinctCharacters.insert(character)\n    }\n    return\
    \ distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpra5o4620/tmpra5o4620.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b711e4a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b711e19fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b711e19f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b711e19e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpra5o4620                        0x000055e06cb1b5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b711e694460 __libc_start_main +
    245

    6    tmpra5o4620                        0x000055e06cb1b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    let set = Set(lowercase)\n\
    \    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var characters = Set<Character>()\n    for character in\
    \ string {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpg4m655lr/tmpg4m655lr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fe80c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fe7dbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fe7dba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fe7db97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg4m655lr                        0x0000560b746135f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b3fe82af460 __libc_start_main +
    245

    6    tmpg4m655lr                        0x0000560b74613129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6yn5uwzr/tmp6yn5uwzr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dda902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dda5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dda5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dda5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yn5uwzr                        0x00005597bd2715f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b2ddaaee460 __libc_start_main +
    245

    6    tmp6yn5uwzr                        0x00005597bd271129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    var set = Set<Character>()\n\
    \    for char in lowercase {\n        set.insert(char)\n    }\n    return set.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    let set = Set(lowercase)\n\
    \    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var count = 0\n    var set = Set<Character>()\n    for\
    \ char in string {\n        if !set.contains(char) {\n            set.insert(char)\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmppru4yuz0/tmppru4yuz0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06b821ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06b7f15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06b7f15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06b7f147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppru4yuz0                        0x000055e9466e4601 <unavailable> + 5633

    5    libc.so.6                          0x00002b06b840a460 __libc_start_main +
    245

    6    tmppru4yuz0                        0x000055e9466e4139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var characters = Set<Character>()\n    for char in string\
    \ {\n        characters.insert(char)\n    }\n    return characters.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpqhol7uyi/tmpqhol7uyi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b986eecbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b986ebc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b986ebc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b986ebc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhol7uyi                        0x0000562c2ea5a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b986f0b7460 __libc_start_main +
    245

    6    tmpqhol7uyi                        0x0000562c2ea5a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    var set = Set<Character>()\n\
    \    for char in lowercase {\n        set.insert(char)\n    }\n    return set.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let set = Set(string.lowercased())\n    return set.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercaseString = string.lowercased()\n    var distinctCharacters\
    \ = Set<Character>()\n    for character in lowercaseString {\n        distinctCharacters.insert(character)\n\
    \    }\n    return distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var dict = [Character: Int]()\n    for char in string\
    \ {\n        dict[char] = 1\n    }\n    return dict.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp1gvyk5f1/tmp1gvyk5f1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff02d1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff02a11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff02a11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff02a107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1gvyk5f1                        0x000056121acfc5d1 <unavailable> + 5585

    5    libc.so.6                          0x00002aff02f06460 __libc_start_main +
    245

    6    tmp1gvyk5f1                        0x000056121acfc109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var characters = Set<Character>()\n    for character in\
    \ string {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpg4m655lr/tmpg4m655lr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fe80c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fe7dbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fe7dba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fe7db97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg4m655lr                        0x0000560b746135f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b3fe82af460 __libc_start_main +
    245

    6    tmpg4m655lr                        0x0000560b74613129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    let distinctCharacters\
    \ = Set(lowercase)\n    return distinctCharacters.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6yn5uwzr/tmp6yn5uwzr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dda902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dda5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dda5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dda5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yn5uwzr                        0x00005597bd2715f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b2ddaaee460 __libc_start_main +
    245

    6    tmp6yn5uwzr                        0x00005597bd271129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let characters = string.lowercased().characters\n    var\
    \ uniqueCharacters = Set<Character>()\n    for character in characters {\n   \
    \     uniqueCharacters.insert(character)\n    }\n    return uniqueCharacters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmp2w2er2j9.swift:8:42: error: 'characters' is unavailable: Please\
    \ use String directly\n    let characters = string.lowercased().characters\n \
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercaseString = string.lowercased()\n    let distinctCharacters\
    \ = Set(lowercaseString)\n    return distinctCharacters.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 1
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().characters.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: SyntaxError
  stderr: "/tmp/tmpismj3cn0.swift:8:32: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.lowercased().characters.count\n     \
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    let set = Set(lowercase)\n\
    \    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    let set = Set(lowercase)\n\
    \    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    let set = Set(lowercase)\n\
    \    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacters = Set<Character>()\n    for character\
    \ in string {\n        distinctCharacters.insert(character)\n    }\n    return\
    \ distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpra5o4620/tmpra5o4620.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b711e4a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b711e19fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b711e19f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b711e19e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpra5o4620                        0x000055e06cb1b5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b711e694460 __libc_start_main +
    245

    6    tmpra5o4620                        0x000055e06cb1b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    let characters\
    \ = Set(lowercase)\n    return characters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6yn5uwzr/tmp6yn5uwzr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dda902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dda5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dda5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dda5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yn5uwzr                        0x00005597bd2715f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b2ddaaee460 __libc_start_main +
    245

    6    tmp6yn5uwzr                        0x00005597bd271129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    var count = 0\n\
    \    var characters = Set<Character>()\n    for char in lowercase {\n        if\
    \ !characters.contains(char) {\n            characters.insert(char)\n        \
    \    count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct_characters: Set<Character> = []\n    for\
    \ character in string {\n        distinct_characters.insert(character)\n    }\n\
    \    return distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmppc6x161h/tmppc6x161h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e52160c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e51e57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e51e57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e51e567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc6x161h                        0x000056034687b671 <unavailable> + 5745

    5    libc.so.6                          0x00002b0e5234c460 __libc_start_main +
    245

    6    tmppc6x161h                        0x000056034687b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp4lr0fcvf/tmp4lr0fcvf.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51c78c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51c75bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51c75ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51c75b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lr0fcvf                        0x000055af414d5461 <unavailable> + 5217

    5    libc.so.6                          0x00002b51c7aaf460 __libc_start_main +
    245

    6    tmp4lr0fcvf                        0x000055af414d4f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6yn5uwzr/tmp6yn5uwzr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dda902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dda5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dda5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dda5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yn5uwzr                        0x00005597bd2715f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b2ddaaee460 __libc_start_main +
    245

    6    tmp6yn5uwzr                        0x00005597bd271129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    let set = Set(lowercase)\n\
    \    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return string.lowercased().count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp4lr0fcvf/tmp4lr0fcvf.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51c78c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51c75bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51c75ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51c75b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lr0fcvf                        0x000055af414d5461 <unavailable> + 5217

    5    libc.so.6                          0x00002b51c7aaf460 __libc_start_main +
    245

    6    tmp4lr0fcvf                        0x000055af414d4f99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercaseString = string.lowercased()\n    let distinctCharacters\
    \ = Set(lowercaseString)\n    return distinctCharacters.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    let set = Set(lowercase)\n\
    \    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for c in string {\n  \
    \      set.insert(c)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpp0yhnlr0/tmpp0yhnlr0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add467aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add464a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add464a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add464a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0yhnlr0                        0x0000561cd44c15f1 <unavailable> + 5617

    5    libc.so.6                          0x00002add46996460 __libc_start_main +
    245

    6    tmpp0yhnlr0                        0x0000561cd44c1129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var characters = Set<Character>()\n    for char in string\
    \ {\n        characters.insert(char)\n    }\n    return characters.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpqhol7uyi/tmpqhol7uyi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b986eecbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b986ebc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b986ebc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b986ebc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhol7uyi                        0x0000562c2ea5a5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b986f0b7460 __libc_start_main +
    245

    6    tmpqhol7uyi                        0x0000562c2ea5a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercaseString = string.lowercased()\n    var characters\
    \ = Set<Character>()\n    for char in lowercaseString {\n        characters.insert(char)\n\
    \    }\n    return characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var characters = Set<Character>()\n    for character in\
    \ string {\n        characters.insert(character)\n    }\n    return characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpg4m655lr/tmpg4m655lr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fe80c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fe7dbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fe7dba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fe7db97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg4m655lr                        0x0000560b746135f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b3fe82af460 __libc_start_main +
    245

    6    tmpg4m655lr                        0x0000560b74613129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct_characters = Set<Character>()\n    for character\
    \ in string {\n        distinct_characters.insert(character)\n    }\n    return\
    \ distinct_characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6yn5uwzr/tmp6yn5uwzr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dda902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dda5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dda5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dda5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yn5uwzr                        0x00005597bd2715f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b2ddaaee460 __libc_start_main +
    245

    6    tmp6yn5uwzr                        0x00005597bd271129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharSet = Set<Character>()\n    for char in\
    \ string {\n        distinctCharSet.insert(char)\n    }\n    return distinctCharSet.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmptlkea0vw/tmptlkea0vw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b872e352c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b872e049b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b872e049988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b872e0487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlkea0vw                        0x00005616143925f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b872e53e460 __libc_start_main +
    245

    6    tmptlkea0vw                        0x0000561614392129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    var distinctCharacters\
    \ = Set<Character>()\n    for character in lowercase {\n        distinctCharacters.insert(character)\n\
    \    }\n    return distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinctCharacters = Set<Character>()\n    for character\
    \ in string {\n        distinctCharacters.insert(character)\n    }\n    return\
    \ distinctCharacters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpra5o4620/tmpra5o4620.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b711e4a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b711e19fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b711e19f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b711e19e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpra5o4620                        0x000055e06cb1b5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b711e694460 __libc_start_main +
    245

    6    tmpra5o4620                        0x000055e06cb1b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct_characters = Set<Character>()\n    for char\
    \ in string {\n        distinct_characters.insert(char)\n    }\n    return distinct_characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpem5s45rf/tmpem5s45rf.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae3c7d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae3c4c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae3c4c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae3c4c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpem5s45rf                        0x000055d7105fd5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002aae3c9bc460 __libc_start_main +
    245

    6    tmpem5s45rf                        0x000055d7105fd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var set = Set<Character>()\n    for char in string {\n\
    \        set.insert(char)\n    }\n    return set.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmp6b5yjfok/tmp6b5yjfok.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47892e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4788fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4788fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4788fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5yjfok                        0x000055e82cd9c5f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b47894d5460 __libc_start_main +
    245

    6    tmp6b5yjfok                        0x000055e82cd9c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    return Set(string.lowercased()).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_distinct_characters(string: \"\") == 0)\nassert(count_distinct_characters(string:\
    \ \"abcde\") == 5)\nassert(count_distinct_characters(string: \"abcdecadeCADE\"\
    ) == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\") == 1)\nassert(count_distinct_characters(string:\
    \ \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: 0
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    let lowercase = string.lowercased()\n    let set = Set(lowercase)\n\
    \    return set.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_distinct_characters(string:\
    \ \"\") == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014023
- exit_code: -4
  program: "\n/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\"\
    )\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string:\
    \ String) -> Int {\n    var distinct = Set<Character>()\n    for char in string\
    \ {\n        distinct.insert(char)\n    }\n    return distinct.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_distinct_characters(string: \"\") == 0)\n\
    assert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
    \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
    ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
  status: Exception
  stderr: 'tmpgihgd3sw/tmpgihgd3sw.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61580f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6157dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6157ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6157dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgihgd3sw                        0x000055d84b1b05f1 <unavailable> + 5617

    5    libc.so.6                          0x00002b61582e2460 __libc_start_main +
    245

    6    tmpgihgd3sw                        0x000055d84b1b0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014023
