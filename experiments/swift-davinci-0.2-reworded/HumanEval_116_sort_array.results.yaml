language: swift
name: HumanEval_116_sort_array
results:
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpo4bffru5/tmpo4bffru5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ef5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ef2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ef2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ef2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4bffru5                        0x00005623360af59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab6ef7b8460 __libc_start_main +
    245

    6    tmpo4bffru5                        0x00005623360af039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpo4bffru5/tmpo4bffru5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ef5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ef2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ef2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ef2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4bffru5                        0x00005623360af59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab6ef7b8460 __libc_start_main +
    245

    6    tmpo4bffru5                        0x00005623360af039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = String(a, radix: 2).filter { $0 == \"1\" }.count\n \
    \       let bOnes = String(b, radix: 2).filter { $0 == \"1\" }.count\n       \
    \ return aOnes == bOnes ? a < b : aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        return\
    \ a.filter { $0 == \"1\" }.count < b.filter { $0 == \"1\" }.count\n          \
    \  || (a.filter { $0 == \"1\" }.count == b.filter { $0 == \"1\" }.count && $0\
    \ < $1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = String(a, radix: 2).filter { $0 == \"1\" }.count\n \
    \       let bOnes = String(b, radix: 2).filter { $0 == \"1\" }.count\n       \
    \ return aOnes == bOnes ? a < b : aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ ones = $0.nonzeroBitCount\n        let ones2 = $1.nonzeroBitCount\n        if\
    \ ones == ones2 {\n            return $0 < $1\n        }\n        return ones\
    \ < ones2\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4fwneoc8/tmp4fwneoc8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b575bd1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b575ba13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b575ba13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b575ba127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fwneoc8                        0x000055728316159b <unavailable> + 5531

    5    libc.so.6                          0x00002b575bf08460 __libc_start_main +
    245

    6    tmp4fwneoc8                        0x0000557283161039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsOnes = lhs.numberOfOnes\n        let rhsOnes = rhs.numberOfOnes\n\
    \        if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n  \
    \      return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpz4ow5b2q.swift:14:27: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let lhsOnes = lhs.numberOfOnes\n                   \
    \   ~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsOnes = lhs.nonzeroBitCount\n        let rhsOnes = rhs.nonzeroBitCount\n\
    \        if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n  \
    \      return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqau1z0rd/tmpqau1z0rd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4e0d36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4e0a2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4e0a2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4e0a2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqau1z0rd                        0x0000560722a6459b <unavailable> + 5531

    5    libc.so.6                          0x00002ae4e0f22460 __libc_start_main +
    245

    6    tmpqau1z0rd                        0x0000560722a64039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let ones1\
    \ = $0.nonzeroBitCount\n        let ones2 = $1.nonzeroBitCount\n        return\
    \ ones1 == ones2 ? $0 < $1 : ones1 < ones2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpami_n_ik/tmpami_n_ik.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e6b3d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e6b0d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e6b0d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e6b0cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpami_n_ik                        0x0000563dbaa7559b <unavailable> + 5531

    5    libc.so.6                          0x00002b7e6b5c5460 __libc_start_main +
    245

    6    tmpami_n_ik                        0x0000563dbaa75039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.onesCount\n        let bOnes = b.onesCount\n     \
    \   if aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptzlp9u3j.swift:14:23: error: value of type 'Int' has no member\
    \ 'onesCount'\n        let aOnes = a.onesCount\n                    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let (a1,\
    \ a2) = ($0, $1)\n        let (b1, b2) = (String($0, radix: 2), String($1, radix:\
    \ 2))\n        return b1.filter { $0 == \"1\" }.count == b2.filter { $0 == \"\
    1\" }.count ? a1 < a2 : b1.filter { $0 == \"1\" }.count < b2.filter { $0 == \"\
    1\" }.count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.onesCount\n        let bOnes = b.onesCount\n     \
    \   if aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptzlp9u3j.swift:14:23: error: value of type 'Int' has no member\
    \ 'onesCount'\n        let aOnes = a.onesCount\n                    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpo4bffru5/tmpo4bffru5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ef5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ef2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ef2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ef2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4bffru5                        0x00005623360af59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab6ef7b8460 __libc_start_main +
    245

    6    tmpo4bffru5                        0x00005623360af039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsBinary = String(lhs, radix: 2)\n        let rhsBinary\
    \ = String(rhs, radix: 2)\n        let lhsOnes = lhsBinary.filter { $0 == \"1\"\
    \ }.count\n        let rhsOnes = rhsBinary.filter { $0 == \"1\" }.count\n    \
    \    if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n      \
    \  return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsOnes = lhs.nonzeroBitCount\n        let rhsOnes = rhs.nonzeroBitCount\n\
    \        if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n  \
    \      return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqau1z0rd/tmpqau1z0rd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4e0d36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4e0a2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4e0a2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4e0a2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqau1z0rd                        0x0000560722a6459b <unavailable> + 5531

    5    libc.so.6                          0x00002ae4e0f22460 __libc_start_main +
    245

    6    tmpqau1z0rd                        0x0000560722a64039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        if $0.nonzeroBitCount\
    \ == $1.nonzeroBitCount {\n            return $0 < $1\n        }\n        return\
    \ $0.nonzeroBitCount < $1.nonzeroBitCount\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp9yldpcw7/tmp9yldpcw7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53e8558c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53e824fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53e824f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53e824e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yldpcw7                        0x000055a67156d59b <unavailable> + 5531

    5    libc.so.6                          0x00002b53e8744460 __libc_start_main +
    245

    6    tmp9yldpcw7                        0x000055a67156d039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let lhsBinary\
    \ = String(lhs, radix: 2)\n        let rhsBinary = String(rhs, radix: 2)\n   \
    \     if lhsBinary.filter({ $0 == \"1\" }).count == rhsBinary.filter({ $0 == \"\
    1\" }).count {\n            return lhs < rhs\n        }\n        return lhsBinary.filter({\
    \ $0 == \"1\" }).count < rhsBinary.filter({ $0 == \"1\" }).count\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp2r1k8b8v.swift:14:32: error: cannot find 'lhs' in scope\n     \
    \   let lhsBinary = String(lhs, radix: 2)\n                               ^~~\n\
    /tmp/tmp2r1k8b8v.swift:15:32: error: cannot find 'rhs' in scope\n        let rhsBinary\
    \ = String(rhs, radix: 2)\n                               ^~~\n/tmp/tmp2r1k8b8v.swift:17:20:\
    \ error: cannot find 'lhs' in scope\n            return lhs < rhs\n          \
    \         ^~~\n/tmp/tmp2r1k8b8v.swift:17:26: error: cannot find 'rhs' in scope\n\
    \            return lhs < rhs\n                         ^~~\n"
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let lhsOnes\
    \ = $0.nonzeroBitCount\n        let rhsOnes = $1.nonzeroBitCount\n        if lhsOnes\
    \ == rhsOnes {\n            return $0 < $1\n        }\n        return lhsOnes\
    \ < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpfi7u51ul/tmpfi7u51ul.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba19ca74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba19c76bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba19c76b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba19c76a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfi7u51ul                        0x00005629daf2259b <unavailable> + 5531

    5    libc.so.6                          0x00002ba19cc60460 __libc_start_main +
    245

    6    tmpfi7u51ul                        0x00005629daf22039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsOnes = lhs.nonzeroBitCount\n        let rhsOnes = rhs.nonzeroBitCount\n\
    \        if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n  \
    \      return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqau1z0rd/tmpqau1z0rd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4e0d36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4e0a2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4e0a2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4e0a2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqau1z0rd                        0x0000560722a6459b <unavailable> + 5531

    5    libc.so.6                          0x00002ae4e0f22460 __libc_start_main +
    245

    6    tmpqau1z0rd                        0x0000560722a64039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        return\
    \ a.filter { $0 == \"1\" }.count == b.filter { $0 == \"1\" }.count ? $0 < $1 :\
    \ a.filter { $0 == \"1\" }.count < b.filter { $0 == \"1\" }.count\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        if a.nonzeroBitCount == b.nonzeroBitCount {\n            return\
    \ a < b\n        }\n        return a.nonzeroBitCount < b.nonzeroBitCount\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpj7pztole/tmpj7pztole.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac174a41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac174738b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac174738988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1747377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj7pztole                        0x000056189793259b <unavailable> + 5531

    5    libc.so.6                          0x00002ac174c2d460 __libc_start_main +
    245

    6    tmpj7pztole                        0x0000561897932039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsOnes = lhs.nonzeroBitCount\n        let rhsOnes = rhs.nonzeroBitCount\n\
    \        if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n  \
    \      return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqau1z0rd/tmpqau1z0rd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4e0d36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4e0a2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4e0a2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4e0a2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqau1z0rd                        0x0000560722a6459b <unavailable> + 5531

    5    libc.so.6                          0x00002ae4e0f22460 __libc_start_main +
    245

    6    tmpqau1z0rd                        0x0000560722a64039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = String(a, radix: 2).filter { $0 == \"1\" }.count\n \
    \       let bOnes = String(b, radix: 2).filter { $0 == \"1\" }.count\n       \
    \ if aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsBinary = String(lhs, radix: 2)\n        let rhsBinary\
    \ = String(rhs, radix: 2)\n        let lhsOnes = lhsBinary.filter { $0 == \"1\"\
    \ }.count\n        let rhsOnes = rhsBinary.filter { $0 == \"1\" }.count\n    \
    \    if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n      \
    \  return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        return\
    \ a.filter({ $0 == \"1\" }).count < b.filter({ $0 == \"1\" }).count\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpi7bj4_bf/tmpi7bj4_bf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a94c92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a94989b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a94989988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a949887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7bj4_bf                        0x00005643686b4714 <unavailable> + 5908

    5    libc.so.6                          0x00002b9a94e7e460 __libc_start_main +
    245

    6    tmpi7bj4_bf                        0x00005643686b42f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpo4bffru5/tmpo4bffru5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ef5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ef2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ef2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ef2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4bffru5                        0x00005623360af59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab6ef7b8460 __libc_start_main +
    245

    6    tmpo4bffru5                        0x00005623360af039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter({ $0 == \"1\" }).count\n        let b = String($1,\
    \ radix: 2).filter({ $0 == \"1\" }).count\n        return a < b || (a == b &&\
    \ $0 < $1)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsOnes = lhs.nonzeroBitCount\n        let rhsOnes = rhs.nonzeroBitCount\n\
    \        if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n  \
    \      return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqau1z0rd/tmpqau1z0rd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4e0d36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4e0a2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4e0a2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4e0a2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqau1z0rd                        0x0000560722a6459b <unavailable> + 5531

    5    libc.so.6                          0x00002ae4e0f22460 __libc_start_main +
    245

    6    tmpqau1z0rd                        0x0000560722a64039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = String(a, radix: 2).filter { $0 == \"1\" }.count\n \
    \       let bOnes = String(b, radix: 2).filter { $0 == \"1\" }.count\n       \
    \ return aOnes == bOnes ? a < b : aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter({ $0 == \"1\" }).count\n        let b = String($1,\
    \ radix: 2).filter({ $0 == \"1\" }).count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let aBits\
    \ = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let bBits = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return aBits < bBits || (aBits\
    \ == bBits && $0 < $1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824609
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsOnes = lhs.nonzeroBitCount\n        let rhsOnes = rhs.nonzeroBitCount\n\
    \        if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n  \
    \      return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqau1z0rd/tmpqau1z0rd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4e0d36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4e0a2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4e0a2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4e0a2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqau1z0rd                        0x0000560722a6459b <unavailable> + 5531

    5    libc.so.6                          0x00002ae4e0f22460 __libc_start_main +
    245

    6    tmpqau1z0rd                        0x0000560722a64039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpo4bffru5/tmpo4bffru5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ef5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ef2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ef2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ef2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4bffru5                        0x00005623360af59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab6ef7b8460 __libc_start_main +
    245

    6    tmpo4bffru5                        0x00005623360af039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBits = String(a, radix: 2)\n        let bBits = String(b, radix:\
    \ 2)\n        let aOnes = aBits.filter { $0 == \"1\" }.count\n        let bOnes\
    \ = bBits.filter { $0 == \"1\" }.count\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let lhsOnes\
    \ = $0.nonzeroBitCount\n        let rhsOnes = $1.nonzeroBitCount\n        if lhsOnes\
    \ == rhsOnes {\n            return $0 < $1\n        }\n        return lhsOnes\
    \ < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpfi7u51ul/tmpfi7u51ul.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba19ca74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba19c76bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba19c76b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba19c76a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfi7u51ul                        0x00005629daf2259b <unavailable> + 5531

    5    libc.so.6                          0x00002ba19cc60460 __libc_start_main +
    245

    6    tmpfi7u51ul                        0x00005629daf22039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        if $0.nonzeroBitCount\
    \ == $1.nonzeroBitCount {\n            return $0 < $1\n        }\n        return\
    \ $0.nonzeroBitCount < $1.nonzeroBitCount\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp9yldpcw7/tmp9yldpcw7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53e8558c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53e824fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53e824f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53e824e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yldpcw7                        0x000055a67156d59b <unavailable> + 5531

    5    libc.so.6                          0x00002b53e8744460 __libc_start_main +
    245

    6    tmp9yldpcw7                        0x000055a67156d039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter({ $0 == \"1\" }).count\n        let b = String($1,\
    \ radix: 2).filter({ $0 == \"1\" }).count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsBinary = String(lhs, radix: 2)\n        let rhsBinary\
    \ = String(rhs, radix: 2)\n        let lhsOnes = lhsBinary.filter { $0 == \"1\"\
    \ }.count\n        let rhsOnes = rhsBinary.filter { $0 == \"1\" }.count\n    \
    \    if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n      \
    \  return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.onesCount\n        let bOnes = b.onesCount\n     \
    \   if aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptzlp9u3j.swift:14:23: error: value of type 'Int' has no member\
    \ 'onesCount'\n        let aOnes = a.onesCount\n                    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.numberOfOnes\n        let bOnes = b.numberOfOnes\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpftvo92sl.swift:14:23: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let aOnes = a.numberOfOnes\n                    ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ ones = $0.nonzeroBitCount\n        let otherOnes = $1.nonzeroBitCount\n    \
    \    if ones == otherOnes {\n            return $0 < $1\n        }\n        return\
    \ ones < otherOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpd6wnjg_z/tmpd6wnjg_z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4540adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac453da4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac453da4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac453da37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6wnjg_z                        0x000055b86ff4459b <unavailable> + 5531

    5    libc.so.6                          0x00002ac454299460 __libc_start_main +
    245

    6    tmpd6wnjg_z                        0x000055b86ff44039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsOnes = lhs.nonzeroBitCount\n        let rhsOnes = rhs.nonzeroBitCount\n\
    \        if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n  \
    \      return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqau1z0rd/tmpqau1z0rd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4e0d36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4e0a2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4e0a2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4e0a2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqau1z0rd                        0x0000560722a6459b <unavailable> + 5531

    5    libc.so.6                          0x00002ae4e0f22460 __libc_start_main +
    245

    6    tmpqau1z0rd                        0x0000560722a64039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let ones1\
    \ = $0.nonzeroBitCount\n        let ones2 = $1.nonzeroBitCount\n        if ones1\
    \ == ones2 {\n            return $0 < $1\n        }\n        return ones1 < ones2\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp83zpns_4/tmp83zpns_4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bfedfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bfeaf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bfeaf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bfeaf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp83zpns_4                        0x000055eccbec159b <unavailable> + 5531

    5    libc.so.6                          0x00002b0bfefe9460 __libc_start_main +
    245

    6    tmp83zpns_4                        0x000055eccbec1039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = String(a, radix: 2).filter { $0 == \"1\" }.count\n \
    \       let bOnes = String(b, radix: 2).filter { $0 == \"1\" }.count\n       \
    \ if aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsBinary = String(lhs, radix: 2)\n        let rhsBinary\
    \ = String(rhs, radix: 2)\n        let lhsOnes = lhsBinary.filter { $0 == \"1\"\
    \ }.count\n        let rhsOnes = rhsBinary.filter { $0 == \"1\" }.count\n    \
    \    return lhsOnes == rhsOnes ? lhs < rhs : lhsOnes < rhsOnes\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824609
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    let sorted = arr.sorted { (a, b) ->\
    \ Bool in\n        let aOnes = a.numberOfOnes\n        let bOnes = b.numberOfOnes\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpv_9xg3ue.swift:14:23: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let aOnes = a.numberOfOnes\n                    ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpo4bffru5/tmpo4bffru5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ef5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ef2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ef2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ef2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4bffru5                        0x00005623360af59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab6ef7b8460 __libc_start_main +
    245

    6    tmpo4bffru5                        0x00005623360af039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aBin = String(a, radix: 2)\n        let bBin = String(b,\
    \ radix: 2)\n        let aOnes = aBin.filter({ $0 == \"1\" }).count\n        let\
    \ bOnes = bBin.filter({ $0 == \"1\" }).count\n        if aOnes == bOnes {\n  \
    \          return a < b\n        }\n        return aOnes < bOnes\n    })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824609
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    result.sort\
    \ { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes\
    \ = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpndwschp7/tmpndwschp7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3b86bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3b83b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3b83b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3b83b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpndwschp7                        0x0000562d6b0f65ab <unavailable> + 5547

    5    libc.so.6                          0x00002ab3b88a9460 __libc_start_main +
    245

    6    tmpndwschp7                        0x0000562d6b0f6049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let lhsOnes\
    \ = $0.nonzeroBitCount\n        let rhsOnes = $1.nonzeroBitCount\n        if lhsOnes\
    \ == rhsOnes {\n            return $0 < $1\n        }\n        return lhsOnes\
    \ < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpfi7u51ul/tmpfi7u51ul.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba19ca74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba19c76bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba19c76b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba19c76a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfi7u51ul                        0x00005629daf2259b <unavailable> + 5531

    5    libc.so.6                          0x00002ba19cc60460 __libc_start_main +
    245

    6    tmpfi7u51ul                        0x00005629daf22039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpo4bffru5/tmpo4bffru5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ef5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ef2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ef2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ef2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4bffru5                        0x00005623360af59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab6ef7b8460 __libc_start_main +
    245

    6    tmpo4bffru5                        0x00005623360af039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpo4bffru5/tmpo4bffru5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ef5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ef2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ef2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ef2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4bffru5                        0x00005623360af59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab6ef7b8460 __libc_start_main +
    245

    6    tmpo4bffru5                        0x00005623360af039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let lhsOnes\
    \ = $0.nonzeroBitCount\n        let rhsOnes = $1.nonzeroBitCount\n        if lhsOnes\
    \ == rhsOnes {\n            return $0 < $1\n        }\n        return lhsOnes\
    \ < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpfi7u51ul/tmpfi7u51ul.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba19ca74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba19c76bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba19c76b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba19c76a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfi7u51ul                        0x00005629daf2259b <unavailable> + 5531

    5    libc.so.6                          0x00002ba19cc60460 __libc_start_main +
    245

    6    tmpfi7u51ul                        0x00005629daf22039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    var result = arr\n    result.sort\
    \ { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes\
    \ = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpndwschp7/tmpndwschp7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3b86bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3b83b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3b83b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3b83b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpndwschp7                        0x0000562d6b0f65ab <unavailable> + 5547

    5    libc.so.6                          0x00002ab3b88a9460 __libc_start_main +
    245

    6    tmpndwschp7                        0x0000562d6b0f6049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpo4bffru5/tmpo4bffru5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ef5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ef2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ef2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ef2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4bffru5                        0x00005623360af59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab6ef7b8460 __libc_start_main +
    245

    6    tmpo4bffru5                        0x00005623360af039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let binary\
    \ = String($0, radix: 2)\n        let binary2 = String($1, radix: 2)\n       \
    \ let count = binary.filter { $0 == \"1\" }.count\n        let count2 = binary2.filter\
    \ { $0 == \"1\" }.count\n        if count == count2 {\n            return $0 <\
    \ $1\n        }\n        return count < count2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824609
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = String(a, radix: 2).filter { $0 == \"1\" }.count\n \
    \       let bOnes = String(b, radix: 2).filter { $0 == \"1\" }.count\n       \
    \ return aOnes == bOnes ? a < b : aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let ones1\
    \ = $0.nonzeroBitCount\n        let ones2 = $1.nonzeroBitCount\n        return\
    \ ones1 == ones2 ? $0 < $1 : ones1 < ones2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpami_n_ik/tmpami_n_ik.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e6b3d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e6b0d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e6b0d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e6b0cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpami_n_ik                        0x0000563dbaa7559b <unavailable> + 5531

    5    libc.so.6                          0x00002b7e6b5c5460 __libc_start_main +
    245

    6    tmpami_n_ik                        0x0000563dbaa75039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsOnes = lhs.nonzeroBitCount\n        let rhsOnes = rhs.nonzeroBitCount\n\
    \        if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n  \
    \      return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqau1z0rd/tmpqau1z0rd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4e0d36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4e0a2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4e0a2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4e0a2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqau1z0rd                        0x0000560722a6459b <unavailable> + 5531

    5    libc.so.6                          0x00002ae4e0f22460 __libc_start_main +
    245

    6    tmpqau1z0rd                        0x0000560722a64039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        return aOnes == bOnes\
    \ ? a < b : aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824609
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = $0 < 0 ? -$0 : $0\n        let b = $1 < 0 ? -$1 : $1\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp6dsmg_bq/tmp6dsmg_bq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadbff72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadbfc69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadbfc69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadbfc687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6dsmg_bq                        0x0000561ba577c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aadc015e460 __libc_start_main +
    245

    6    tmp6dsmg_bq                        0x0000561ba577c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        return\
    \ a.filter { $0 == \"1\" }.count < b.filter { $0 == \"1\" }.count\n          \
    \  || (a.filter { $0 == \"1\" }.count == b.filter { $0 == \"1\" }.count && $0\
    \ < $1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsBinary = String(lhs, radix: 2)\n        let rhsBinary\
    \ = String(rhs, radix: 2)\n        let lhsOnes = lhsBinary.filter { $0 == \"1\"\
    \ }.count\n        let rhsOnes = rhsBinary.filter { $0 == \"1\" }.count\n    \
    \    if lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n      \
    \  return lhsOnes < rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpo4bffru5/tmpo4bffru5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ef5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ef2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ef2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ef2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4bffru5                        0x00005623360af59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab6ef7b8460 __libc_start_main +
    245

    6    tmpo4bffru5                        0x00005623360af039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = String(a, radix: 2).filter { $0 == \"1\" }.count\n \
    \       let bOnes = String(b, radix: 2).filter { $0 == \"1\" }.count\n       \
    \ if aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBits = String(a, radix: 2).components(separatedBy: \"1\").count\
    \ - 1\n        let bBits = String(b, radix: 2).components(separatedBy: \"1\").count\
    \ - 1\n        return aBits == bBits ? a < b : aBits < bBits\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpd0iq1i39.swift:14:41: error: value of type 'String' has no member\
    \ 'components'\n        let aBits = String(a, radix: 2).components(separatedBy:\
    \ \"1\").count - 1\n                    ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpo4bffru5/tmpo4bffru5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ef5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ef2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ef2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ef2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4bffru5                        0x00005623360af59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab6ef7b8460 __libc_start_main +
    245

    6    tmpo4bffru5                        0x00005623360af039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (lhs, rhs) ->\
    \ Bool in\n        let lhsOnes = lhs.nonzeroBitCount\n        let rhsOnes = rhs.nonzeroBitCount\n\
    \        return lhsOnes == rhsOnes ? lhs < rhs : lhsOnes < rhsOnes\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7cwpuoda/tmp7cwpuoda.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae27af78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae27ac6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae27ac6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae27ac6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7cwpuoda                        0x000055b547f4859b <unavailable> + 5531

    5    libc.so.6                          0x00002ae27b164460 __libc_start_main +
    245

    6    tmp7cwpuoda                        0x000055b547f48039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824609
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: { (a, b) ->\
    \ Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpo4bffru5/tmpo4bffru5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ef5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ef2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ef2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ef2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4bffru5                        0x00005623360af59b <unavailable> + 5531

    5    libc.so.6                          0x00002ab6ef7b8460 __libc_start_main +
    245

    6    tmpo4bffru5                        0x00005623360af039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted {\n        let a\
    \ = $0.nonzeroBitCount\n        let b = $1.nonzeroBitCount\n        return a ==\
    \ b ? $0 < $1 : a < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpnmw__ote/tmpnmw__ote.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad32bf6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad32bc63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad32bc63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad32bc627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmw__ote                        0x0000556e1893459b <unavailable> + 5531

    5    libc.so.6                          0x00002ad32c158460 __libc_start_main +
    245

    6    tmpnmw__ote                        0x0000556e18934039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824609
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7t3dp0a4/tmp7t3dp0a4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafcaa2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafca721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafca721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafca7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t3dp0a4                        0x000055662b51c59b <unavailable> + 5531

    5    libc.so.6                          0x00002aafcac16460 __libc_start_main +
    245

    6    tmp7t3dp0a4                        0x000055662b51c039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824608
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.numberOfOnes\n        let bOnes = b.numberOfOnes\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpftvo92sl.swift:14:23: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let aOnes = a.numberOfOnes\n                    ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        return\
    \ a.filter { $0 == \"1\" }.count == b.filter { $0 == \"1\" }.count ? $0 < $1 :\
    \ a.filter { $0 == \"1\" }.count < b.filter { $0 == \"1\" }.count\n    })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824609
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({\
    \ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return\
    \ $0 < $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({\
    \ $0 == \"1\" }).count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824608
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.numberOfOnes\n        let bOnes = b.numberOfOnes\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpftvo92sl.swift:14:23: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let aOnes = a.numberOfOnes\n                    ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824608
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n///\
    \ [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5,\
    \ -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\n\
    func sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted(by: {\n        let\
    \ ones1 = $0.nonzeroBitCount\n        let ones2 = $1.nonzeroBitCount\n       \
    \ return ones1 < ones2 || (ones1 == ones2 && $0 < $1)\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpmnh3uwpy/tmpmnh3uwpy.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d67c90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d67987b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d67987988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d679867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnh3uwpy                        0x000055bbf02c959b <unavailable> + 5531

    5    libc.so.6                          0x00002b1d67e7c460 __libc_start_main +
    245

    6    tmpmnh3uwpy                        0x000055bbf02c9039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824609
