name: HumanEval_25_factorize
language: swift
prompt: "\n/// Return array of prime factors of given integer in the order from smallest\
  \ to largest.\n/// Each of the factors should be arrayed number of times corresponding\
  \ to how many times it appeares in factorization.\n/// Input number should be equal\
  \ to the product of all factors\n/// >>> factorize(n: 8)\n/// [2, 2, 2]\n/// >>>\
  \ factorize(n: 25)\n/// [5, 5]\n/// >>> factorize(n: 70)\n/// [2, 5, 7]\nfunc factorize(n:\
  \ Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(factorize(n: 2) == [2])\nassert(factorize(n:\
  \ 4) == [2, 2])\nassert(factorize(n: 8) == [2, 2, 2])\nassert(factorize(n: 57) ==\
  \ [3, 19])\nassert(factorize(n: 3249) == [3, 3, 19, 19])\nassert(factorize(n: 185193)\
  \ == [3, 3, 3, 19, 19, 19])\nassert(factorize(n: 20577) == [3, 19, 19, 19])\nassert(factorize(n:\
  \ 18) == [2, 3, 3])"
completions: ["    var factors = [Int]()\n    var number = n\n    var divider = 2\n\
    \    while number > 1 {\n        while number % divider == 0 {\n            factors.append(divider)\n\
    \            number /= divider\n        }\n        divider += 1\n    }\n    return\
    \ factors", "    var n = n\n    var factors = [Int]()\n    var i = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.append(i)\n     \
    \       n /= i\n        } else {\n            i += 1\n        }\n    }\n    if\
    \ n > 1 {\n        factors.append(n)\n    }\n    return factors", "    var result\
    \ = [Int]()\n    var n = n\n    var i = 2\n    while n > 1 {\n        while n\
    \ % i == 0 {\n            result.append(i)\n            n /= i\n        }\n  \
    \      i += 1\n    }\n    return result", "    var factors = [Int]()\n    var\
    \ num = n\n    var divisor = 2\n    while num > 1 {\n        while num % divisor\
    \ == 0 {\n            factors.append(divisor)\n            num /= divisor\n  \
    \      }\n        divisor += 1\n    }\n    return factors", "    var result: [Int]\
    \ = []\n    var number = n\n    var divider = 2\n    while number > 1 {\n    \
    \    while number % divider == 0 {\n            result.append(divider)\n     \
    \       number /= divider\n        }\n        divider += 1\n    }\n    return\
    \ result", "    var result = [Int]()\n    var number = n\n    var divider = 2\n\
    \    while number > 1 {\n        while number % divider == 0 {\n            result.append(divider)\n\
    \            number /= divider\n        }\n        divider += 1\n    }\n    return\
    \ result", "    var factors = [Int]()\n    var number = n\n    var i = 2\n   \
    \ while number > 1 {\n        while number % i == 0 {\n            factors.append(i)\n\
    \            number /= i\n        }\n        i += 1\n    }\n    return factors",
  "    var result = [Int]()\n    var n = n\n    var i = 2\n    while i * i <= n {\n\
    \        while n % i == 0 {\n            result.append(i)\n            n /= i\n\
    \        }\n        i += 1\n    }\n    if n > 1 {\n        result.append(n)\n\
    \    }\n    return result", "    var result = [Int]()\n    var n = n\n    var\
    \ i = 2\n    while n > 1 {\n        while n % i == 0 {\n            result.append(i)\n\
    \            n /= i\n        }\n        i += 1\n    }\n    return result", " \
    \   var result = [Int]()\n    var num = n\n    var i = 2\n    while i * i <= num\
    \ {\n        if num % i == 0 {\n            result.append(i)\n            num\
    \ /= i\n        } else {\n            i += 1\n        }\n    }\n    if num > 1\
    \ {\n        result.append(num)\n    }\n    return result", "    var result =\
    \ [Int]()\n    var number = n\n    var i = 2\n    while i * i <= number {\n  \
    \      while number % i == 0 {\n            result.append(i)\n            number\
    \ /= i\n        }\n        i += 1\n    }\n    if number > 1 {\n        result.append(number)\n\
    \    }\n    return result", "    var result = [Int]()\n    var n = n\n    var\
    \ i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            result.append(i)\n\
    \            n /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    if n > 1 {\n        result.append(n)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var number = n\n    var i = 2\n    while i * i <= number\
    \ {\n        if number % i == 0 {\n            result.append(i)\n            number\
    \ /= i\n        } else {\n            i += 1\n        }\n    }\n    if number\
    \ > 1 {\n        result.append(number)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var n = n\n    var i = 2\n    while i * i <= n {\n        if\
    \ n % i == 0 {\n            result.append(i)\n            n /= i\n        } else\
    \ {\n            i += 1\n        }\n    }\n    if n > 1 {\n        result.append(n)\n\
    \    }\n    return result", "    var result = [Int]()\n    var n = n\n    var\
    \ i = 2\n    while n > 1 {\n        while n % i == 0 {\n            result.append(i)\n\
    \            n /= i\n        }\n        i += 1\n    }\n    return result", " \
    \   var n = n\n    var result = [Int]()\n    var i = 2\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            result.append(i)\n            n /= i\n \
    \       } else {\n            i += 1\n        }\n    }\n    if n > 1 {\n     \
    \   result.append(n)\n    }\n    return result", "    var result = [Int]()\n \
    \   var number = n\n    var divider = 2\n    while number > 1 {\n        while\
    \ number % divider == 0 {\n            result.append(divider)\n            number\
    \ /= divider\n        }\n        divider += 1\n    }\n    return result", "  \
    \  var result: [Int] = []\n    var number = n\n    var divider = 2\n    while\
    \ number > 1 {\n        while number % divider == 0 {\n            result.append(divider)\n\
    \            number /= divider\n        }\n        divider += 1\n    }\n    return\
    \ result", "    var result = [Int]()\n    var n = n\n    var i = 2\n    while\
    \ i * i <= n {\n        while n % i == 0 {\n            result.append(i)\n   \
    \         n /= i\n        }\n        i += 1\n    }\n    if n > 1 {\n        result.append(n)\n\
    \    }\n    return result", "    var result = [Int]()\n    var number = n\n  \
    \  var divisor = 2\n    while number > 1 {\n        while number % divisor ==\
    \ 0 {\n            result.append(divisor)\n            number /= divisor\n   \
    \     }\n        divisor += 1\n    }\n    return result"]
stop_tokens:
- "\n}"
