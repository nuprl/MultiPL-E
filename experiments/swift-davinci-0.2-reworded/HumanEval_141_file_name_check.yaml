name: HumanEval_141_file_name_check
language: swift
prompt: "\n/// Create a function which takes a string representing a file's name,\
  \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(file_name:\
  \ \"example.txt\")\n/// \"Yes\"\n/// >>> file_name_check(file_name: \"1example.dll\"\
  )\n/// \"No\"\nfunc file_name_check(file_name: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\n\
  assert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") ==\
  \ \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\n\
  assert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\"\
  )\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name:\
  \ \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"\
  No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\"\
  )\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\"\
  )\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\")\
  \ == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")"
completions: ["    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_components = file_name.components(separatedBy: \".\")\n    if\
    \ file_name_components.count != 2 {\n        return \"No\"\n    }\n    let file_name_prefix\
    \ = file_name_components[0]\n    let file_name_suffix = file_name_components[1]\n\
    \    let file_name_prefix_components = file_name_prefix.components(separatedBy:\
    \ CharacterSet.decimalDigits)\n    if file_name_prefix_components.count != 2 {\n\
    \        return \"No\"\n    }\n    if file_name_prefix_components[0].count ==\
    \ 0 {\n        return \"No\"\n    }\n    if file_name_prefix_components[0].count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_prefix_components[0].count\
    \ == 1 {\n        if !CharacterSet.letters.contains(file_name_prefix_components[0].unicodeScalars.first!)\
    \ {\n            return \"No\"\n        }\n    }\n    if file_name_prefix_components[0].count\
    \ == 2 {\n        if !CharacterSet.letters.contains(file_name_prefix_components[0].unicodeScalars.first!)\
    \ {\n            return \"No\"\n        }\n        if !CharacterSet.letters.contains(file_name_prefix_components[0].unicodeScalars.last!)\
    \ {\n            return \"No\"\n        }\n    }\n    if file_name_prefix_components[0].count\
    \ == 3 {\n        if !CharacterSet.letters.contains(file_name_prefix_components[0].unicodeScalars.first!)\
    \ {\n            return \"No\"\n        }\n        if !CharacterSet.letters.contains(file_name_prefix_components[0].unicodeScalars.last!)\
    \ {\n            return \"No\"\n        }\n        if !CharacterSet.decimalDigits.contains(file_name_prefix_components[0].unicodeScalars[file_name_prefix_components[0].unicodeScalars.index(file",
  "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  if file_name.range(of: file_name_regex, options: .regularExpression) != nil\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    if file_name.range(of:\
    \ file_name_regex, options: .regularExpression) != nil {\n        return \"Yes\"\
    \n    }\n    return \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_without_extension = file_name_components[0]\n    let file_name_extension\
    \ = file_name_components[1]\n    if file_name_without_extension.count == 0 {\n\
    \        return \"No\"\n    }\n    if !file_name_without_extension.contains(where:\
    \ { $0.isLetter }) {\n        return \"No\"\n    }\n    if file_name_without_extension.contains(where:\
    \ { $0.isNumber }) {\n        let number_of_digits = file_name_without_extension.filter({\
    \ $0.isNumber }).count\n        if number_of_digits > 3 {\n            return\
    \ \"No\"\n        }\n    }\n    if ![\"txt\", \"exe\", \"dll\"].contains(file_name_extension)\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", '    return ""', "    let file_name_regex =\
    \ \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\
    \ \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.range(of: file_name_regex, options:\
    \ .regularExpression) != nil ? \"Yes\" : \"No\"", '    return ""', "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    if file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    return file_name.range(of:\
    \ file_name_regex, options: .regularExpression) != nil ? \"Yes\" : \"No\"", " \
    \   let file_name_regex = \"^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n\
    \    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", '    return
    ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.range(of: file_name_regex, options: .regularExpression) !=\
    \ nil ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\""]
stop_tokens:
- "\n}"
