name: HumanEval_141_file_name_check
language: swift
prompt: "\n/// Create a function which takes a string representing a file's name,\
  \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(file_name:\
  \ \"example.txt\")\n/// \"Yes\"\n/// >>> file_name_check(file_name: \"1example.dll\"\
  )\n/// \"No\"\nfunc file_name_check(file_name: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\n\
  assert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") ==\
  \ \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\n\
  assert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\"\
  )\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name:\
  \ \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"\
  No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\"\
  )\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\"\
  )\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\")\
  \ == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")"
completions: ["    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_components = file_name.components(separatedBy: \".\")\n    if\
    \ file_name_components.count != 2 {\n        return \"No\"\n    }\n    let file_name_prefix\
    \ = file_name_components[0]\n    let file_name_suffix = file_name_components[1]\n\
    \    let file_name_prefix_components = file_name_prefix.components(separatedBy:\
    \ CharacterSet.decimalDigits)\n    if file_name_prefix_components.count != 2 {\n\
    \        return \"No\"\n    }\n    if file_name_prefix_components[0].count ==\
    \ 0 {\n        return \"No\"\n    }\n    if file_name_prefix_components[0].count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_prefix_components[0].count\
    \ == 1 {\n        if !CharacterSet.letters.contains(file_name_prefix_components[0].unicodeScalars.first!)\
    \ {\n            return \"No\"\n        }\n    }\n    if file_name_prefix_components[0].count\
    \ == 2 {\n        if !CharacterSet.letters.contains(file_name_prefix_components[0].unicodeScalars.first!)\
    \ {\n            return \"No\"\n        }\n        if !CharacterSet.letters.contains(file_name_prefix_components[0].unicodeScalars.last!)\
    \ {\n            return \"No\"\n        }\n    }\n    if file_name_prefix_components[0].count\
    \ == 3 {\n        if !CharacterSet.letters.contains(file_name_prefix_components[0].unicodeScalars.first!)\
    \ {\n            return \"No\"\n        }\n        if !CharacterSet.letters.contains(file_name_prefix_components[0].unicodeScalars.last!)\
    \ {\n            return \"No\"\n        }\n        if !CharacterSet.decimalDigits.contains(file_name_prefix_components[0].unicodeScalars[file_name_prefix_components[0].unicodeScalars.index(file",
  "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  if file_name.range(of: file_name_regex, options: .regularExpression) != nil\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    if file_name.range(of:\
    \ file_name_regex, options: .regularExpression) != nil {\n        return \"Yes\"\
    \n    }\n    return \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_without_extension = file_name_components[0]\n    let file_name_extension\
    \ = file_name_components[1]\n    if file_name_without_extension.count == 0 {\n\
    \        return \"No\"\n    }\n    if !file_name_without_extension.contains(where:\
    \ { $0.isLetter }) {\n        return \"No\"\n    }\n    if file_name_without_extension.contains(where:\
    \ { $0.isNumber }) {\n        let number_of_digits = file_name_without_extension.filter({\
    \ $0.isNumber }).count\n        if number_of_digits > 3 {\n            return\
    \ \"No\"\n        }\n    }\n    if ![\"txt\", \"exe\", \"dll\"].contains(file_name_extension)\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", '    return ""', "    let file_name_regex =\
    \ \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\
    \ \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.range(of: file_name_regex, options:\
    \ .regularExpression) != nil ? \"Yes\" : \"No\"", '    return ""', "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    if file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    return file_name.range(of:\
    \ file_name_regex, options: .regularExpression) != nil ? \"Yes\" : \"No\"", " \
    \   let file_name_regex = \"^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n\
    \    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", '    return
    ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.range(of: file_name_regex, options: .regularExpression) !=\
    \ nil ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    // TODO: Write your code here\n    return \"\"", " \
    \   let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n \
    \   let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", '    return
    ""', "    // write your code here\n    return \"\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", '    return ""', "    let file_name_regex = #\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    .(txt|exe|dll)$\"#\n    let file_name_matches = file_name.range(of: file_name_regex,\
    \ options: .regularExpression)\n    return file_name_matches != nil ? \"Yes\"\
    \ : \"No\"", "    if file_name.count > 3 {\n        return \"No\"\n    }\n   \
    \ return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\\
    .(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.split(separator: \"\
    .\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    if\
    \ file_name_arr[0].count == 0 {\n        return \"No\"\n    }\n    if file_name_arr[0].count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_arr[0].rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_arr[1]\
    \ != \"txt\" && file_name_arr[1] != \"exe\" && file_name_arr[1] != \"dll\" {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex =\
    \ \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\
    \ \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", '    return ""', "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if first_part.count == 0 || !first_part.first!.isLetter {\n        return\
    \ \"No\"\n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    var digit_count = 0\n    for\
    \ char in first_part {\n        if char.isNumber {\n            digit_count +=\
    \ 1\n        }\n    }\n    if digit_count > 3 {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let file_name_regex = #\"^[a-zA-Z]\\w{1,3}\\.(txt|exe|dll)$\"\
    #\n    return file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil ? \"Yes\" : \"No\"", "    let file_name_regex = Regex(pattern: \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\")\n    return file_name_regex.test(input: file_name) ? \"Yes\"\
    \ : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z]\\\\w{0,2}\\\\.(txt|exe|dll)$\"\n    let file_name_test\
    \ = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if file_name_prefix.count == 0 || file_name_suffix.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_prefix.count > 3 {\n\
    \        return \"No\"\n    }\n    let file_name_prefix_first_char = file_name_prefix.first!\n\
    \    if !(file_name_prefix_first_char >= \"a\" && file_name_prefix_first_char\
    \ <= \"z\" ||\n        file_name_prefix_first_char >= \"A\" && file_name_prefix_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    if file_name_suffix != \"txt\"\
    \ && file_name_suffix != \"exe\" && file_name_suffix != \"dll\" {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    let matches = regex.matches(in: file_name, options: [], range:\
    \ NSRange(location: 0, length: file_name.count))\n    return matches.count > 0\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    // TODO: Write your code here\n    return \"\"", " \
    \   let file_name_components = file_name.components(separatedBy: \".\")\n    if\
    \ file_name_components.count != 2 {\n        return \"No\"\n    }\n    let file_name_prefix\
    \ = file_name_components[0]\n    let file_name_suffix = file_name_components[1]\n\
    \    if file_name_prefix.count == 0 || file_name_suffix.count == 0 {\n       \
    \ return \"No\"\n    }\n    let file_name_prefix_first_char = file_name_prefix[file_name_prefix.startIndex]\n\
    \    if !(file_name_prefix_first_char >= \"a\" && file_name_prefix_first_char\
    \ <= \"z\" ||\n        file_name_prefix_first_char >= \"A\" && file_name_prefix_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    let file_name_prefix_digit_count\
    \ = file_name_prefix.filter { $0 >= \"0\" && $0 <= \"9\" }.count\n    if file_name_prefix_digit_count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_suffix != \"txt\" && file_name_suffix\
    \ != \"exe\" && file_name_suffix != \"dll\" {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.range(of: file_name_regex, options:\
    \ .regularExpression) != nil ? \"Yes\" : \"No\"", "    let file_name_regex = \"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\
    \ \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", '    return ""', "    let file_name_regex =\
    \ \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    if file_name.range(of:\
    \ file_name_regex, options: .regularExpression) != nil {\n        return \"Yes\"\
    \n    }\n    return \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(regex: file_name_regex) ? \"\
    Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_predicate = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_predicate.evaluate(with: file_name) ? \"Yes\" : \"No\"",
  "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.matches(regex: file_name_regex) ? \"Yes\" : \"No\"", "   \
    \ let file_name_pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n \
    \   let file_name_regex = try! NSRegularExpression(pattern: file_name_pattern,\
    \ options: [])\n    let file_name_match = file_name_regex.firstMatch(in: file_name,\
    \ options: [], range: NSRange(location: 0, length: file_name.count))\n    if file_name_match\
    \ != nil {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }",
  "    // TODO: Write implementation here\n    return \"\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", '    return ""', "    let file_name_regex =\
    \ \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    return file_name.range(of:\
    \ file_name_regex, options: .regularExpression) != nil ? \"Yes\" : \"No\"", '    return
    ""', "    let file_name_regex = #\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$\"\
    #\n    return file_name.matches(file_name_regex) ? \"Yes\" : \"No\"", "    //\
    \ TODO: Write some code to solve this coding problem\n    return \"\"", "    let\
    \ file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let\
    \ file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  // TODO: Write your code here!\n    return \"\"", "    let file_name_check_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_check_regex_obj\
    \ = try! NSRegularExpression(pattern: file_name_check_regex, options: [])\n  \
    \  let file_name_check_result = file_name_check_regex_obj.matches(in: file_name,\
    \ options: [], range: NSRange(location: 0, length: file_name.count))\n    if file_name_check_result.count\
    \ > 0 {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }",
  "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let fileName = file_name.split(separator: \".\")\n    if fileName.count !=\
    \ 2 {\n        return \"No\"\n    }\n    let firstPart = fileName[0]\n    let\
    \ secondPart = fileName[1]\n    if firstPart.count == 0 || !firstPart.first!.isLetter\
    \ {\n        return \"No\"\n    }\n    if secondPart != \"txt\" && secondPart\
    \ != \"exe\" && secondPart != \"dll\" {\n        return \"No\"\n    }\n    if\
    \ firstPart.filter({ $0.isNumber }).count > 3 {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_without_extension = file_name_components[0]\n    let file_name_extension\
    \ = file_name_components[1]\n    if file_name_without_extension.count == 0 {\n\
    \        return \"No\"\n    }\n    let file_name_without_extension_first_char\
    \ = file_name_without_extension[file_name_without_extension.startIndex]\n    if\
    \ !(file_name_without_extension_first_char >= \"a\" && file_name_without_extension_first_char\
    \ <= \"z\" || file_name_without_extension_first_char >= \"A\" && file_name_without_extension_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    let file_name_without_extension_digits_count\
    \ = file_name_without_extension.filter { $0 >= \"0\" && $0 <= \"9\" }.count\n\
    \    if file_name_without_extension_digits_count > 3 {\n        return \"No\"\n\
    \    }\n    if file_name_extension != \"txt\" && file_name_extension != \"exe\"\
    \ && file_name_extension != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", '    return
    "Yes"', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.range(of: file_name_regex, options: .regularExpression) !=\
    \ nil ? \"Yes\" : \"No\"", "    // TODO: Write your solution here\n    return\
    \ \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.matches(regex: file_name_regex) ? \"Yes\" : \"No\"", "   \
    \ let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n   \
    \ return file_name.matches(regex: file_name_regex) ? \"Yes\" : \"No\"", "    let\
    \ file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let\
    \ file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.matches(regex: file_name_regex) ? \"Yes\" : \"No\"", "   \
    \ let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n   \
    \ let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = Regex(pattern: \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    )\n    return file_name_regex.test(input: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.matches(regex: file_name_regex) ? \"Yes\" : \"No\"", '    return
    ""', '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  let range = NSRange(location: 0, length: file_name.utf16.count)\n    if regex.firstMatch(in:\
    \ file_name, options: [], range: range) != nil {\n        return \"Yes\"\n   \
    \ } else {\n        return \"No\"\n    }", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    if file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", "    // TODO: Write\
    \ your code here\n    return \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = #\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    .(txt|exe|dll)$\"#\n    return file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil ? \"Yes\" : \"No\"", '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    let file_name_prefix_digits = file_name_prefix.filter\
    \ { $0 >= \"0\" && $0 <= \"9\" }\n    if file_name_prefix_digits.count > 3 {\n\
    \        return \"No\"\n    }\n    let file_name_prefix_first_char = file_name_prefix.first!\n\
    \    if !(file_name_prefix_first_char >= \"a\" && file_name_prefix_first_char\
    \ <= \"z\" || file_name_prefix_first_char >= \"A\" && file_name_prefix_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    if file_name_suffix != \"txt\"\
    \ && file_name_suffix != \"exe\" && file_name_suffix != \"dll\" {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if file_name_prefix.count == 0 || file_name_suffix.count\
    \ == 0 {\n        return \"No\"\n    }\n    if !file_name_prefix.is_valid_file_name_prefix()\
    \ {\n        return \"No\"\n    }\n    if !file_name_suffix.is_valid_file_name_suffix()\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if file_name_prefix.count == 0 || file_name_suffix.count\
    \ == 0 {\n        return \"No\"\n    }\n    let file_name_prefix_first_char =\
    \ file_name_prefix[file_name_prefix.startIndex]\n    if !(file_name_prefix_first_char\
    \ >= \"a\" && file_name_prefix_first_char <= \"z\" ||\n         file_name_prefix_first_char\
    \ >= \"A\" && file_name_prefix_first_char <= \"Z\") {\n        return \"No\"\n\
    \    }\n    let file_name_prefix_digit_count = file_name_prefix.filter { $0 >=\
    \ \"0\" && $0 <= \"9\" }.count\n    if file_name_prefix_digit_count > 3 {\n  \
    \      return \"No\"\n    }\n    if file_name_suffix != \"txt\" && file_name_suffix\
    \ != \"exe\" && file_name_suffix != \"dll\" {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_predicate = NSPredicate(format: \"SELF\
    \ MATCHES %@\", file_name_regex)\n    return file_name_predicate.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.range(of: file_name_regex, options:\
    \ .regularExpression) != nil ? \"Yes\" : \"No\"", "    let file_name_regex = \"\
    ^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\
    \ \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", '    return ""', "    // TODO: Write your code\
    \ here!\n    return \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_components_count = file_name_components.count\n  \
    \  if file_name_components_count != 2 {\n        return \"No\"\n    }\n    let\
    \ file_name_components_first = file_name_components[0]\n    let file_name_components_last\
    \ = file_name_components[1]\n    let file_name_components_first_count = file_name_components_first.count\n\
    \    let file_name_components_last_count = file_name_components_last.count\n \
    \   if file_name_components_first_count == 0 || file_name_components_last_count\
    \ == 0 {\n        return \"No\"\n    }\n    let file_name_components_first_first_character\
    \ = file_name_components_first[file_name_components_first.startIndex]\n    let\
    \ file_name_components_first_first_character_is_letter = file_name_components_first_first_character.isLetter\n\
    \    if !file_name_components_first_first_character_is_letter {\n        return\
    \ \"No\"\n    }\n    let file_name_components_last_is_valid = file_name_components_last\
    \ == \"txt\" || file_name_components_last == \"exe\" || file_name_components_last\
    \ == \"dll\"\n    if !file_name_components_last_is_valid {\n        return \"\
    No\"\n    }\n    let file_name_components_first_digits_count = file_name_components_first.filter({\
    \ $0.isNumber }).count\n    if file_name_components_first_digits_count > 3 {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    // TODO: Write your code\
    \ here!\n    return \"\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if !(file_name_suffix == \"txt\" || file_name_suffix\
    \ == \"exe\" || file_name_suffix == \"dll\") {\n        return \"No\"\n    }\n\
    \    if file_name_prefix.count == 0 {\n        return \"No\"\n    }\n    let first_char\
    \ = file_name_prefix[file_name_prefix.startIndex]\n    if !(first_char >= \"a\"\
    \ && first_char <= \"z\" || first_char >= \"A\" && first_char <= \"Z\") {\n  \
    \      return \"No\"\n    }\n    var digit_count = 0\n    for char in file_name_prefix\
    \ {\n        if char >= \"0\" && char <= \"9\" {\n            digit_count += 1\n\
    \        }\n    }\n    if digit_count > 3 {\n        return \"No\"\n    }\n  \
    \  return \"Yes\"", '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    // Write your code here\n    return \"\"", "    let\
    \ file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let\
    \ file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  // TODO: Write your code here!\n    return \"\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    return file_name.matches(regex:\
    \ file_name_regex) ? \"Yes\" : \"No\"", "    // TODO: Write some code to solve\
    \ this coding problem\n    return \"\"", "    // Write your code here\n    return\
    \ \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.matches(file_name_regex) ? \"Yes\" : \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    return file_name.matches(regex:\
    \ file_name_regex) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    // TODO: Write your solution here\n    return \"\"",
  "    var digits = 0\n    var dot = false\n    var extension = \"\"\n    for char\
    \ in file_name {\n        if char >= \"0\" && char <= \"9\" {\n            digits\
    \ += 1\n        } else if char == \".\" {\n            dot = true\n        } else\
    \ if dot {\n            extension += String(char)\n        }\n    }\n    if digits\
    \ > 3 || !dot || extension.count == 0 || extension.count > 3 || extension != \"\
    txt\" && extension != \"exe\" && extension != \"dll\" {\n        return \"No\"\
    \n    }\n    return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.range(of: file_name_regex, options:\
    \ .regularExpression) != nil ? \"Yes\" : \"No\"", '    return "No"', "    // TODO:\
    \ Write some code to solve this coding problem\n    return \"\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    let range = NSRange(location: 0, length: file_name.utf16.count)\n\
    \    let match = regex.firstMatch(in: file_name, options: [], range: range)\n\
    \    return match != nil ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    // TODO: Write your solution here\n    return \"\"",
  '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", '    return
    "Yes"', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  // TODO: Write your code here!\n    return \"\"", "    let file_name_regex\
    \ = \"^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    let file_name_test\
    \ = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_regex = try! NSRegularExpression(pattern:\
    \ file_name_pattern, options: [])\n    let file_name_matches = file_name_regex.matches(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \    if file_name_matches.count > 0 {\n        return \"Yes\"\n    } else {\n\
    \        return \"No\"\n    }", '    return ""', "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_without_extension =\
    \ file_name_components[0]\n    let file_name_extension = file_name_components[1]\n\
    \    if file_name_without_extension.count == 0 {\n        return \"No\"\n    }\n\
    \    if !file_name_without_extension.contains(where: { $0.isLetter }) {\n    \
    \    return \"No\"\n    }\n    if file_name_without_extension.contains(where:\
    \ { $0.isNumber }) {\n        let number_of_digits = file_name_without_extension.filter({\
    \ $0.isNumber }).count\n        if number_of_digits > 3 {\n            return\
    \ \"No\"\n        }\n    }\n    if ![\"txt\", \"exe\", \"dll\"].contains(file_name_extension)\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex\
    \ = \"^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    let file_name_test\
    \ = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", '    return ""', "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_without_extension =\
    \ file_name_components[0]\n    let file_name_extension = file_name_components[1]\n\
    \    if file_name_without_extension.count == 0 {\n        return \"No\"\n    }\n\
    \    let file_name_without_extension_first_char = file_name_without_extension[file_name_without_extension.startIndex]\n\
    \    if !(file_name_without_extension_first_char >= \"a\" && file_name_without_extension_first_char\
    \ <= \"z\" || file_name_without_extension_first_char >= \"A\" && file_name_without_extension_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    let file_name_without_extension_digits_count\
    \ = file_name_without_extension.filter { (char) -> Bool in\n        return char\
    \ >= \"0\" && char <= \"9\"\n    }.count\n    if file_name_without_extension_digits_count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_extension != \"txt\" &&\
    \ file_name_extension != \"exe\" && file_name_extension != \"dll\" {\n       \
    \ return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    if file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", "    let pattern\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let matches = regex.matches(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.count))\n    return matches.count\
    \ > 0 ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(regex: file_name_regex) ? \"\
    Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    return file_name.matches(regex: file_name_regex) ? \"Yes\" : \"No\"", " \
    \   let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n \
    \   return file_name.matches(regex: file_name_regex) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test\
    \ = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    // Write your code here.\n    return \"\
    \"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.matches(regex: file_name_regex) ? \"Yes\" : \"No\"", "   \
    \ let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n   \
    \ let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.matches(regex: file_name_regex) ? \"Yes\" : \"No\"", "   \
    \ let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n   \
    \ let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  // Write your code here\n    return \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    if file_name.range(of: pattern, options: .regularExpression) != nil {\n\
    \        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_regex =\
    \ \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\
    \ \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(regex: file_name_regex) ? \"\
    Yes\" : \"No\"", '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    if file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_without_extension =\
    \ file_name_components[0]\n    let file_name_extension = file_name_components[1]\n\
    \    if file_name_without_extension.count == 0 {\n        return \"No\"\n    }\n\
    \    if file_name_without_extension.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    if file_name_without_extension.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n        return \"No\"\n    }\n    if file_name_extension\
    \ != \"txt\" && file_name_extension != \"exe\" && file_name_extension != \"dll\"\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_predicate = NSPredicate(format: \"SELF\
    \ MATCHES %@\", file_name_regex)\n    return file_name_predicate.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format: \"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = #\"^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$\"#\n    return file_name.matches(regex: file_name_regex) ? \"\
    Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", '    return
    ""', "    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    let components\
    \ = file_name.components(separatedBy: \".\")\n    if components.count != 2 {\n\
    \        return \"No\"\n    }\n    let name = components[0]\n    let extension\
    \ = components[1]\n    if !valid_extensions.contains(extension) {\n        return\
    \ \"No\"\n    }\n    if name.count == 0 {\n        return \"No\"\n    }\n    if\
    \ !name.first!.isLetter {\n        return \"No\"\n    }\n    let digits_count\
    \ = name.filter { $0.isNumber }.count\n    if digits_count > 3 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    let range = NSRange(location: 0, length: file_name.utf16.count)\n\
    \    if regex.firstMatch(in: file_name, options: [], range: range) != nil {\n\
    \        return \"Yes\"\n    } else {\n        return \"No\"\n    }", "    let\
    \ file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let\
    \ file_name_predicate = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_predicate.evaluate(with: file_name) ? \"Yes\" : \"No\"",
  "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format: \"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\""]
stop_tokens:
- "\n}"
