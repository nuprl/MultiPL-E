name: HumanEval_149_sorted_list_sum
language: swift
prompt: "\n/// Write a function that accepts an array of strings as a parameter,\n\
  /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
  \ array with a sorted order,\n/// The array is always an array of strings and never\
  \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
  \ array should be ascending by length of each word, and you\n/// should return the\
  \ array sorted by that rule.\n/// If two words have the same length, sort the array\
  \ alphabetically.\n/// The function should return an array of strings in sorted\
  \ order.\n/// You may assume that all words will have the same length.\n/// For\
  \ example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"\
  ]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\",\
  \ \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"\
  aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\"\
  , \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\"\
  , \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\",\
  \ \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
  \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
  \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
  \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
completions: ["    var result: [String] = []\n    for word in lst {\n        if word.count\
    \ % 2 == 0 {\n            result.append(word)\n        }\n    }\n    result.sort()\n\
    \    return result", "    var result: [String] = []\n    for word in lst {\n \
    \       if word.count % 2 == 0 {\n            result.append(word)\n        }\n\
    \    }\n    result.sort()\n    return result", "    var result = [String]()\n\
    \    for word in lst {\n        if word.count % 2 == 0 {\n            result.append(word)\n\
    \        }\n    }\n    result.sort()\n    return result", "    var odd_length_words\
    \ = [String]()\n    for word in lst {\n        if word.count % 2 == 1 {\n    \
    \        odd_length_words.append(word)\n        }\n    }\n    return odd_length_words.sorted()",
  "    var result = [String]()\n    for word in lst {\n        if word.count % 2 ==\
    \ 0 {\n            result.append(word)\n        }\n    }\n    result.sort()\n\
    \    return result", "    var result: [String] = []\n    for word in lst {\n \
    \       if word.count % 2 == 0 {\n            result.append(word)\n        }\n\
    \    }\n    result.sort()\n    return result", '    return lst.filter { $0.count
    % 2 == 0 }.sorted()', '    return lst.filter { $0.count % 2 == 0 }.sorted()',
  '    return lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }', '    return
    lst.filter { $0.count % 2 == 0 }.sorted { $0.count == $1.count ? $0 < $1 : $0.count
    < $1.count }', '    return lst.filter { $0.count % 2 == 0 }.sorted { $0.count
    < $1.count }', "    var result: [String] = []\n    for word in lst {\n       \
    \ if word.count % 2 == 0 {\n            result.append(word)\n        }\n    }\n\
    \    result.sort()\n    return result", "    var new_lst = [String]()\n    for\
    \ i in lst {\n        if i.count % 2 == 0 {\n            new_lst.append(i)\n \
    \       }\n    }\n    return new_lst.sorted()", '    return lst.filter { $0.count
    % 2 == 0 }.sorted { $0.count < $1.count }', "    var result = [String]()\n   \
    \ for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result", "    var result: [String]\
    \ = []\n    for word in lst {\n        if word.count % 2 == 0 {\n            result.append(word)\n\
    \        }\n    }\n    result.sort()\n    return result", "    var result: [String]\
    \ = []\n    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result", "    var result = [String]()\n\
    \    for i in lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    result.sort()\n    return result", "    var result: [String]\
    \ = []\n    for word in lst {\n        if word.count % 2 == 0 {\n            result.append(word)\n\
    \        }\n    }\n    result.sort()\n    return result", "    var result: [String]\
    \ = []\n    for item in lst {\n        if item.count % 2 == 0 {\n            result.append(item)\n\
    \        }\n    }\n    return result.sorted()"]
stop_tokens:
- "\n}"
