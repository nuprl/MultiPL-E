name: HumanEval_153_Strongest_Extension
language: swift
prompt: "\n/// You will be given the name of a class (a string) and an array of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ array.\n/// For example, if you are given \"Slices\" as the class and an array\
  \ of the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\n/// >>> Strongest_Extension(class_name:\
  \ \"my_class\", extensions: [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc\
  \ Strongest_Extension(class_name: String, extensions: [String]) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\"\
  , extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
  \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
  ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
  , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
  ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
  \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
  \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
  )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\",\
  \ \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\
  assert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\", \"\
  NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
  \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
  \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
completions: ["    var strongest_extension = \"\"\n    var strongest_strength = 0.0\n\
    \    for extension_name in extensions {\n        let strength = Double(extension_name.uppercased().count)\
    \ - Double(extension_name.lowercased().count)\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    var strongest_extension = \"\"\n    var strongest_extension_strength = 0.0\n\
    \    for extension_name in extensions {\n        var extension_strength = 0.0\n\
    \        for char in extension_name {\n            if char.isUppercase {\n   \
    \             extension_strength += 1\n            } else {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension", "    var strongest_extension = \"\"\n    var\
    \ strongest_extension_strength = 0.0\n    for extension_name in extensions {\n\
    \        let strength = Double(extension_name.filter{$0.isUppercase}.count) -\
    \ Double(extension_name.filter{$0.isLowercase}.count)\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return class_name + \".\" + strongest_extension",
  "    var strongest_extension = extensions[0]\n    var strongest_extension_strength\
    \ = 0\n    for extension_name in extensions {\n        var extension_strength\
    \ = 0\n        for character in extension_name {\n            if character.isUppercase\
    \ {\n                extension_strength += 1\n            } else {\n         \
    \       extension_strength -= 1\n            }\n        }\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return class_name + \".\" + strongest_extension", "    var strongest\
    \ = \"\"\n    var strength = 0\n    for ext in extensions {\n        var cap =\
    \ 0\n        var sm = 0\n        for c in ext {\n            if c.isUppercase\
    \ {\n                cap += 1\n            } else {\n                sm += 1\n\
    \            }\n        }\n        if cap - sm > strength {\n            strength\
    \ = cap - sm\n            strongest = ext\n        }\n    }\n    return \"\\(class_name).\\\
    (strongest)\"", "    var strongest_extension = \"\"\n    var strongest_extension_strength\
    \ = 0.0\n    for extension_name in extensions {\n        let extension_strength\
    \ = Double(extension_name.filter { $0.isUppercase }.count) - Double(extension_name.filter\
    \ { $0.isLowercase }.count)\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension", "    var strongest_extension = \"\"\n    var\
    \ strongest_strength = 0.0\n    for extension_name in extensions {\n        let\
    \ strength = Double(extension_name.filter { $0.isUppercase }.count) - Double(extension_name.filter\
    \ { $0.isLowercase }.count)\n        if strength > strongest_strength {\n    \
    \        strongest_strength = strength\n            strongest_extension = extension_name\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension", "   \
    \ var strongest_extension = extensions[0]\n    var strongest_extension_strength\
    \ = 0.0\n    for extension_name in extensions {\n        var extension_strength\
    \ = 0.0\n        for char in extension_name {\n            if char.isUppercase\
    \ {\n                extension_strength += 1\n            } else {\n         \
    \       extension_strength -= 1\n            }\n        }\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"", "    var\
    \ strongest_extension = extensions[0]\n    var strongest_extension_strength =\
    \ 0\n    for extension_name in extensions {\n        let extension_strength =\
    \ extension_name.filter({$0.isUppercase}).count - extension_name.filter({$0.isLowercase}).count\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension\
    \ = extension_name\n            strongest_extension_strength = extension_strength\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"", " \
    \   var strongest_extension = \"\"\n    var strongest_extension_strength = 0.0\n\
    \    for extension_name in extensions {\n        let cap = extension_name.filter\
    \ { $0.isUppercase }.count\n        let sm = extension_name.filter { $0.isLowercase\
    \ }.count\n        let strength = Double(cap) - Double(sm)\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"", "    var strongest_extension\
    \ = extensions[0]\n    var strongest_extension_strength = 0\n    for extension_name\
    \ in extensions {\n        let extension_strength = extension_name.filter({$0.isUppercase}).count\
    \ - extension_name.filter({$0.isLowercase}).count\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension = extension_name\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return class_name + \".\" + strongest_extension", "    var strongest_extension\
    \ = \"\"\n    var strongest_extension_strength = 0.0\n    for extension_name in\
    \ extensions {\n        let extension_strength = Double(extension_name.filter{$0.isUppercase}.count)\
    \ - Double(extension_name.filter{$0.isLowercase}.count)\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension_name\n     \
    \   }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"", "    var\
    \ strongest_extension = \"\"\n    var strongest_strength = 0.0\n    for extension_name\
    \ in extensions {\n        let strength = Double(extension_name.uppercased().count)\
    \ - Double(extension_name.lowercased().count)\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return class_name + \".\" + strongest_extension",
  "    var strongest_extension = \"\"\n    var strongest_extension_strength = 0.0\n\
    \    for extension_name in extensions {\n        var strength = 0.0\n        for\
    \ char in extension_name {\n            if char.isUppercase {\n              \
    \  strength += 1\n            } else {\n                strength -= 1\n      \
    \      }\n        }\n        if strength > strongest_extension_strength {\n  \
    \          strongest_extension_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    var strongest_extension = \"\"\n    var strongest_strength = 0.0\n    for extension_name\
    \ in extensions {\n        var cap = 0\n        var sm = 0\n        for char in\
    \ extension_name {\n            if char.isUppercase {\n                cap +=\
    \ 1\n            } else {\n                sm += 1\n            }\n        }\n\
    \        let strength = Double(cap) - Double(sm)\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    var strongest_extension = \"\"\n    var strongest_extension_strength = 0.0\n\
    \    for extension_name in extensions {\n        let cap = extension_name.filter\
    \ { $0.isUppercase }.count\n        let sm = extension_name.filter { $0.isLowercase\
    \ }.count\n        let strength = Double(cap) - Double(sm)\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension_name\n        }\n    }\n\
    \    return \"\\(class_name).\\(strongest_extension)\"", "    var strongest_extension\
    \ = \"\"\n    var strongest_strength = 0.0\n    for extension_name in extensions\
    \ {\n        var uppercase_count = 0\n        var lowercase_count = 0\n      \
    \  for char in extension_name {\n            if char.isUppercase {\n         \
    \       uppercase_count += 1\n            } else if char.isLowercase {\n     \
    \           lowercase_count += 1\n            }\n        }\n        let strength\
    \ = Double(uppercase_count) - Double(lowercase_count)\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = extension_name\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "    var strongest_extension = \"\"\n    var strongest_strength = 0.0\n    for extension_name\
    \ in extensions {\n        var strength = 0.0\n        for char in extension_name\
    \ {\n            if char.isUppercase {\n                strength += 1\n      \
    \      } else {\n                strength -= 1\n            }\n        }\n   \
    \     if strength > strongest_strength {\n            strongest_strength = strength\n\
    \            strongest_extension = extension_name\n        }\n    }\n    return\
    \ \"\\(class_name).\\(strongest_extension)\"", "    var strongest_extension =\
    \ \"\"\n    var strongest_strength = 0.0\n    for extension_name in extensions\
    \ {\n        let strength = Double(extension_name.filter{$0.isUppercase}.count)\
    \ - Double(extension_name.filter{$0.isLowercase}.count)\n        if strength >\
    \ strongest_strength {\n            strongest_strength = strength\n          \
    \  strongest_extension = extension_name\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension", "    var strongest_extension = \"\"\n    var\
    \ strongest_strength = 0.0\n    for extension_name in extensions {\n        let\
    \ strength = Double(extension_name.filter { $0.isUppercase }.count) - Double(extension_name.filter\
    \ { $0.isLowercase }.count)\n        if strength > strongest_strength {\n    \
    \        strongest_strength = strength\n            strongest_extension = extension_name\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\""]
stop_tokens:
- "\n}"
