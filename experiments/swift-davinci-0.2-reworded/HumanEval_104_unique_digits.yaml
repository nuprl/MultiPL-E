name: HumanEval_104_unique_digits
language: swift
prompt: "\n/// Given an array of positive integers x. return a sorted array of all\
  \ \n/// elements that hasn't any even digit.\n/// Note: Returned array should be\
  \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15, 33,\
  \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n///\
  \ [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1,\
  \ 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
  \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31])\
  \ == [31, 135])"
completions: ['    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()',
  "    var result = [Int]()\n    for i in x {\n        if !has_even_digit(x: i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in x {\n        if i.description.filter({$0.isNumber\
    \ && $0.wholeNumberValue! % 2 != 0}).count == i.description.count {\n        \
    \    result.append(i)\n        }\n    }\n    return result.sorted()", "    var\
    \ result = [Int]()\n    for number in x {\n        if !has_even_digit(number:\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result.sorted()",
  "    var result: [Int] = []\n    for i in x {\n        if !has_even_digit(x: i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in x {\n        var is_even = false\n     \
    \   var num = i\n        while num > 0 {\n            if num % 10 % 2 == 0 {\n\
    \                is_even = true\n                break\n            }\n      \
    \      num /= 10\n        }\n        if !is_even {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for i in x {\n        if !has_even_digit(x: i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") || i.description.contains(\"\
    0\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return x.filter { $0.digits.allSatisfy
    { $0.isOdd } }.sorted()', "    var result: [Int] = []\n    for i in x {\n    \
    \    if !has_even_digit(x: i) {\n            result.append(i)\n        }\n   \
    \ }\n    return result.sorted()", "    var result: [Int] = []\n    for i in x\
    \ {\n        var is_even = false\n        var number = i\n        while number\
    \ > 0 {\n            if number % 10 % 2 == 0 {\n                is_even = true\n\
    \                break\n            }\n            number /= 10\n        }\n \
    \       if !is_even {\n            result.append(i)\n        }\n    }\n    return\
    \ result.sorted()", "    var result = [Int]()\n    for i in x {\n        if !has_even_digit(x:\
    \ i) {\n            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for num in x {\n        if !has_even_digit(num: num)\
    \ {\n            result.append(num)\n        }\n    }\n    return result.sorted()",
  "    var result: [Int] = []\n    for i in x {\n        if !has_even_digit(x: i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for number in x {\n        if !has_even_digit(number:\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in x {\n        if !i.hasEvenDigit() {\n  \
    \          result.append(i)\n        }\n    }\n    return result.sorted()", " \
    \   return x.filter {\n        var num = $0\n        while num > 0 {\n       \
    \     if num % 2 == 0 {\n                return false\n            }\n       \
    \     num /= 10\n        }\n        return true\n    }", '    return x.filter
    { $0.digits.allSatisfy { $0.isOdd } }.sorted()', "    var result: [Int] = []\n\
    \    for i in x {\n        if i.digits.filter({ $0 % 2 == 0 }).count == 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in x {\n        if !i.hasEvenDigit() {\n  \
    \          result.append(i)\n        }\n    }\n    return result.sorted()"]
stop_tokens:
- "\n}"
