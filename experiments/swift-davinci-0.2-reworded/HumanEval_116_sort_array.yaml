name: HumanEval_116_sort_array
language: swift
prompt: "\n/// In this Kata, you have to sort an array of non-negative integers according\
  \ to\n/// number of ones in their binary representation in ascending order.\n///\
  \ For similar number of ones, sort based on decimal value.\n/// It must be implemented\
  \ like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n/// [1, 2, 3, 4, 5]\n///\
  \ >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5, -4, -3, -2]\n/// >>> sort_array(arr:\
  \ [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1,\
  \ 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5,\
  \ -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
  \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7,\
  \ 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6,\
  \ 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16,\
  \ 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4,\
  \ 8, 16, 32])"
completions: ["    return arr.sorted(by: {\n        let a = String($0, radix: 2)\n\
    \        let b = String($1, radix: 2)\n        if a.filter({ $0 == \"1\" }).count\
    \ == b.filter({ $0 == \"1\" }).count {\n            return $0 < $1\n        }\n\
    \        return a.filter({ $0 == \"1\" }).count < b.filter({ $0 == \"1\" }).count\n\
    \    })", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n\
    \        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted(by: {\n        let a = String($0,\
    \ radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({ $0 ==\
    \ \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return $0 <\
    \ $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({ $0\
    \ == \"1\" }).count\n    })", "    return arr.sorted {\n        let a = String($0,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a < b\n    }", "  \
    \  return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    })", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n\
    \        let bBinary = String(b, radix: 2)\n        if aBinary.filter({ $0 ==\
    \ \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n            return\
    \ a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({\
    \ $0 == \"1\" }).count\n    }", "    return arr.sorted(by: { (a, b) -> Bool in\n\
    \        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })", "    return arr.sorted(by: {\n        let a = String($0,\
    \ radix: 2)\n        let b = String($1, radix: 2)\n        if a.filter({ $0 ==\
    \ \"1\" }).count == b.filter({ $0 == \"1\" }).count {\n            return $0 <\
    \ $1\n        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({ $0\
    \ == \"1\" }).count\n    })", "    return arr.sorted {\n        let a = String($0,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a < b\n    }", "  \
    \  return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted(by: {\n        let a = String($0, radix: 2).filter { $0 == \"1\"\
    \ }.count\n        let b = String($1, radix: 2).filter { $0 == \"1\" }.count\n\
    \        return a == b ? $0 < $1 : a < b\n    })", "    return arr.sorted(by:\
    \ {\n        let a = String($0, radix: 2).filter { $0 == \"1\" }.count\n     \
    \   let b = String($1, radix: 2).filter { $0 == \"1\" }.count\n        return\
    \ a == b ? $0 < $1 : a < b\n    })", "    return arr.sorted { (a, b) -> Bool in\n\
    \        let aOnes = String(a, radix: 2).filter { $0 == \"1\" }.count\n      \
    \  let bOnes = String(b, radix: 2).filter { $0 == \"1\" }.count\n        return\
    \ aOnes == bOnes ? a < b : aOnes < bOnes\n    }", "    return arr.sorted { (a,\
    \ b) -> Bool in\n        let aBinary = String(a, radix: 2)\n        let bBinary\
    \ = String(b, radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }", "    return arr.sorted {\n        let a = String($0, radix: 2)\n    \
    \    let b = String($1, radix: 2)\n        return a.filter { $0 == \"1\" }.count\
    \ < b.filter { $0 == \"1\" }.count\n            || (a.filter { $0 == \"1\" }.count\
    \ == b.filter { $0 == \"1\" }.count && $0 < $1)\n    }", "    return arr.sorted\
    \ { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n        let\
    \ bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter { $0 == \"\
    1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n      \
    \  if aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let aBinary\
    \ = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if\
    \ aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count\
    \ {\n            return a < b\n        }\n        return aBinary.filter({ $0 ==\
    \ \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n\
    \        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aOnes = String(a, radix: 2).filter { $0 == \"1\" }.count\n        let bOnes\
    \ = String(b, radix: 2).filter { $0 == \"1\" }.count\n        return aOnes ==\
    \ bOnes ? a < b : aOnes < bOnes\n    }"]
stop_tokens:
- "\n}"
