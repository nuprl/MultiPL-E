language: swift
name: HumanEval_46_fib4
results:
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4 = [0, 0, 2, 0]\n    if n <= 3 {\n        return fib4[n]\n\
    \    }\n    for _ in 4...n {\n        fib4.append(fib4[0] + fib4[1] + fib4[2]\
    \ + fib4[3])\n        fib4.removeFirst()\n    }\n    return fib4[3]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmg_z6x4z/tmpmg_z6x4z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fec0fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5febdf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5febdf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5febdf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmg_z6x4z                        0x0000563dbf9583b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5fec2e7460 __libc_start_main +
    245

    6    tmpmg_z6x4z                        0x0000563dbf957fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4_1 = 0\n    var fib4_2 = 0\n    var fib4_3 = 2\n    var\
    \ fib4_4 = 0\n    var fib4_n = 0\n    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n  \
    \  } else if n == 3 {\n        return 0\n    } else {\n        for _ in 4...n\
    \ {\n            fib4_n = fib4_1 + fib4_2 + fib4_3 + fib4_4\n            fib4_1\
    \ = fib4_2\n            fib4_2 = fib4_3\n            fib4_3 = fib4_4\n       \
    \     fib4_4 = fib4_n\n        }\n        return fib4_n\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 3...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpb83dx59w/tmpb83dx59w.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28ddce4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28dd9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28dd9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28dd9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb83dx59w                        0x000055adb64e8335 <unavailable> + 4917

    5    libc.so.6                          0x00002b28dded0460 __libc_start_main +
    245

    6    tmpb83dx59w                        0x000055adb64e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmg_z6x4z/tmpmg_z6x4z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fec0fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5febdf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5febdf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5febdf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmg_z6x4z                        0x0000563dbf9583b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5fec2e7460 __libc_start_main +
    245

    6    tmpmg_z6x4z                        0x0000563dbf957fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n       \
    \ return 2\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n\
    \    for _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n \
    \       c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp1qro8ixm/tmp1qro8ixm.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59ed722c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59ed419b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59ed419988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59ed4187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1qro8ixm                        0x00005582f9bff335 <unavailable> + 4917

    5    libc.so.6                          0x00002b59ed90e460 __libc_start_main +
    245

    6    tmp1qro8ixm                        0x00005582f9bfefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 4...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4 = [0, 0, 2, 0]\n    if n < 4 {\n        return fib4[n]\n\
    \    }\n    for i in 4...n {\n        fib4.append(fib4[i-1] + fib4[i-2] + fib4[i-3]\
    \ + fib4[i-4])\n    }\n    return fib4[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpq267dlc3/tmpq267dlc3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9056cc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90569c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90569c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90569bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq267dlc3                        0x000055cbb92791b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b9056eb5460 __libc_start_main +
    245

    6    tmpq267dlc3                        0x000055cbb9278e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    let fib4 = [0, 0, 2, 0]\n    var fib4_n = fib4\n    if n <= 3\
    \ {\n        return fib4[n]\n    }\n    for i in 4...n {\n        fib4_n.append(fib4_n[i-1]\
    \ + fib4_n[i-2] + fib4_n[i-3] + fib4_n[i-4])\n        fib4_n.removeFirst()\n \
    \   }\n    return fib4_n[3]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0131eaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0131ba1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0131ba1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0131ba113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0131ba0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b01319a0e83 <unavailable> + 188035

    6    tmpy30m1ruj                        0x000055f7cdba795c <unavailable> + 6492

    7    tmpy30m1ruj                        0x000055f7cdba7528 <unavailable> + 5416

    8    libc.so.6                          0x00002b0132096460 __libc_start_main +
    245

    9    tmpy30m1ruj                        0x000055f7cdba7249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // TODO: Implement this function\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi2hjguia/tmpi2hjguia.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0e12fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0e0ff1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0e0ff1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0e0ff07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2hjguia                        0x000055c7457a81b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac0e14e6460 __libc_start_main +
    245

    6    tmpi2hjguia                        0x000055c7457a7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpq267dlc3/tmpq267dlc3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9056cc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90569c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90569c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90569bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq267dlc3                        0x000055cbb92791b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b9056eb5460 __libc_start_main +
    245

    6    tmpq267dlc3                        0x000055cbb9278e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmg_z6x4z/tmpmg_z6x4z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fec0fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5febdf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5febdf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5febdf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmg_z6x4z                        0x0000563dbf9583b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5fec2e7460 __libc_start_main +
    245

    6    tmpmg_z6x4z                        0x0000563dbf957fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j\
    \ = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var o = 0\n    var p =\
    \ 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n\
    \    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n \
    \   var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n\
    \    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj =\
    \ 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao\
    \ = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var\
    \ at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n   \
    \ var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n\
    \    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh =\
    \ 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm\
    \ = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var\
    \ br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n   \
    \ var bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n\
    \    var cb = 0\n    var cc = 0\n    var cd = 0\n   \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpr2f7u8oj.swift:59:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmpr2f7u8oj.swift:59:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmpr2f7u8oj.swift:16:9: warning: initialization of variable\
    \ 'a' was never used; consider replacing with assignment to '_' or removing it\n\
    \    var a = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:17:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:18:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 2\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:19:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:20:9:\
    \ warning: initialization of variable 'e' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var e = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:21:9:\
    \ warning: initialization of variable 'f' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var f = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:22:9:\
    \ warning: initialization of variable 'g' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var g = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:23:9:\
    \ warning: initialization of variable 'h' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var h = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:24:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:25:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:26:9:\
    \ warning: initialization of variable 'k' was never used; co"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 3 {\n        return n\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptungmn1c/tmptungmn1c.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00383f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00380edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00380ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00380ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptungmn1c                        0x0000558e9b04d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b00385e2460 __libc_start_main +
    245

    6    tmptungmn1c                        0x0000558e9b04cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 4...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpq267dlc3/tmpq267dlc3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9056cc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90569c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90569c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90569bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq267dlc3                        0x000055cbb92791b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b9056eb5460 __libc_start_main +
    245

    6    tmpq267dlc3                        0x000055cbb9278e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpq267dlc3/tmpq267dlc3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9056cc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90569c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90569c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90569bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq267dlc3                        0x000055cbb92791b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b9056eb5460 __libc_start_main +
    245

    6    tmpq267dlc3                        0x000055cbb9278e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n \
    \   var n5 = 0\n    for _ in 4...n {\n        n5 = n1 + n2 + n3 + n4\n       \
    \ n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = n5\n    }\n    return\
    \ n5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n   \
    \ var n4 = 0\n    var result = 0\n    for _ in 4...n {\n        result = n1 +\
    \ n2 + n3 + n4\n        n1 = n2\n        n2 = n3\n        n3 = n4\n        n4\
    \ = result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n == 2 ? 2 : 0\n    }\n    var a =\
    \ 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n     \
    \   d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpanfoq0v2/tmpanfoq0v2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cef9f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cef6eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cef6ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cef6e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanfoq0v2                        0x000055ad013663b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5cefbdf460 __libc_start_main +
    245

    6    tmpanfoq0v2                        0x000055ad01365fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    var i = 3\n    while i <= n {\n        e = a + b + c + d\n      \
    \  a = b\n        b = c\n        c = d\n        d = e\n        i += 1\n    }\n\
    \    return e\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpm28a334w/tmpm28a334w.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5926890c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5926587b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5926587988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59265867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm28a334w                        0x000055d5719d81b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5926a7c460 __libc_start_main +
    245

    6    tmpm28a334w                        0x000055d5719d7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n \
    \   var n5 = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n  \
    \      return 0\n    } else if n == 2 {\n        return 2\n    } else if n ==\
    \ 3 {\n        return 0\n    } else {\n        for _ in 4...n {\n            n5\
    \ = n1 + n2 + n3 + n4\n            n1 = n2\n            n2 = n3\n            n3\
    \ = n4\n            n4 = n5\n        }\n        return n5\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 3...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpb83dx59w/tmpb83dx59w.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28ddce4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28dd9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28dd9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28dd9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb83dx59w                        0x000055adb64e8335 <unavailable> + 4917

    5    libc.so.6                          0x00002b28dded0460 __libc_start_main +
    245

    6    tmpb83dx59w                        0x000055adb64e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 4...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 3...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpb83dx59w/tmpb83dx59w.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28ddce4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28dd9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28dd9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28dd9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb83dx59w                        0x000055adb64e8335 <unavailable> + 4917

    5    libc.so.6                          0x00002b28dded0460 __libc_start_main +
    245

    6    tmpb83dx59w                        0x000055adb64e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n   \
    \ var n4 = 0\n    var n5 = 0\n    for _ in 4...n {\n        n5 = n1 + n2 + n3\
    \ + n4\n        n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = n5\n \
    \   }\n    return n5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824782
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var fib4\
    \ = [0, 0, 2, 0]\n    for i in 4...n {\n        fib4.append(fib4[i-1] + fib4[i-2]\
    \ + fib4[i-3] + fib4[i-4])\n    }\n    return fib4[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824782
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 4...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmg_z6x4z/tmpmg_z6x4z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fec0fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5febdf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5febdf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5febdf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmg_z6x4z                        0x0000563dbf9583b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5fec2e7460 __libc_start_main +
    245

    6    tmpmg_z6x4z                        0x0000563dbf957fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j\
    \ = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var o = 0\n    var p =\
    \ 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n\
    \    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n \
    \   var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n\
    \    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj =\
    \ 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao\
    \ = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var\
    \ at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n   \
    \ var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n\
    \    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh =\
    \ 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm\
    \ = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var\
    \ br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n   \
    \ var bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n\
    \    var cb = 0\n    var cc = 0\n    var cd = 0\n   \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpr2f7u8oj.swift:59:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmpr2f7u8oj.swift:59:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmpr2f7u8oj.swift:16:9: warning: initialization of variable\
    \ 'a' was never used; consider replacing with assignment to '_' or removing it\n\
    \    var a = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:17:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:18:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 2\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:19:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:20:9:\
    \ warning: initialization of variable 'e' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var e = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:21:9:\
    \ warning: initialization of variable 'f' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var f = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:22:9:\
    \ warning: initialization of variable 'g' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var g = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:23:9:\
    \ warning: initialization of variable 'h' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var h = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:24:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:25:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpr2f7u8oj.swift:26:9:\
    \ warning: initialization of variable 'k' was never used; co"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmg_z6x4z/tmpmg_z6x4z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fec0fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5febdf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5febdf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5febdf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmg_z6x4z                        0x0000563dbf9583b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5fec2e7460 __libc_start_main +
    245

    6    tmpmg_z6x4z                        0x0000563dbf957fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 3...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpb83dx59w/tmpb83dx59w.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28ddce4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28dd9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28dd9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28dd9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb83dx59w                        0x000055adb64e8335 <unavailable> + 4917

    5    libc.so.6                          0x00002b28dded0460 __libc_start_main +
    245

    6    tmpb83dx59w                        0x000055adb64e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4 = [0, 0, 2, 0]\n    if n <= 3 {\n        return fib4[n]\n\
    \    }\n    for i in 4...n {\n        fib4.append(fib4[i-1] + fib4[i-2] + fib4[i-3]\
    \ + fib4[i-4])\n    }\n    return fib4[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824782
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmg_z6x4z/tmpmg_z6x4z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fec0fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5febdf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5febdf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5febdf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmg_z6x4z                        0x0000563dbf9583b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5fec2e7460 __libc_start_main +
    245

    6    tmpmg_z6x4z                        0x0000563dbf957fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmg_z6x4z/tmpmg_z6x4z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fec0fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5febdf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5febdf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5febdf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmg_z6x4z                        0x0000563dbf9583b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5fec2e7460 __libc_start_main +
    245

    6    tmpmg_z6x4z                        0x0000563dbf957fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j\
    \ = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o =\
    \ 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n\
    \    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n \
    \   var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n\
    \    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai =\
    \ 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an\
    \ = 0\n    var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var\
    \ as = 0\n    var at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n   \
    \ var ax = 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n\
    \    var bc = 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg =\
    \ 0\n    var bh = 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl\
    \ = 0\n    var bm = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var\
    \ bq = 0\n    var br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n   \
    \ var bv = 0\n    var bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n\
    \    var ca = 0\n    var cb = 0\n    var cc = 0\n   \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp3h8s25_n.swift:60:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmp3h8s25_n.swift:60:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmp3h8s25_n.swift:16:9: warning: initialization of variable\
    \ 'a' was never used; consider replacing with assignment to '_' or removing it\n\
    \    var a = 0\n    ~~~~^\n    _\n/tmp/tmp3h8s25_n.swift:17:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 0\n    ~~~~^\n    _\n/tmp/tmp3h8s25_n.swift:18:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 2\n    ~~~~^\n    _\n/tmp/tmp3h8s25_n.swift:19:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 0\n    ~~~~^\n    _\n/tmp/tmp3h8s25_n.swift:20:9:\
    \ warning: initialization of variable 'e' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var e = 0\n    ~~~~^\n    _\n/tmp/tmp3h8s25_n.swift:21:9:\
    \ warning: initialization of variable 'f' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var f = 0\n    ~~~~^\n    _\n/tmp/tmp3h8s25_n.swift:22:9:\
    \ warning: initialization of variable 'g' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var g = 0\n    ~~~~^\n    _\n/tmp/tmp3h8s25_n.swift:23:9:\
    \ warning: initialization of variable 'h' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var h = 0\n    ~~~~^\n    _\n/tmp/tmp3h8s25_n.swift:24:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmp3h8s25_n.swift:25:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmp3h8s25_n.swift:26:9:\
    \ warning: initialization of variable 'k' was never used; co"
  stdout: ''
  timestamp: 1659824782
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 3...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpb83dx59w/tmpb83dx59w.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28ddce4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28dd9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28dd9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28dd9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb83dx59w                        0x000055adb64e8335 <unavailable> + 4917

    5    libc.so.6                          0x00002b28dded0460 __libc_start_main +
    245

    6    tmpb83dx59w                        0x000055adb64e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 4...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmg_z6x4z/tmpmg_z6x4z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fec0fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5febdf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5febdf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5febdf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmg_z6x4z                        0x0000563dbf9583b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5fec2e7460 __libc_start_main +
    245

    6    tmpmg_z6x4z                        0x0000563dbf957fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    // TODO: Implement\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpxvi7nn0e/tmpxvi7nn0e.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c3f62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c3c59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c3c59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c3c587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxvi7nn0e                        0x000055e8fa6381b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ba6c414e460 __libc_start_main +
    245

    6    tmpxvi7nn0e                        0x000055e8fa637e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824782
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmg_z6x4z/tmpmg_z6x4z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fec0fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5febdf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5febdf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5febdf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmg_z6x4z                        0x0000563dbf9583b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5fec2e7460 __libc_start_main +
    245

    6    tmpmg_z6x4z                        0x0000563dbf957fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 4...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpq267dlc3/tmpq267dlc3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9056cc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90569c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90569c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90569bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq267dlc3                        0x000055cbb92791b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b9056eb5460 __libc_start_main +
    245

    6    tmpq267dlc3                        0x000055cbb9278e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmg_z6x4z/tmpmg_z6x4z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fec0fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5febdf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5febdf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5febdf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmg_z6x4z                        0x0000563dbf9583b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5fec2e7460 __libc_start_main +
    245

    6    tmpmg_z6x4z                        0x0000563dbf957fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpq267dlc3/tmpq267dlc3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9056cc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90569c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90569c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90569bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq267dlc3                        0x000055cbb92791b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b9056eb5460 __libc_start_main +
    245

    6    tmpq267dlc3                        0x000055cbb9278e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmg_z6x4z/tmpmg_z6x4z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fec0fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5febdf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5febdf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5febdf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmg_z6x4z                        0x0000563dbf9583b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5fec2e7460 __libc_start_main +
    245

    6    tmpmg_z6x4z                        0x0000563dbf957fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ i = 3\n    while i <= n {\n        d = a + b + c\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmphbciv_3i/tmphbciv_3i.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fc437ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fc4071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fc4071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fc40707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbciv_3i                        0x00005579bb52e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3fc4566460 __libc_start_main +
    245

    6    tmphbciv_3i                        0x00005579bb52de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvu0vnlrj/tmpvu0vnlrj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c35b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56c32abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56c32ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56c32aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu0vnlrj                        0x000055804c7a93b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b56c37a0460 __libc_start_main +
    245

    6    tmpvu0vnlrj                        0x000055804c7a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n == 2 ? 2 : 0\n    }\n    var a =\
    \ 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n     \
    \   d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpanfoq0v2/tmpanfoq0v2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cef9f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cef6eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cef6ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cef6e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanfoq0v2                        0x000055ad013663b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5cefbdf460 __libc_start_main +
    245

    6    tmpanfoq0v2                        0x000055ad01365fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n   \
    \     d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_jrrwc4n/tmp_jrrwc4n.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8105cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81059b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81059b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81059b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jrrwc4n                        0x000055e6baf423b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b8105eae460 __libc_start_main +
    245

    6    tmp_jrrwc4n                        0x000055e6baf41fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var fib4 = [0, 0, 2, 0]\n    if n < 4 {\n        return fib4[n]\n\
    \    }\n    for i in 4...n {\n        fib4.append(fib4[i-1] + fib4[i-2] + fib4[i-3]\
    \ + fib4[i-4])\n    }\n    return fib4[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n   \
    \ var n4 = 0\n    var n5 = 0\n    for _ in 4...n {\n        n5 = n1 + n2 + n3\
    \ + n4\n        n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = n5\n \
    \   }\n    return n5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824782
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpq267dlc3/tmpq267dlc3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9056cc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90569c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90569c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90569bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq267dlc3                        0x000055cbb92791b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b9056eb5460 __libc_start_main +
    245

    6    tmpq267dlc3                        0x000055cbb9278e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n < 4 {\n        return n\n    }\n    var fib4 = [0, 0, 2,\
    \ 0]\n    for i in 4...n {\n        fib4.append(fib4[i-1] + fib4[i-2] + fib4[i-3]\
    \ + fib4[i-4])\n    }\n    return fib4[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824782
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpksaccymz/tmpksaccymz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60206dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac601d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac601d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac601d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksaccymz                        0x00005606d30d4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac602259460 __libc_start_main +
    245

    6    tmpksaccymz                        0x00005606d30d3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpvvkzt9td/tmpvvkzt9td.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e3c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e3c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e3c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvkzt9td                        0x000055e0d282f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b21e40f8460 __libc_start_main +
    245

    6    tmpvvkzt9td                        0x000055e0d282efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n///\
    \ 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int)\
    \ -> Int {\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var\
    \ e = 0\n    for _ in 3...n {\n        e = a + b + c + d\n        a = b\n    \
    \    b = c\n        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpb83dx59w/tmpb83dx59w.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28ddce4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28dd9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28dd9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28dd9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb83dx59w                        0x000055adb64e8335 <unavailable> + 4917

    5    libc.so.6                          0x00002b28dded0460 __libc_start_main +
    245

    6    tmpb83dx59w                        0x000055adb64e7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824781
