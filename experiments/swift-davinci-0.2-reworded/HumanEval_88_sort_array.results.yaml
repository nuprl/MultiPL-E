language: swift
name: HumanEval_88_sort_array
results:
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ sum = array[0] + array[array.count - 1]\n    return sum % 2 == 0 ? array.sorted(by:\
    \ >) : array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    if array.count > 1 {\n        if\
    \ array[0] + array[array.count - 1] % 2 == 0 {\n            sortedArray.sort(by:\
    \ >)\n        } else {\n            sortedArray.sort(by: <)\n        }\n    }\n\
    \    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_3qkg667/tmp_3qkg667.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3aa174cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3aa1443b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3aa1443988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3aa14427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3qkg667                        0x00005611fc2e0934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3aa1938460 __libc_start_main +
    245

    6    tmp_3qkg667                        0x00005611fc2e0189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        let sum = first + last\n\
    \        if sum % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        if result[0]\
    \ + result[result.count - 1] % 2 == 0 {\n            result.sort(by: >)\n    \
    \    } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1mtrso4o/tmp1mtrso4o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae485e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae485b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae485b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae485b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mtrso4o                        0x0000559168d71934 <unavailable> + 6452

    5    libc.so.6                          0x00002ae48601b460 __libc_start_main +
    245

    6    tmp1mtrso4o                        0x0000559168d71189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let first =\
    \ array.first!\n    let last = array.last!\n    let sum = first + last\n    if\
    \ sum % 2 == 0 {\n        return sort_array(array: Array(array.dropFirst().dropLast()))\
    \ + [last] + [first]\n    } else {\n        return [first] + sort_array(array:\
    \ Array(array.dropFirst().dropLast())) + [last]\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpp0bzsmcs/tmpp0bzsmcs.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95bb5bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95bb2b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95bb2b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95bb2b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0bzsmcs                        0x000055b15ca06a76 <unavailable> + 6774

    5    libc.so.6                          0x00002b95bb7aa460 __libc_start_main +
    245

    6    tmpp0bzsmcs                        0x000055b15ca06459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0 {\n        return\
    \ array.sorted(by: >)\n    } else {\n        return array.sorted()\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0\
    \ {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 0 {\n        if result[0]\
    \ + result[result.count - 1] % 2 == 0 {\n            result.sort(by: >)\n    \
    \    } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwwdueatx/tmpwwdueatx.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba83e465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba83e15cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba83e15c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba83e15b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwdueatx                        0x00005556eab40934 <unavailable> + 6452

    5    libc.so.6                          0x00002ba83e651460 __libc_start_main +
    245

    6    tmpwwdueatx                        0x00005556eab40189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if (array[0] + array[1]) % 2 == 0 {\n          \
    \  array.swapAt(0, 1)\n        }\n        return array\n    }\n    var i = 0\n\
    \    var j = array.count - 1\n    while i < j {\n        if (array[i] + array[j])\
    \ % 2 == 0 {\n            array.swapAt(i, j)\n        }\n        i += 1\n    \
    \    j -= 1\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp3tnrbdv3/tmp3tnrbdv3.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b729515ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7294e55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7294e55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7294e547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3tnrbdv3                        0x000055c3887ac7c6 <unavailable> + 6086

    5    libc.so.6                          0x00002b729534a460 __libc_start_main +
    245

    6    tmp3tnrbdv3                        0x000055c3887ac1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: sum % 2 == 0 ? >\
    \ : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpink_5xr1.swift:19:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpink_5xr1.swift:19:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpink_5xr1.swift:18:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    let sum = array.first! + array.last!\n\
    \    if sum % 2 == 0 {\n        sortedArray.sort(by: >)\n    } else {\n      \
    \  sortedArray.sort(by: <)\n    }\n    return sortedArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfg4xqjr1/tmpfg4xqjr1.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6426a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae642398561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae642398286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae64239813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae642397bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpfg4xqjr1                        0x00005572e773aefd <unavailable> + 7933

    6    tmpfg4xqjr1                        0x00005572e773a50d <unavailable> + 5389

    7    libc.so.6                          0x00002ae64288d460 __libc_start_main +
    245

    8    tmpfg4xqjr1                        0x00005572e773a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard !array.isEmpty else { return array }\n    var array =\
    \ array\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n        array.sort(by:\
    \ >)\n    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0\
    \ {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    for i in 0..<array.count {\n        for\
    \ j in i..<array.count {\n            if (i + j) % 2 == 0 {\n                if\
    \ array[i] < array[j] {\n                    array.swapAt(i, j)\n            \
    \    }\n            } else {\n                if array[i] > array[j] {\n     \
    \               array.swapAt(i, j)\n                }\n            }\n       \
    \ }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpktbwwoxp/tmpktbwwoxp.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b225e2b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b225dfa7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b225dfa7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b225dfa67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktbwwoxp                        0x0000559dd83148c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b225e49c460 __libc_start_main +
    245

    6    tmpktbwwoxp                        0x0000559dd83142a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        let first\
    \ = array.removeFirst()\n        let last = array.removeLast()\n        let sum\
    \ = first + last\n        if sum % 2 == 0 {\n            array.sort(by: >)\n \
    \       } else {\n            array.sort(by: <)\n        }\n        return [first]\
    \ + array + [last]\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpmzemcbsj/tmpmzemcbsj.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d2659fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d26296b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d26296988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d262957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmzemcbsj                        0x0000560b6ca538f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b0d2678b460 __libc_start_main +
    245

    6    tmpmzemcbsj                        0x0000560b6ca532d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count == 0 {\n        return\
    \ result\n    }\n    if result.count == 1 {\n        return result\n    }\n  \
    \  if result.count == 2 {\n        if result[0] > result[1] {\n            let\
    \ temp = result[0]\n            result[0] = result[1]\n            result[1] =\
    \ temp\n        }\n        return result\n    }\n    if (result[0] + result[result.count\
    \ - 1]) % 2 == 0 {\n        for i in 0..<result.count / 2 {\n            let temp\
    \ = result[i]\n            result[i] = result[result.count - 1 - i]\n        \
    \    result[result.count - 1 - i] = temp\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp8u3m0iiv/tmp8u3m0iiv.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9838c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9838927b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9838927988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98389267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8u3m0iiv                        0x000055bd10f67876 <unavailable> + 6262

    5    libc.so.6                          0x00002b9838e1c460 __libc_start_main +
    245

    6    tmp8u3m0iiv                        0x000055bd10f67259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let first = array.removeFirst()\n    let last = array.removeLast()\n\
    \    let sum = first + last\n    if sum % 2 == 0 {\n        array.sort(by: >)\n\
    \    } else {\n        array.sort(by: <)\n    }\n    return [first] + array +\
    \ [last]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7ix37cb3/tmp7ix37cb3.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50f5ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50f59d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50f59d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50f59d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ix37cb3                        0x000056160d8738f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b50f5ece460 __libc_start_main +
    245

    6    tmp7ix37cb3                        0x000056160d8732d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { (a, b) -> Bool in\n        return (a +\
    \ b) % 2 == 0 ? a > b : a < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_4hsfnxs/tmp_4hsfnxs.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc41715c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc4140cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc4140c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc4140b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_4hsfnxs                        0x000055fb6b9f16f6 <unavailable> + 5878

    5    libc.so.6                          0x00002afc41901460 __libc_start_main +
    245

    6    tmp_4hsfnxs                        0x000055fb6b9f10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        if result[0]\
    \ + result[result.count - 1] % 2 == 0 {\n            result.sort(by: >)\n    \
    \    } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1mtrso4o/tmp1mtrso4o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae485e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae485b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae485b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae485b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mtrso4o                        0x0000559168d71934 <unavailable> + 6452

    5    libc.so.6                          0x00002ae48601b460 __libc_start_main +
    245

    6    tmp1mtrso4o                        0x0000559168d71189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var array\
    \ = array\n    let first = array.removeFirst()\n    let last = array.removeLast()\n\
    \    let sum = first + last\n    if sum % 2 == 0 {\n        array.sort(by: >)\n\
    \    } else {\n        array.sort(by: <)\n    }\n    return [first] + array +\
    \ [last]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfx2ojje0/tmpfx2ojje0.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74fb906c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74fb5fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74fb5fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74fb5fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfx2ojje0                        0x000055d554c8e8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b74fbaf2460 __libc_start_main +
    245

    6    tmpfx2ojje0                        0x000055d554c8e2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: { (a, b) -> Bool in\n        if (a +\
    \ b) % 2 == 0 {\n            return a > b\n        } else {\n            return\
    \ a < b\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp4v3u6pgf/tmp4v3u6pgf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad285f8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad285c85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad285c85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad285c847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4v3u6pgf                        0x0000561b1d7a56f6 <unavailable> + 5878

    5    libc.so.6                          0x00002ad28617a460 __libc_start_main +
    245

    6    tmp4v3u6pgf                        0x0000561b1d7a50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.first! + array.last!\n\
    \    if sum % 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp5iovv1h7/tmp5iovv1h7.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2406583c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b240627a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b240627a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b240627a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2406279bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5iovv1h7                        0x000056133d6fbefd <unavailable> + 7933

    6    tmp5iovv1h7                        0x000056133d6fb50d <unavailable> + 5389

    7    libc.so.6                          0x00002b240676f460 __libc_start_main +
    245

    8    tmp5iovv1h7                        0x000056133d6fb219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0\
    \ {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count == 0 {\n        return\
    \ result\n    }\n    if result.count == 1 {\n        return result\n    }\n  \
    \  if result.count == 2 {\n        if result[0] > result[1] {\n            result.swapAt(0,\
    \ 1)\n        }\n        return result\n    }\n    if (result[0] + result[result.count\
    \ - 1]) % 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0\
    \ {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted { $0 < $1 }\n    return\
    \ sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var array\
    \ = array\n    let first = array.removeFirst()\n    let last = array.removeLast()\n\
    \    let sum = first + last\n    if sum % 2 == 0 {\n        array.sort(by: >)\n\
    \    } else {\n        array.sort(by: <)\n    }\n    return [first] + array +\
    \ [last]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfx2ojje0/tmpfx2ojje0.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74fb906c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74fb5fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74fb5fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74fb5fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfx2ojje0                        0x000055d554c8e8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b74fbaf2460 __libc_start_main +
    245

    6    tmpfx2ojje0                        0x000055d554c8e2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if array[0]\
    \ > array[1] {\n            return [array[1], array[0]]\n        }\n        return\
    \ array\n    }\n    var result = array\n    let first = result[0]\n    let last\
    \ = result[result.count - 1]\n    if (first + last) % 2 == 0 {\n        result\
    \ = result.sorted(by: >)\n    } else {\n        result = result.sorted(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    let sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        return array.sorted(by: >)\n    } else\
    \ {\n        return array.sorted(by: <)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    if array.count > 1 {\n        if\
    \ array[0] + array[array.count - 1] % 2 == 0 {\n            sortedArray.sort(by:\
    \ >)\n        } else {\n            sortedArray.sort(by: <)\n        }\n    }\n\
    \    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_3qkg667/tmp_3qkg667.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3aa174cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3aa1443b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3aa1443988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3aa14427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3qkg667                        0x00005611fc2e0934 <unavailable> + 6452

    5    libc.so.6                          0x00002b3aa1938460 __libc_start_main +
    245

    6    tmp_3qkg667                        0x00005611fc2e0189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if (array[0] + array[1]) % 2 == 0 {\n          \
    \  array.swapAt(0, 1)\n        }\n        return array\n    }\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        array.sort(by: >)\n    } else\
    \ {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0t45jm_4/tmp0t45jm_4.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d644ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d6141b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d6141988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d61407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0t45jm_4                        0x000055f997c87b12 <unavailable> + 6930

    5    libc.so.6                          0x00002ab4d6636460 __libc_start_main +
    245

    6    tmp0t45jm_4                        0x000055f997c87229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var newArray = array\n    if newArray.count == 0 {\n       \
    \ return newArray\n    }\n    if newArray.count == 1 {\n        return newArray\n\
    \    }\n    if (newArray[0] + newArray[newArray.count - 1]) % 2 == 0 {\n     \
    \   newArray.sort(by: >)\n    } else {\n        newArray.sort(by: <)\n    }\n\
    \    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    while i < result.count\
    \ - 1 {\n        if (result[i] + result[result.count - 1]) % 2 == 0 {\n      \
    \      result.swapAt(i, result.count - 1)\n        }\n        i += 1\n    }\n\
    \    return result.sorted(by: { $0 < $1 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbrnson5e/tmpbrnson5e.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b404d0f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b404cdebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b404cdeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b404cdea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrnson5e                        0x0000555916b159c4 <unavailable> + 6596

    5    libc.so.6                          0x00002b404d2e0460 __libc_start_main +
    245

    6    tmpbrnson5e                        0x0000555916b15219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let sum\
    \ = array[0] + array[array.count - 1]\n        if sum % 2 == 0 {\n           \
    \ result.sort(by: >)\n        } else {\n            result.sort(by: <)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        if (array[start] + array[end]) % 2 ==\
    \ 0 {\n            array.swapAt(start, end)\n        }\n        start += 1\n \
    \       end -= 1\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpoyg7t047/tmpoyg7t047.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38bc580c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38bc277b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38bc277988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38bc2767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoyg7t047                        0x000055e5165957c6 <unavailable> + 6086

    5    libc.so.6                          0x00002b38bc76c460 __libc_start_main +
    245

    6    tmpoyg7t047                        0x000055e5165951a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ array = array\n    let first = array[0]\n    let last = array[array.count -\
    \ 1]\n    let sum = first + last\n    if sum % 2 == 0 {\n        array.sort(by:\
    \ >)\n    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let sum\
    \ = array[0] + array[array.count - 1]\n        if sum % 2 == 0 {\n           \
    \ result.sort(by: >)\n        } else {\n            result.sort(by: <)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var sortedArray\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        sortedArray.sort(by: >)\n    } else {\n        sortedArray.sort(by:\
    \ <)\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    for i in 0..<array.count {\n        for j in 0..<array.count -\
    \ 1 {\n            if (array[i] + array[j]) % 2 == 0 {\n                result[i]\
    \ = array[j]\n                result[j] = array[i]\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpep1gepd9/tmpep1gepd9.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b492f08fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b492ed86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b492ed86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b492ed857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpep1gepd9                        0x0000560c2ae7a876 <unavailable> + 6262

    5    libc.so.6                          0x00002b492f27b460 __libc_start_main +
    245

    6    tmpep1gepd9                        0x0000560c2ae7a259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    var isAscending = true\n    if array.count > 0 {\n        isAscending\
    \ = (array[0] + array[array.count - 1]) % 2 == 0\n    }\n    while i < j {\n \
    \       if isAscending {\n            if result[i] > result[j] {\n           \
    \     let temp = result[i]\n                result[i] = result[j]\n          \
    \      result[j] = temp\n            }\n        } else {\n            if result[i]\
    \ < result[j] {\n                let temp = result[i]\n                result[i]\
    \ = result[j]\n                result[j] = temp\n            }\n        }\n  \
    \      i += 1\n        j -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_irhht9s/tmp_irhht9s.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d8bf78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d8bc6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d8bc6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d8bc6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_irhht9s                        0x000055ed7f6ee786 <unavailable> + 6022

    5    libc.so.6                          0x00002b9d8c164460 __libc_start_main +
    245

    6    tmp_irhht9s                        0x000055ed7f6ee169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sum = array.first! + array.last!\n\
    \    if sum % 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp5iovv1h7/tmp5iovv1h7.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2406583c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b240627a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b240627a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b240627a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2406279bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5iovv1h7                        0x000056133d6fbefd <unavailable> + 7933

    6    tmp5iovv1h7                        0x000056133d6fb50d <unavailable> + 5389

    7    libc.so.6                          0x00002b240676f460 __libc_start_main +
    245

    8    tmp5iovv1h7                        0x000056133d6fb219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    var array = array\n    let first =\
    \ array[0]\n    let last = array[array.count - 1]\n    let sum = first + last\n\
    \    if sum % 2 == 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by:\
    \ <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        let sum = first + last\n\
    \        if sum % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    let isOdd = sum\
    \ % 2 == 1\n    for i in 0..<array.count {\n        for j in 0..<array.count -\
    \ 1 {\n            if isOdd {\n                if array[j] > array[j + 1] {\n\
    \                    let temp = array[j]\n                    array[j] = array[j\
    \ + 1]\n                    array[j + 1] = temp\n                }\n         \
    \   } else {\n                if array[j] < array[j + 1] {\n                 \
    \   let temp = array[j]\n                    array[j] = array[j + 1]\n       \
    \             array[j + 1] = temp\n                }\n            }\n        }\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0\
    \ {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted { $0 < $1 }\n    return\
    \ sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    for i in 0..<result.count {\n      \
    \  for j in 0..<result.count - 1 {\n            if (i + j) % 2 == 0 {\n      \
    \          if result[j] > result[j + 1] {\n                    result.swapAt(j,\
    \ j + 1)\n                }\n            } else {\n                if result[j]\
    \ < result[j + 1] {\n                    result.swapAt(j, j + 1)\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptdh3ugg7/tmptdh3ugg7.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab39fd9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab39fa94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab39fa94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab39fa937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptdh3ugg7                        0x00005640293b28c6 <unavailable> + 6342

    5    libc.so.6                          0x00002ab39ff89460 __libc_start_main +
    245

    6    tmptdh3ugg7                        0x00005640293b22a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    if array.first! + array.last! % 2 == 0 {\n        result.sort(by:\
    \ >)\n    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpnnsafgv5/tmpnnsafgv5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1eaeaf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1eae7ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1eae7ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1eae7eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnsafgv5                        0x000055a7343f4a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b1eaece1460 __libc_start_main +
    245

    6    tmpnnsafgv5                        0x000055a7343f4269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let first = result.removeFirst()\n    let last = result.removeLast()\n\
    \    if (first + last) % 2 == 0 {\n        result.sort(by: >)\n    } else {\n\
    \        result.sort(by: <)\n    }\n    return [first] + result + [last]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7mq65fd_/tmp7mq65fd_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94c4c05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94c48fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94c48fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94c48fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7mq65fd_                        0x000055d2ae1ef8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b94c4df1460 __libc_start_main +
    245

    6    tmp7mq65fd_                        0x000055d2ae1ef2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            return [array[1], array[0]]\n        } else\
    \ {\n            return array\n        }\n    }\n    var newArray = array\n  \
    \  var i = 0\n    while i < newArray.count - 1 {\n        if (newArray[i] + newArray[i\
    \ + 1]) % 2 == 0 {\n            newArray.swapAt(i, i + 1)\n            i = 0\n\
    \        } else {\n            i += 1\n        }\n    }\n    return newArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013824
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0\
    \ {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            return [array[1], array[0]]\n        } else\
    \ {\n            return array\n        }\n    }\n    var result = array\n    var\
    \ i = 0\n    var j = array.count - 1\n    while i < j {\n        if (result[i]\
    \ + result[j]) % 2 == 0 {\n            let temp = result[i]\n            result[i]\
    \ = result[j]\n            result[j] = temp\n            i += 1\n            j\
    \ -= 1\n        } else {\n            i += 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpp3nnc7ne/tmpp3nnc7ne.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3edea73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ede76ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ede76a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ede7697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3nnc7ne                        0x000055acd78b4786 <unavailable> + 6022

    5    libc.so.6                          0x00002b3edec5f460 __libc_start_main +
    245

    6    tmpp3nnc7ne                        0x000055acd78b4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        let first\
    \ = result.first!\n        let last = result.last!\n        if (first + last)\
    \ % 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            let temp =\
    \ array[0]\n            array[0] = array[1]\n            array[1] = temp\n   \
    \     }\n        return array\n    }\n    if (array[0] + array[array.count - 1])\
    \ % 2 == 0 {\n        for i in 0..<array.count - 1 {\n            for j in 0..<array.count\
    \ - 1 - i {\n                if array[j] < array[j + 1] {\n                  \
    \  let temp = array[j]\n                    array[j] = array[j + 1]\n        \
    \            array[j + 1] = temp\n                }\n            }\n        }\n\
    \    } else {\n        for i in 0..<array.count - 1 {\n            for j in 0..<array.count\
    \ - 1 - i {\n                if array[j] > array[j + 1] {\n                  \
    \  let temp = array[j]\n                    array[j] = array[j + 1]\n        \
    \            array[j + 1] = temp\n                }\n            }\n        }\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        let first\
    \ = result.first!\n        let last = result.last!\n        if (first + last)\
    \ % 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 0 {\n        if (result[0]\
    \ + result[result.count - 1]) % 2 == 0 {\n            result.sort(by: >)\n   \
    \     } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if array[0]\
    \ > array[1] {\n            return [array[1], array[0]]\n        }\n        return\
    \ array\n    }\n    var array = array\n    let first = array[0]\n    let last\
    \ = array[array.count - 1]\n    let sum = first + last\n    if sum % 2 == 0 {\n\
    \        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n \
    \   return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        if result[0]\
    \ + result[result.count - 1] % 2 == 0 {\n            result.sort(by: >)\n    \
    \    } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1mtrso4o/tmp1mtrso4o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae485e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae485b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae485b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae485b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mtrso4o                        0x0000559168d71934 <unavailable> + 6452

    5    libc.so.6                          0x00002ae48601b460 __libc_start_main +
    245

    6    tmp1mtrso4o                        0x0000559168d71189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    for i in 0..<result.count {\n      \
    \  for j in i+1..<result.count {\n            if (result[i] + result[result.count\
    \ - 1]) % 2 == 0 {\n                if result[i] < result[j] {\n             \
    \       result.swapAt(i, j)\n                }\n            } else {\n       \
    \         if result[i] > result[j] {\n                    result.swapAt(i, j)\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpyohg9jsy/tmpyohg9jsy.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496bb19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496b810b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496b810988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496b80f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyohg9jsy                        0x000055917eb3b8c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b496bd05460 __libc_start_main +
    245

    6    tmpyohg9jsy                        0x000055917eb3b2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            let temp =\
    \ array[0]\n            array[0] = array[1]\n            array[1] = temp\n   \
    \     }\n        return array\n    }\n    let sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        array.sort(by: >)\n    } else {\n     \
    \   array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: sum % 2 == 0 ? >\
    \ : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpink_5xr1.swift:19:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpink_5xr1.swift:19:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpink_5xr1.swift:18:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ result = array\n    let first = array[0]\n    let last = array[array.count -\
    \ 1]\n    if (first + last) % 2 == 0 {\n        result.sort(by: >)\n    } else\
    \ {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp21fczsuy/tmp21fczsuy.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91e4bb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91e48b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91e48b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91e48af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21fczsuy                        0x000055aee8dd0934 <unavailable> + 6452

    5    libc.so.6                          0x00002b91e4da5460 __libc_start_main +
    245

    6    tmp21fczsuy                        0x000055aee8dd0189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n            array.sort(by: >)\n      \
    \  } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted { (a, b) -> Bool in\n\
    \        if sum % 2 == 0 {\n            return a > b\n        } else {\n     \
    \       return a < b\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        if result[0]\
    \ + result[result.count - 1] % 2 == 0 {\n            result.sort(by: >)\n    \
    \    } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1mtrso4o/tmp1mtrso4o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae485e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae485b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae485b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae485b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mtrso4o                        0x0000559168d71934 <unavailable> + 6452

    5    libc.so.6                          0x00002ae48601b460 __libc_start_main +
    245

    6    tmp1mtrso4o                        0x0000559168d71189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    while i < array.count\
    \ {\n        var j = i + 1\n        while j < array.count {\n            if (i\
    \ + j) % 2 == 0 {\n                if array[i] < array[j] {\n                \
    \    let temp = array[i]\n                    array[i] = array[j]\n          \
    \          array[j] = temp\n                }\n            } else {\n        \
    \        if array[i] > array[j] {\n                    let temp = array[i]\n \
    \                   array[i] = array[j]\n                    array[j] = temp\n\
    \                }\n            }\n            j += 1\n        }\n        i +=\
    \ 1\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpo3v9eewz/tmpo3v9eewz.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad89d15fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad89ce56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad89ce56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad89ce557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3v9eewz                        0x00005604f829c786 <unavailable> + 6022

    5    libc.so.6                          0x00002ad89d34b460 __libc_start_main +
    245

    6    tmpo3v9eewz                        0x00005604f829c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            let temp =\
    \ array[0]\n            array[0] = array[1]\n            array[1] = temp\n   \
    \     }\n        return array\n    }\n    let first = array[0]\n    let last =\
    \ array[array.count - 1]\n    if (first + last) % 2 == 0 {\n        for i in 0..<array.count\
    \ {\n            for j in i..<array.count {\n                if array[i] < array[j]\
    \ {\n                    let temp = array[i]\n                    array[i] = array[j]\n\
    \                    array[j] = temp\n                }\n            }\n     \
    \   }\n    } else {\n        for i in 0..<array.count {\n            for j in\
    \ i..<array.count {\n                if array[i] > array[j] {\n              \
    \      let temp = array[i]\n                    array[i] = array[j]\n        \
    \            array[j] = temp\n                }\n            }\n        }\n  \
    \  }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let first =\
    \ array.first!\n    let last = array.last!\n    let sum = first + last\n    let\
    \ sorted = array.sorted()\n    return sum % 2 == 0 ? sorted.reversed() : sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: sum % 2 == 0 ? >\
    \ : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpink_5xr1.swift:19:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpink_5xr1.swift:19:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpink_5xr1.swift:18:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if array[0]\
    \ > array[1] {\n            return [array[1], array[0]]\n        }\n        return\
    \ array\n    }\n    var array = array\n    let sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        array.sort(by: >)\n    } else {\n     \
    \   array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: sum % 2 == 0 ? >\
    \ : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpink_5xr1.swift:19:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpink_5xr1.swift:19:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpink_5xr1.swift:18:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    var result = array\n    let sum = array[0]\
    \ + array[array.count - 1]\n    if sum % 2 == 0 {\n        result.sort(by: >)\n\
    \    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6osmd47x/tmp6osmd47x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5859c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5859c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5859c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6osmd47x                        0x000055ef41ae647d <unavailable> + 5245

    5    libc.so.6                          0x00002ae585eb9460 __libc_start_main +
    245

    6    tmp6osmd47x                        0x000055ef41ae5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfl93_npy/tmpfl93_npy.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b342978fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3429486b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3429486988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34294857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfl93_npy                        0x000055de37037934 <unavailable> + 6452

    5    libc.so.6                          0x00002b342997b460 __libc_start_main +
    245

    6    tmpfl93_npy                        0x000055de37037189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ result = array\n    let first = array[0]\n    let last = array[array.count -\
    \ 1]\n    if (first + last) % 2 == 0 {\n        result.sort(by: >)\n    } else\
    \ {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (i + j) % 2 == 0 {\n            if result[i]\
    \ > result[j] {\n                result.swapAt(i, j)\n            }\n        \
    \    j -= 1\n        } else {\n            if result[i] < result[j] {\n      \
    \          result.swapAt(i, j)\n            }\n            i += 1\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpb96jiojq/tmpb96jiojq.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b428af49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b428ac40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b428ac40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b428ac3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb96jiojq                        0x0000560be99167c6 <unavailable> + 6086

    5    libc.so.6                          0x00002b428b135460 __libc_start_main +
    245

    6    tmpb96jiojq                        0x0000560be99161a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    var left = 0\n    var right = array.count - 1\n    while left\
    \ < right {\n        if (array[left] + array[right]) % 2 == 0 {\n            array.swapAt(left,\
    \ right)\n        }\n        left += 1\n        right -= 1\n    }\n    return\
    \ array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpl20nb07r/tmpl20nb07r.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8133c48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b813393fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b813393f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b813393e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl20nb07r                        0x0000559e10a587c6 <unavailable> + 6086

    5    libc.so.6                          0x00002b8133e34460 __libc_start_main +
    245

    6    tmpl20nb07r                        0x0000559e10a581a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        let first\
    \ = result.first!\n        let last = result.last!\n        if (first + last)\
    \ % 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            array.sort(by: >)\n        } else {\n\
    \            array.sort(by: <)\n        }\n    }\n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6_6nocqn/tmp6_6nocqn.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af58eb94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58e88bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58e88b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58e88a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6_6nocqn                        0x0000562ebde43a14 <unavailable> + 6676

    5    libc.so.6                          0x00002af58ed80460 __libc_start_main +
    245

    6    tmp6_6nocqn                        0x0000562ebde43269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            let temp =\
    \ array[0]\n            array[0] = array[1]\n            array[1] = temp\n   \
    \     }\n        return array\n    }\n    var isOdd = false\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 1 {\n        isOdd = true\n    }\n    for i\
    \ in 0..<array.count {\n        for j in i..<array.count {\n            if isOdd\
    \ {\n                if array[i] > array[j] {\n                    let temp =\
    \ array[i]\n                    array[i] = array[j]\n                    array[j]\
    \ = temp\n                }\n            } else {\n                if array[i]\
    \ < array[j] {\n                    let temp = array[i]\n                    array[i]\
    \ = array[j]\n                    array[j] = temp\n                }\n       \
    \     }\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            let temp =\
    \ array[0]\n            array[0] = array[1]\n            array[1] = temp\n   \
    \     }\n        return array\n    }\n    if (array[0] + array[array.count - 1])\
    \ % 2 == 0 {\n        for i in 0..<array.count {\n            for j in 0..<array.count\
    \ - 1 {\n                if array[j] < array[j + 1] {\n                    let\
    \ temp = array[j]\n                    array[j] = array[j + 1]\n             \
    \       array[j + 1] = temp\n                }\n            }\n        }\n   \
    \ } else {\n        for i in 0..<array.count {\n            for j in 0..<array.count\
    \ - 1 {\n                if array[j] > array[j + 1] {\n                    let\
    \ temp = array[j]\n                    array[j] = array[j + 1]\n             \
    \       array[j + 1] = temp\n                }\n            }\n        }\n   \
    \ }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    if sortedArray.count > 1 {\n  \
    \      if sortedArray[0] + sortedArray[sortedArray.count - 1] % 2 == 0 {\n   \
    \         sortedArray.sort(by: >)\n        } else {\n            sortedArray.sort(by:\
    \ <)\n        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp9l3z8qtp/tmp9l3z8qtp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc92047c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc91d3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc91d3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc91d3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9l3z8qtp                        0x0000555590422934 <unavailable> + 6452

    5    libc.so.6                          0x00002afc92233460 __libc_start_main +
    245

    6    tmp9l3z8qtp                        0x0000555590422189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let isEven = (array[0] + array[array.count - 1]) % 2 == 0\n   \
    \ for i in 0..<result.count {\n        for j in 0..<result.count - 1 {\n     \
    \       if isEven {\n                if result[j] < result[j + 1] {\n        \
    \            result.swapAt(j, j + 1)\n                }\n            } else {\n\
    \                if result[j] > result[j + 1] {\n                    result.swapAt(j,\
    \ j + 1)\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if (array[0] + array[array.count -\
    \ 1]) % 2 == 0 {\n        return array.sorted(by: >)\n    } else {\n        return\
    \ array.sorted()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if array[0]\
    \ > array[1] {\n            return [array[1], array[0]]\n        }\n        return\
    \ array\n    }\n    var result = array\n    var left = 0\n    var right = array.count\
    \ - 1\n    while left < right {\n        if (array[left] + array[right]) % 2 ==\
    \ 0 {\n            result[left] = array[right]\n            result[right] = array[left]\n\
    \        }\n        left += 1\n        right -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjqdmu19y/tmpjqdmu19y.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b546c0a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b546bd9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b546bd9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b546bd9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjqdmu19y                        0x0000558c23743786 <unavailable> + 6022

    5    libc.so.6                          0x00002b546c291460 __libc_start_main +
    245

    6    tmpjqdmu19y                        0x0000558c23743169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            let temp =\
    \ array[0]\n            array[0] = array[1]\n            array[1] = temp\n   \
    \     }\n        return array\n    }\n    let sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        for i in 0..<array.count / 2 {\n      \
    \      let temp = array[i]\n            array[i] = array[array.count - 1 - i]\n\
    \            array[array.count - 1 - i] = temp\n        }\n    } else {\n    \
    \    for i in 0..<array.count / 2 {\n            let temp = array[i]\n       \
    \     array[i] = array[array.count - 1 - i]\n            array[array.count - 1\
    \ - i] = temp\n        }\n        for i in 0..<array.count - 1 {\n           \
    \ for j in 0..<array.count - 1 - i {\n                if array[j] > array[j +\
    \ 1] {\n                    let temp = array[j]\n                    array[j]\
    \ = array[j + 1]\n                    array[j + 1] = temp\n                }\n\
    \            }\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpvd7r92qr/tmpvd7r92qr.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b0873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b056ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b056a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b05697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvd7r92qr                        0x000055f8ceabfa04 <unavailable> + 6660

    5    libc.so.6                          0x00002b21b0a5f460 __libc_start_main +
    245

    6    tmpvd7r92qr                        0x000055f8ceabf259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    for i in 0..<result.count {\n      \
    \  for j in 0..<result.count {\n            if (i + j) % 2 == 0 {\n          \
    \      if result[i] < result[j] {\n                    result.swapAt(i, j)\n \
    \               }\n            } else {\n                if result[i] > result[j]\
    \ {\n                    result.swapAt(i, j)\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpqqmhupam/tmpqqmhupam.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed0e174c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed0de6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed0de6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed0de6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqmhupam                        0x000055ca205708c6 <unavailable> + 6342

    5    libc.so.6                          0x00002aed0e360460 __libc_start_main +
    245

    6    tmpqqmhupam                        0x000055ca205702a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: sum % 2 == 0 ? >\
    \ : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpink_5xr1.swift:19:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpink_5xr1.swift:19:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpink_5xr1.swift:18:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count < 2 {\n        return\
    \ array\n    }\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n      \
    \  array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n    return\
    \ array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n            array.sort(by: >)\n      \
    \  } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            array.swapAt(0,\
    \ 1)\n        }\n        return array\n    }\n    if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        for i in 0..<array.count / 2 {\n            array.swapAt(i,\
    \ array.count - 1 - i)\n        }\n    }\n    for i in 0..<array.count {\n   \
    \     for j in 0..<array.count - 1 - i {\n            if array[j] > array[j +\
    \ 1] {\n                array.swapAt(j, j + 1)\n            }\n        }\n   \
    \ }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfozlbi0f/tmpfozlbi0f.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b445801bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4457d12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4457d12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4457d117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfozlbi0f                        0x00005587b76ada54 <unavailable> + 6740

    5    libc.so.6                          0x00002b4458207460 __libc_start_main +
    245

    6    tmpfozlbi0f                        0x00005587b76ad2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sortedArray = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpdk7s3c68.swift:19:55: error: unary operator cannot be separated\
    \ from its operand\n    let sortedArray = array.sorted(by: sum % 2 == 0 ? > :\
    \ <)\n                                                      ^~\n             \
    \                                          \n/tmp/tmpdk7s3c68.swift:19:57: error:\
    \ expected expression after '?' in ternary expression\n    let sortedArray = array.sorted(by:\
    \ sum % 2 == 0 ? > : <)\n                                                    \
    \    ^\n/tmp/tmpdk7s3c68.swift:18:9: warning: initialization of immutable value\
    \ 'sum' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let sum = array[0] + array[array.count - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    array.swapAt(i, j)\n        }\n        i += 1\n        j -= 1\n    }\n  \
    \  return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaihs8spg/tmpaihs8spg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d8a661c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d8a358b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d8a358988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d8a3577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaihs8spg                        0x000055c119e157c6 <unavailable> + 6086

    5    libc.so.6                          0x00002b5d8a84d460 __libc_start_main +
    245

    6    tmpaihs8spg                        0x000055c119e151a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        let sum\
    \ = result[0] + result[result.count - 1]\n        if sum % 2 == 0 {\n        \
    \    result.sort(by: >)\n        } else {\n            result.sort(by: <)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    let temp = array[i]\n            array[i] = array[j]\n            array[j]\
    \ = temp\n        }\n        i += 1\n        j -= 1\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpgi9rrj22/tmpgi9rrj22.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b67037c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b66d2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b66d2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b66d2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi9rrj22                        0x0000563e94729786 <unavailable> + 6022

    5    libc.so.6                          0x00002b7b67223460 __libc_start_main +
    245

    6    tmpgi9rrj22                        0x0000563e94729169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if array[i] % 2 == 0 && array[j] % 2 == 1 {\n\
    \            array.swapAt(i, j)\n            i += 1\n            j -= 1\n    \
    \    } else if array[i] % 2 == 1 && array[j] % 2 == 0 {\n            i += 1\n\
    \            j -= 1\n        } else if array[i] % 2 == 0 && array[j] % 2 == 0\
    \ {\n            j -= 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    if (array.first! + array.last!) % 2 == 0 {\n        array.reverse()\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmplaqtma4y/tmplaqtma4y.swift:34: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b1435354c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b143504b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b143504b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b143504b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b143504abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmplaqtma4y                        0x0000557c7ae82755 <unavailable> + 10069

    6    tmplaqtma4y                        0x0000557c7ae8163d <unavailable> + 5693

    7    libc.so.6                          0x00002b1435540460 __libc_start_main +
    245

    8    tmplaqtma4y                        0x0000557c7ae81349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: { (a, b) -> Bool in\n        return\
    \ (a + b) % 2 == 0 ? a > b : a < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptl3a9gtz/tmptl3a9gtz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5194dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f51644b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f51644988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f516437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptl3a9gtz                        0x000055869ce366f6 <unavailable> + 5878

    5    libc.so.6                          0x00002b0f51b39460 __libc_start_main +
    245

    6    tmptl3a9gtz                        0x000055869ce360d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            array.swapAt(0,\
    \ 1)\n        }\n        return array\n    }\n    if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by:\
    \ <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count <= 1 {\n        return\
    \ result\n    }\n    if array.count % 2 == 0 {\n        result.sort(by: >)\n \
    \   } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfwn56c9j/tmpfwn56c9j.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabdcee6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabdcbddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabdcbdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabdcbdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfwn56c9j                        0x0000556196552756 <unavailable> + 5974

    5    libc.so.6                          0x00002aabdd0d2460 __libc_start_main +
    245

    6    tmpfwn56c9j                        0x0000556196552139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: { $0 < $1 })\n \
    \   return sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    while i < j {\n        if (array[i] + array[j]) % 2 == 0 {\n        \
    \    let temp = array[i]\n            array[i] = array[j]\n            array[j]\
    \ = temp\n        }\n        i += 1\n        j -= 1\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpgi9rrj22/tmpgi9rrj22.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b67037c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b66d2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b66d2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b66d2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgi9rrj22                        0x0000563e94729786 <unavailable> + 6022

    5    libc.so.6                          0x00002b7b67223460 __libc_start_main +
    245

    6    tmpgi9rrj22                        0x0000563e94729169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        var left\
    \ = 0\n        var right = result.count - 1\n        if (result[left] + result[right])\
    \ % 2 == 0 {\n            while left < right {\n                while left < right\
    \ && (result[left] + result[right]) % 2 == 0 {\n                    left += 1\n\
    \                }\n                while left < right && (result[left] + result[right])\
    \ % 2 == 1 {\n                    right -= 1\n                }\n            \
    \    if left < right {\n                    let temp = result[left]\n        \
    \            result[left] = result[right]\n                    result[right] =\
    \ temp\n                }\n            }\n        }\n        left = 0\n      \
    \  right = result.count - 1\n        while left < right {\n            while left\
    \ < right && result[left] % 2 == 1 {\n                left += 1\n            }\n\
    \            while left < right && result[right] % 2 == 0 {\n                right\
    \ -= 1\n            }\n            if left < right {\n                let temp\
    \ = result[left]\n                result[left] = result[right]\n             \
    \   result[right] = temp\n            }\n        }\n        left = 0\n       \
    \ right = result.count - 1\n        while left < right {\n            while left\
    \ < right && result[left] % 2 == 0 {\n                left += 1\n            }\n\
    \            while left < right && result[right] % 2 == 1 {\n                right\
    \ -= 1\n            }\n            if left < right {\n                let temp\
    \ = result[left]\n                result[left] = result[right]\n             \
    \   result[right] = temp\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpykp2vuox/tmpykp2vuox.swift:85: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88ffb4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88ff846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88ff846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88ff8457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpykp2vuox                        0x00005632bbc4c786 <unavailable> + 6022

    5    libc.so.6                          0x00002b88ffd3b460 __libc_start_main +
    245

    6    tmpykp2vuox                        0x00005632bbc4c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp21fczsuy/tmp21fczsuy.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91e4bb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91e48b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91e48b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91e48af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21fczsuy                        0x000055aee8dd0934 <unavailable> + 6452

    5    libc.so.6                          0x00002b91e4da5460 __libc_start_main +
    245

    6    tmp21fczsuy                        0x000055aee8dd0189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted { $0 < $1 }\n    return\
    \ sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let sum\
    \ = array[0] + array[array.count - 1]\n        if sum % 2 == 0 {\n           \
    \ result.sort(by: >)\n        } else {\n            result.sort(by: <)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0\
    \ {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted()\n \
    \   if sum % 2 == 0 {\n        return sorted.reversed()\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted { $0 < $1 }\n    return\
    \ sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: sum % 2 == 0 ? >\
    \ : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpink_5xr1.swift:19:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpink_5xr1.swift:19:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpink_5xr1.swift:18:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        let first\
    \ = array.removeFirst()\n        let last = array.removeLast()\n        if (first\
    \ + last) % 2 == 0 {\n            array.sort(by: >)\n        } else {\n      \
    \      array.sort(by: <)\n        }\n        array.insert(first, at: 0)\n    \
    \    array.append(last)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpralblh8q/tmpralblh8q.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7c2621c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7c2318b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7c2318988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7c23177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpralblh8q                        0x000055d2a213b946 <unavailable> + 6470

    5    libc.so.6                          0x00002ae7c280d460 __libc_start_main +
    245

    6    tmpralblh8q                        0x000055d2a213b329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    for i in 0..<array.count {\n        for\
    \ j in 0..<array.count - 1 {\n            if (i + j) % 2 == 0 {\n            \
    \    if array[j] > array[j + 1] {\n                    let temp = array[j]\n \
    \                   array[j] = array[j + 1]\n                    array[j + 1]\
    \ = temp\n                }\n            } else {\n                if array[j]\
    \ < array[j + 1] {\n                    let temp = array[j]\n                \
    \    array[j] = array[j + 1]\n                    array[j + 1] = temp\n      \
    \          }\n            }\n        }\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmplk_7ugam/tmplk_7ugam.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0166c61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0166958b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0166958988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01669577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplk_7ugam                        0x000055c9c9d8b876 <unavailable> + 6262

    5    libc.so.6                          0x00002b0166e4d460 __libc_start_main +
    245

    6    tmplk_7ugam                        0x000055c9c9d8b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.first! + array.last!\n    return sum % 2 ==\
    \ 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpmpq9ky1g/tmpmpq9ky1g.swift:17: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ca60ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ca305561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af0ca305286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af0ca30513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af0ca304bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmpq9ky1g                        0x00005558d2151f7b <unavailable> + 8059

    6    tmpmpq9ky1g                        0x00005558d215159d <unavailable> + 5533

    7    libc.so.6                          0x00002af0ca7fa460 __libc_start_main +
    245

    8    tmpmpq9ky1g                        0x00005558d21512a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        if result[0]\
    \ + result[result.count - 1] % 2 == 0 {\n            result.sort(by: >)\n    \
    \    } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1mtrso4o/tmp1mtrso4o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae485e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae485b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae485b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae485b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mtrso4o                        0x0000559168d71934 <unavailable> + 6452

    5    libc.so.6                          0x00002ae48601b460 __libc_start_main +
    245

    6    tmp1mtrso4o                        0x0000559168d71189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count == 0 {\n        return\
    \ result\n    }\n    if result.count == 1 {\n        return result\n    }\n  \
    \  if result.count == 2 {\n        if result[0] > result[1] {\n            result.swapAt(0,\
    \ 1)\n        }\n        return result\n    }\n    if result[0] + result[result.count\
    \ - 1] % 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpi_ip3w34/tmpi_ip3w34.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad27c5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad27c2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad27c2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad27c2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_ip3w34                        0x00005623040da9d4 <unavailable> + 6612

    5    libc.so.6                          0x00002ad27c7a5460 __libc_start_main +
    245

    6    tmpi_ip3w34                        0x00005623040da229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: {\n        let sum = $0 + $1\n     \
    \   return sum % 2 == 0 ? $0 > $1 : $0 < $1\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp167dga9e/tmp167dga9e.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e76aa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e7679cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e7679c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e7679b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp167dga9e                        0x00005635968596f6 <unavailable> + 5878

    5    libc.so.6                          0x00002b0e76c91460 __libc_start_main +
    245

    6    tmp167dga9e                        0x00005635968590d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n            result.sort(by: >)\n     \
    \   } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013820
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        if result[0]\
    \ + result[result.count - 1] % 2 == 0 {\n            result.sort(by: >)\n    \
    \    } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1mtrso4o/tmp1mtrso4o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae485e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae485b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae485b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae485b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1mtrso4o                        0x0000559168d71934 <unavailable> + 6452

    5    libc.so.6                          0x00002ae48601b460 __libc_start_main +
    245

    6    tmp1mtrso4o                        0x0000559168d71189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    var sortedArray = array\n    let firstIndex\
    \ = sortedArray.first!\n    let lastIndex = sortedArray.last!\n    if (firstIndex\
    \ + lastIndex) % 2 == 0 {\n        sortedArray.sort(by: >)\n    } else {\n   \
    \     sortedArray.sort(by: <)\n    }\n    return sortedArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013820
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if (array[0] + array[array.count -\
    \ 1]) % 2 == 0 {\n        return array.sorted(by: >)\n    } else {\n        return\
    \ array.sorted()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: { $0 < $1 })\n \
    \   return sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            array.sort(by: >)\n       \
    \ } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp21fczsuy/tmp21fczsuy.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91e4bb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91e48b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91e48b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91e48af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21fczsuy                        0x000055aee8dd0934 <unavailable> + 6452

    5    libc.so.6                          0x00002b91e4da5460 __libc_start_main +
    245

    6    tmp21fczsuy                        0x000055aee8dd0189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        if (result[0]\
    \ + result[result.count - 1]) % 2 == 0 {\n            result.sort(by: >)\n   \
    \     } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013820
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        let first\
    \ = array.first!\n        let last = array.last!\n        if (first + last) %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        let first\
    \ = result.first!\n        let last = result.last!\n        if (first + last)\
    \ % 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { (a, b) -> Bool in\n        return (a +\
    \ b) % 2 == 0 ? a > b : a < b\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_4hsfnxs/tmp_4hsfnxs.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc41715c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc4140cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc4140c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc4140b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_4hsfnxs                        0x000055fb6b9f16f6 <unavailable> + 5878

    5    libc.so.6                          0x00002afc41901460 __libc_start_main +
    245

    6    tmp_4hsfnxs                        0x000055fb6b9f10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard !array.isEmpty else { return array }\n    let sum = array.first!\
    \ + array.last!\n    let sortedArray = array.sorted()\n    return sum % 2 == 0\
    \ ? sortedArray.reversed() : sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013820
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n            result.sort(by: >)\n     \
    \   } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.first! + array.last!\n    return sum % 2 ==\
    \ 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpmpq9ky1g/tmpmpq9ky1g.swift:17: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af0ca60ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0ca305561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af0ca305286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af0ca30513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af0ca304bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpmpq9ky1g                        0x00005558d2151f7b <unavailable> + 8059

    6    tmpmpq9ky1g                        0x00005558d215159d <unavailable> + 5533

    7    libc.so.6                          0x00002af0ca7fa460 __libc_start_main +
    245

    8    tmpmpq9ky1g                        0x00005558d21512a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        let first\
    \ = result.first!\n        let last = result.last!\n        if (first + last)\
    \ % 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfl93_npy/tmpfl93_npy.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b342978fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3429486b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3429486988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34294857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfl93_npy                        0x000055de37037934 <unavailable> + 6452

    5    libc.so.6                          0x00002b342997b460 __libc_start_main +
    245

    6    tmpfl93_npy                        0x000055de37037189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0 {\n        return\
    \ array.sorted(by: >)\n    } else {\n        return array.sorted()\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    if array.count > 1 {\n        let\
    \ first = array.first!\n        let last = array.last!\n        if (first + last)\
    \ % 2 == 0 {\n            sortedArray = array.sorted(by: >)\n        } else {\n\
    \            sortedArray = array.sorted(by: <)\n        }\n    }\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted()\n \
    \   if sum % 2 == 0 {\n        return sorted.reversed()\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count == 0 {\n        return\
    \ array\n    }\n    if array.count == 1 {\n        return array\n    }\n    if\
    \ array.count == 2 {\n        if array[0] > array[1] {\n            array.swapAt(0,\
    \ 1)\n        }\n        return array\n    }\n    if array[0] + array[array.count\
    \ - 1] % 2 == 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by:\
    \ <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpy967wof6/tmpy967wof6.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b303344bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3033142b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3033142988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30331417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy967wof6                        0x000055f324e919d4 <unavailable> + 6612

    5    libc.so.6                          0x00002b3033637460 __libc_start_main +
    245

    6    tmpy967wof6                        0x000055f324e91229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count > 1 {\n        let first\
    \ = result.first!\n        let last = result.last!\n        if (first + last)\
    \ % 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6osmd47x/tmp6osmd47x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5859c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5859c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5859c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6osmd47x                        0x000055ef41ae647d <unavailable> + 5245

    5    libc.so.6                          0x00002ae585eb9460 __libc_start_main +
    245

    6    tmp6osmd47x                        0x000055ef41ae5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 0 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            result.sort(by: >)\n      \
    \  } else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfl93_npy/tmpfl93_npy.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b342978fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3429486b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3429486988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34294857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfl93_npy                        0x000055de37037934 <unavailable> + 6452

    5    libc.so.6                          0x00002b342997b460 __libc_start_main +
    245

    6    tmpfl93_npy                        0x000055de37037189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted(by: sum % 2 == 0 ? >\
    \ : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpink_5xr1.swift:19:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpink_5xr1.swift:19:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpink_5xr1.swift:18:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0\
    \ {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        var start\
    \ = 0\n        var end = array.count - 1\n        while start < end {\n      \
    \      if (array[start] + array[end]) % 2 == 0 {\n                array.swapAt(start,\
    \ end)\n            }\n            start += 1\n            end -= 1\n        }\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwcdq0_qs/tmpwcdq0_qs.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd18c5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd18951b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd18951988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd189507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcdq0_qs                        0x000056279d14c7c6 <unavailable> + 6086

    5    libc.so.6                          0x00002acd18e46460 __libc_start_main +
    245

    6    tmpwcdq0_qs                        0x000056279d14c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count == 0 {\n        return\
    \ result\n    }\n    if result.count == 1 {\n        return result\n    }\n  \
    \  if result.count == 2 {\n        if result[0] > result[1] {\n            let\
    \ temp = result[0]\n            result[0] = result[1]\n            result[1] =\
    \ temp\n        }\n        return result\n    }\n    if result[0] + result[result.count\
    \ - 1] % 2 == 0 {\n        for i in 0..<result.count / 2 {\n            let temp\
    \ = result[i]\n            result[i] = result[result.count - 1 - i]\n        \
    \    result[result.count - 1 - i] = temp\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp5mfcfszo/tmp5mfcfszo.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae26aa32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae26a729b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae26a729988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae26a7287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5mfcfszo                        0x0000561dca33a876 <unavailable> + 6262

    5    libc.so.6                          0x00002ae26ac1e460 __libc_start_main +
    245

    6    tmp5mfcfszo                        0x0000561dca33a259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013820
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0\
    \ {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if array.first!\
    \ + array.last! % 2 == 0 {\n            result.sort(by: >)\n        } else {\n\
    \            result.sort(by: <)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw5o4javl/tmpw5o4javl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b252612dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2525e24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2525e24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2525e237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5o4javl                        0x00005585a1558a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b2526319460 __libc_start_main +
    245

    6    tmpw5o4javl                        0x00005585a1558269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013818
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let sorted = array.sorted()\n    return sum %\
    \ 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
