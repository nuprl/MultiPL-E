name: HumanEval_127_intersection
language: swift
prompt: "\n/// You are given two intervals,\n/// where each interval is a pair of\
  \ integers. For example, interval = (start, end) = (1, 2).\n/// The given intervals\
  \ are closed which means that the interval (start, end)\n/// includes both start\
  \ and end.\n/// For each given interval, it is assumed that its start is less or\
  \ equal its end.\n/// Your task is to determine whether the length of intersection\
  \ of these two \n/// intervals is a prime number.\n/// Example, the intersection\
  \ of the intervals (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not\
  \ a prime number.\n/// If the length of the intersection is a prime number, return\
  \ \"YES\",\n/// otherwise, return \"NO\".\n/// If the two intervals don't intersect,\
  \ return \"NO\".\n/// [input/output] samples:\n/// >>> intersection(interval1: (1,\
  \ 2), interval2: (2, 3))\n/// \"NO\"\n/// >>> intersection(interval1: (-1, 1), interval2:\
  \ (0, 4))\n/// \"NO\"\n/// >>> intersection(interval1: (-3, -1), interval2: (-5,\
  \ 5))\n/// \"YES\"\nfunc intersection(interval1: (Int, Int), interval2: (Int, Int))\
  \ -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(intersection(interval1: (1, 2), interval2:\
  \ (2, 3)) == \"NO\")\nassert(intersection(interval1: (-1, 1), interval2: (0, 4))\
  \ == \"NO\")\nassert(intersection(interval1: (-3, -1), interval2: (-5, 5)) == \"\
  YES\")\nassert(intersection(interval1: (-2, 2), interval2: (-4, 0)) == \"YES\")\n\
  assert(intersection(interval1: (-11, 2), interval2: (-1, -1)) == \"NO\")\nassert(intersection(interval1:\
  \ (1, 2), interval2: (3, 5)) == \"NO\")\nassert(intersection(interval1: (1, 2),\
  \ interval2: (1, 2)) == \"NO\")\nassert(intersection(interval1: (-2, -2), interval2:\
  \ (-3, -2)) == \"NO\")"
completions: ["    let (start1, end1) = interval1\n    let (start2, end2) = interval2\n\
    \    let start = max(start1, start2)\n    let end = min(end1, end2)\n    if start\
    \ > end {\n        return \"NO\"\n    }\n    let length = end - start + 1\n  \
    \  return isPrime(length) ? \"YES\" : \"NO\"", "    let start = max(interval1.0,\
    \ interval2.0)\n    let end = min(interval1.1, interval2.1)\n    if start > end\
    \ {\n        return \"NO\"\n    }\n    let length = end - start + 1\n    return\
    \ isPrime(number: length) ? \"YES\" : \"NO\"", "    let (start1, end1) = interval1\n\
    \    let (start2, end2) = interval2\n    let start = max(start1, start2)\n   \
    \ let end = min(end1, end2)\n    if start > end {\n        return \"NO\"\n   \
    \ }\n    let length = end - start + 1\n    return isPrime(length) ? \"YES\" :\
    \ \"NO\"", "    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    if start > end {\n        return \"NO\"\n    }\n    let length\
    \ = end - start + 1\n    return isPrime(length) ? \"YES\" : \"NO\"", "    let\
    \ (start1, end1) = interval1\n    let (start2, end2) = interval2\n    let start\
    \ = max(start1, start2)\n    let end = min(end1, end2)\n    if start > end {\n\
    \        return \"NO\"\n    }\n    let length = end - start + 1\n    return isPrime(number:\
    \ length) ? \"YES\" : \"NO\"", "    let (start1, end1) = interval1\n    let (start2,\
    \ end2) = interval2\n    let start = max(start1, start2)\n    let end = min(end1,\
    \ end2)\n    let length = end - start\n    return isPrime(length) ? \"YES\" :\
    \ \"NO\"", "    let (start1, end1) = interval1\n    let (start2, end2) = interval2\n\
    \    let start = max(start1, start2)\n    let end = min(end1, end2)\n    if start\
    \ > end {\n        return \"NO\"\n    }\n    let length = end - start + 1\n  \
    \  return isPrime(length) ? \"YES\" : \"NO\"", "    let start = max(interval1.0,\
    \ interval2.0)\n    let end = min(interval1.1, interval2.1)\n    if start > end\
    \ {\n        return \"NO\"\n    }\n    return isPrime(end - start + 1) ? \"YES\"\
    \ : \"NO\"", "    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1,\
    \ interval2.1)\n    let length = end - start\n    if length < 0 {\n        return\
    \ \"NO\"\n    }\n    return isPrime(length) ? \"YES\" : \"NO\"", "    let (start1,\
    \ end1) = interval1\n    let (start2, end2) = interval2\n    if start1 > end1\
    \ || start2 > end2 {\n        return \"NO\"\n    }\n    let start = max(start1,\
    \ start2)\n    let end = min(end1, end2)\n    if start > end {\n        return\
    \ \"NO\"\n    }\n    let length = end - start + 1\n    return isPrime(length)\
    \ ? \"YES\" : \"NO\"", "    let start = max(interval1.0, interval2.0)\n    let\
    \ end = min(interval1.1, interval2.1)\n    let length = end - start\n    return\
    \ isPrime(length) ? \"YES\" : \"NO\"", "    let (start1, end1) = interval1\n \
    \   let (start2, end2) = interval2\n    let start = max(start1, start2)\n    let\
    \ end = min(end1, end2)\n    if start > end {\n        return \"NO\"\n    }\n\
    \    let length = end - start + 1\n    return isPrime(length) ? \"YES\" : \"NO\"",
  "    let (start1, end1) = interval1\n    let (start2, end2) = interval2\n    let\
    \ start = max(start1, start2)\n    let end = min(end1, end2)\n    if start > end\
    \ {\n        return \"NO\"\n    }\n    let length = end - start + 1\n    if length\
    \ == 1 {\n        return \"NO\"\n    }\n    if length == 2 {\n        return \"\
    YES\"\n    }\n    if length % 2 == 0 {\n        return \"NO\"\n    }\n    for\
    \ i in 3...length / 2 {\n        if length % i == 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"", "    let (start1, end1) = interval1\n\
    \    let (start2, end2) = interval2\n    let start = max(start1, start2)\n   \
    \ let end = min(end1, end2)\n    if start > end {\n        return \"NO\"\n   \
    \ }\n    let length = end - start + 1\n    if length == 1 {\n        return \"\
    NO\"\n    }\n    for i in 2..<length {\n        if length % i == 0 {\n       \
    \     return \"NO\"\n        }\n    }\n    return \"YES\"", "    let (start1,\
    \ end1) = interval1\n    let (start2, end2) = interval2\n    let start = max(start1,\
    \ start2)\n    let end = min(end1, end2)\n    if start > end {\n        return\
    \ \"NO\"\n    }\n    let length = end - start + 1\n    return isPrime(number:\
    \ length) ? \"YES\" : \"NO\"", "    let (start1, end1) = interval1\n    let (start2,\
    \ end2) = interval2\n    let start = max(start1, start2)\n    let end = min(end1,\
    \ end2)\n    if start > end {\n        return \"NO\"\n    }\n    let length =\
    \ end - start + 1\n    return isPrime(length) ? \"YES\" : \"NO\"", "    let start\
    \ = max(interval1.0, interval2.0)\n    let end = min(interval1.1, interval2.1)\n\
    \    if start > end {\n        return \"NO\"\n    }\n    let length = end - start\
    \ + 1\n    return isPrime(length) ? \"YES\" : \"NO\"", "    let (start1, end1)\
    \ = interval1\n    let (start2, end2) = interval2\n    let start = max(start1,\
    \ start2)\n    let end = min(end1, end2)\n    if start > end {\n        return\
    \ \"NO\"\n    }\n    let length = end - start + 1\n    return isPrime(length)\
    \ ? \"YES\" : \"NO\"", "    let (a, b) = interval1\n    let (c, d) = interval2\n\
    \    let start = max(a, c)\n    let end = min(b, d)\n    if start > end {\n  \
    \      return \"NO\"\n    }\n    return isPrime(number: end - start + 1) ? \"\
    YES\" : \"NO\"", "    let start = max(interval1.0, interval2.0)\n    let end =\
    \ min(interval1.1, interval2.1)\n    if start > end {\n        return \"NO\"\n\
    \    }\n    let length = end - start + 1\n    if isPrime(length) {\n        return\
    \ \"YES\"\n    }\n    return \"NO\""]
stop_tokens:
- "\n}"
