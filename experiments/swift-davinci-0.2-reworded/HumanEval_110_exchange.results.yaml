language: swift
name: HumanEval_110_exchange
results:
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpue8w0zj3/tmpue8w0zj3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b315972ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3159421b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3159421988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31594207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpue8w0zj3                        0x000055d22502587f <unavailable> + 6271

    5    libc.so.6                          0x00002b3159916460 __libc_start_main +
    245

    6    tmpue8w0zj3                        0x000055d2250252d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count ==\
    \ lst1.count || lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp1hn2jyo4/tmp1hn2jyo4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a97c6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a97965b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a97965988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a979647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1hn2jyo4                        0x000056077de8562d <unavailable> + 5677

    5    libc.so.6                          0x00002b0a97e5a460 __libc_start_main +
    245

    6    tmp1hn2jyo4                        0x000056077de851f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == lst2.count {\n                return \"\
    NO\"\n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7v8hzz5v/tmp7v8hzz5v.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b637708ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6376d85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6376d85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6376d847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7v8hzz5v                        0x000055e80ba0377f <unavailable> + 6015

    5    libc.so.6                          0x00002b637727a460 __libc_start_main +
    245

    6    tmp7v8hzz5v                        0x000055e80ba031d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count && lst2Even.count\
    \ == lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"YES\"\n    } else if lst1Even.count\
    \ == lst1.count {\n        return \"YES\"\n    } else if lst2Even.count == lst2.count\
    \ {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count {\n   \
    \     return \"YES\"\n    } else if lst2Odd.count == lst2.count {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpbhic63cv/tmpbhic63cv.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71bd803c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71bd4fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71bd4fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71bd4f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhic63cv                        0x00005577f0e6962d <unavailable> + 5677

    5    libc.so.6                          0x00002b71bd9ef460 __libc_start_main +
    245

    6    tmpbhic63cv                        0x00005577f0e691f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7unu543i/tmp7unu543i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78ad9b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ad6abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ad6ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ad6aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7unu543i                        0x000055c21bf6462d <unavailable> + 5677

    5    libc.so.6                          0x00002b78adba0460 __libc_start_main +
    245

    6    tmp7unu543i                        0x000055c21bf641f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ == 0 {\n            evenCount += 1\n        }\n    }\n    if evenCount == lst1.count\
    \ {\n        return \"YES\"\n    }\n    var oddCount = 0\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 != 0 {\n            oddCount += 1\n        }\n   \
    \ }\n    if oddCount == lst2.count {\n        return \"NO\"\n    }\n    var evenCount1\
    \ = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 0 {\n        \
    \    evenCount1 += 1\n        }\n    }\n    if evenCount1 == lst1.count {\n  \
    \      return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmppc67le6l/tmppc67le6l.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac90657ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac906275b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac906275988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9062747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc67le6l                        0x00005556e4eef6bd <unavailable> + 5821

    5    libc.so.6                          0x00002ac90676a460 __libc_start_main +
    245

    6    tmppc67le6l                        0x00005556e4eef289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp8nbua0uz/tmp8nbua0uz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac883eb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac883babb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac883bab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac883baa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8nbua0uz                        0x000055c47675162d <unavailable> + 5677

    5    libc.so.6                          0x00002ac8840a0460 __libc_start_main +
    245

    6    tmp8nbua0uz                        0x000055c4767511f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    } else if lst2Odd.count == lst2.count {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvwilcoxf/tmpvwilcoxf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c92926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwilcoxf                        0x0000559f583e879f <unavailable> + 6047

    5    libc.so.6                          0x00002b2c92b12460 __libc_start_main +
    245

    6    tmpvwilcoxf                        0x0000559f583e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpedn5p9xx/tmpedn5p9xx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac05bbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac05b8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac05b8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac05b8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedn5p9xx                        0x00005604ad20fb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac05bdb0460 __libc_start_main +
    245

    6    tmpedn5p9xx                        0x00005604ad20f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var result = \"NO\"\n    for i in 0..<lst1.count {\n        if lst1[i] %\
    \ 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    result = \"YES\"\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmplyci_5eo/tmplyci_5eo.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b442b116c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b442ae0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b442ae0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b442ae0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplyci_5eo                        0x0000560b7a8aa87f <unavailable> + 6271

    5    libc.so.6                          0x00002b442b302460 __libc_start_main +
    245

    6    tmplyci_5eo                        0x0000560b7a8aa2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            let temp = lst1[i]\n\
    \            lst1[i] = lst2[j]\n            lst2[j] = temp\n            i += 1\n\
    \            j += 1\n        }\n    }\n    return lst1.allSatisfy { $0 % 2 ==\
    \ 0 } ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == lst2.count {\n                return \"\
    NO\"\n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7v8hzz5v/tmp7v8hzz5v.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b637708ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6376d85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6376d85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6376d847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7v8hzz5v                        0x000055e80ba0377f <unavailable> + 6015

    5    libc.so.6                          0x00002b637727a460 __libc_start_main +
    245

    6    tmp7v8hzz5v                        0x000055e80ba031d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpue8w0zj3/tmpue8w0zj3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b315972ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3159421b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3159421988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31594207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpue8w0zj3                        0x000055d22502587f <unavailable> + 6271

    5    libc.so.6                          0x00002b3159916460 __libc_start_main +
    245

    6    tmpue8w0zj3                        0x000055d2250252d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = 0\n    var odds = 0\n    for\
    \ num in lst1 {\n        if num % 2 == 0 {\n            evens += 1\n        }\
    \ else {\n            odds += 1\n        }\n    }\n    for num in lst2 {\n   \
    \     if num % 2 == 0 {\n            evens += 1\n        } else {\n          \
    \  odds += 1\n        }\n    }\n    if odds % 2 == 0 {\n        return \"YES\"\
    \n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp20_0z2ad/tmp20_0z2ad.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ca8cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ca89bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ca89bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ca89be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp20_0z2ad                        0x000055aa2335eb17 <unavailable> + 6935

    5    libc.so.6                          0x00002b4ca8eb4460 __libc_start_main +
    245

    6    tmp20_0z2ad                        0x000055aa2335e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = 0\n    var odds = 0\n    for\
    \ num in lst1 {\n        if num % 2 == 0 {\n            evens += 1\n        }\
    \ else {\n            odds += 1\n        }\n    }\n    for num in lst2 {\n   \
    \     if num % 2 == 0 {\n            evens += 1\n        } else {\n          \
    \  odds += 1\n        }\n    }\n    if evens % 2 == 0 && odds % 2 == 0 {\n   \
    \     return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpfb7eelrl/tmpfb7eelrl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9983ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9980f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9980f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9980f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfb7eelrl                        0x00005619ec1d5b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ad9985eb460 __libc_start_main +
    245

    6    tmpfb7eelrl                        0x00005619ec1d5249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count && lst2Even.count\
    \ == lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"YES\"\n    } else if lst1Even.count\
    \ == lst1.count && lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\
    \ else if lst1Odd.count == lst1.count && lst2Even.count == lst2.count {\n    \
    \    return \"NO\"\n    } else if lst1Even.count == lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Even.count != lst2.count {\n        return \"NO\"\n    } else if lst1Even.count\
    \ != lst1.count && lst2Even.count == lst2.count {\n        return \"YES\"\n  \
    \  } else if lst1Even.count != lst1.count && lst2Odd.count == lst2.count {\n \
    \       return \"NO\"\n    } else if lst1Even.count != lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpbilri4r7/tmpbilri4r7.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae49b92cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae49b623b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae49b623988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae49b6227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbilri4r7                        0x000055e6e2ea679f <unavailable> + 6047

    5    libc.so.6                          0x00002ae49bb18460 __libc_start_main +
    245

    6    tmpbilri4r7                        0x000055e6e2ea61f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count > evens.count {\n        return \"NO\"\n\
    \    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpedn5p9xx/tmpedn5p9xx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac05bbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac05b8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac05b8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac05b8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedn5p9xx                        0x00005604ad20fb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac05bdb0460 __libc_start_main +
    245

    6    tmpedn5p9xx                        0x00005604ad20f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    } else if lst2Odd.count == lst2.count {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvwilcoxf/tmpvwilcoxf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c92926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwilcoxf                        0x0000559f583e879f <unavailable> + 6047

    5    libc.so.6                          0x00002b2c92b12460 __libc_start_main +
    245

    6    tmpvwilcoxf                        0x0000559f583e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp8nbua0uz/tmp8nbua0uz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac883eb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac883babb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac883bab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac883baa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8nbua0uz                        0x000055c47675162d <unavailable> + 5677

    5    libc.so.6                          0x00002ac8840a0460 __libc_start_main +
    245

    6    tmp8nbua0uz                        0x000055c4767511f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1EvenCount = 0\n    var lst2EvenCount = 0\n    var lst1OddCount =\
    \ 0\n    var lst2OddCount = 0\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 == 0 {\n            lst1EvenCount += 1\n        } else {\n            lst1OddCount\
    \ += 1\n        }\n    }\n    for i in 0..<lst2.count {\n        if lst2[i] %\
    \ 2 == 0 {\n            lst2EvenCount += 1\n        } else {\n            lst2OddCount\
    \ += 1\n        }\n    }\n    if lst1EvenCount + lst2OddCount == lst1.count {\n\
    \        return \"YES\"\n    } else if lst2EvenCount + lst1OddCount == lst2.count\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpek3ttpoe/tmpek3ttpoe.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5609a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae560697b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae560697988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5606967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpek3ttpoe                        0x0000564d7e900b57 <unavailable> + 6999

    5    libc.so.6                          0x00002ae560b8c460 __libc_start_main +
    245

    6    tmpek3ttpoe                        0x0000564d7e900289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    break\n \
    \               }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpedn5p9xx/tmpedn5p9xx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac05bbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac05b8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac05b8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac05b8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedn5p9xx                        0x00005604ad20fb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac05bdb0460 __libc_start_main +
    245

    6    tmpedn5p9xx                        0x00005604ad20f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for num in lst1 {\n    \
    \    if num % 2 == 0 {\n            evens.append(num)\n        } else {\n    \
    \        odds.append(num)\n        }\n    }\n    for num in lst2 {\n        if\
    \ num % 2 == 0 {\n            evens.append(num)\n        } else {\n          \
    \  odds.append(num)\n        }\n    }\n    if odds.count % 2 == 0 {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp8ijpg1xo/tmp8ijpg1xo.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ecf17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ecee72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ecee72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ecee717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ijpg1xo                        0x000055e8b47dec17 <unavailable> + 7191

    5    libc.so.6                          0x00002b3ecf367460 __libc_start_main +
    245

    6    tmp8ijpg1xo                        0x000055e8b47de349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    isExchange\
    \ = true\n                    break\n                }\n            }\n      \
    \  }\n        if !isExchange {\n            return \"NO\"\n        }\n    }\n\
    \    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp81p70i94/tmp81p70i94.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08621a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0861e97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0861e97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0861e967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81p70i94                        0x000055677d25287f <unavailable> + 6271

    5    libc.so.6                          0x00002b086238c460 __libc_start_main +
    245

    6    tmp81p70i94                        0x000055677d2522d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 1 {\n \
    \           return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ == 0 {\n            evenCount += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evenCount -= 1\n        }\n  \
    \  }\n    if evenCount == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7sni94zp/tmp7sni94zp.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7194f08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7194bffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7194bff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7194bfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7sni94zp                        0x00005629cf399b57 <unavailable> + 6999

    5    libc.so.6                          0x00002b71950f4460 __libc_start_main +
    245

    6    tmp7sni94zp                        0x00005629cf399289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchanged = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchanged = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchanged {\n    \
    \        return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmptfk_yafa/tmptfk_yafa.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b470ff79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b470fc70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b470fc70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b470fc6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfk_yafa                        0x000055ca343bf87f <unavailable> + 6271

    5    libc.so.6                          0x00002b4710165460 __libc_start_main +
    245

    6    tmptfk_yafa                        0x000055ca343bf2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpuyp9dcl9/tmpuyp9dcl9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7aabd0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7aaba05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7aaba05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7aaba047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuyp9dcl9                        0x000055daf3b4279f <unavailable> + 6047

    5    libc.so.6                          0x00002b7aabefa460 __libc_start_main +
    245

    6    tmpuyp9dcl9                        0x000055daf3b421f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpedn5p9xx/tmpedn5p9xx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac05bbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac05b8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac05b8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac05b8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedn5p9xx                        0x00005604ad20fb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac05bdb0460 __libc_start_main +
    245

    6    tmpedn5p9xx                        0x00005604ad20f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp8nbua0uz/tmp8nbua0uz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac883eb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac883babb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac883bab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac883baa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8nbua0uz                        0x000055c47675162d <unavailable> + 5677

    5    libc.so.6                          0x00002ac8840a0460 __libc_start_main +
    245

    6    tmp8nbua0uz                        0x000055c4767511f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    let evens = lst1.filter { $0 % 2 == 0 }\n    let odds = lst2.filter { $0\
    \ % 2 != 0 }\n    if evens.count == lst1.count {\n        return \"YES\"\n   \
    \ }\n    if odds.count == lst2.count {\n        return \"NO\"\n    }\n    for\
    \ i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count\
    \ {\n                if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = lst1[i]\n                    break\n          \
    \      }\n            }\n        }\n    }\n    let evens2 = lst1.filter { $0 %\
    \ 2 == 0 }\n    if evens2.count == lst1.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpo0d02biv/tmpo0d02biv.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f509c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f506bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f506bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f506be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo0d02biv                        0x000055efd526e93f <unavailable> + 6463

    5    libc.so.6                          0x00002b7f50bb4460 __libc_start_main +
    245

    6    tmpo0d02biv                        0x000055efd526e399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var count = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0\
    \ {\n            for j in 0..<lst2.count {\n                if lst2[j] % 2 ==\
    \ 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    count += 1\n                    break\n                }\n\
    \            }\n        }\n    }\n    return count == lst1.count ? \"YES\" : \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpphewce2u/tmpphewce2u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa73d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa73a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa73a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa73a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpphewce2u                        0x000055ad182d770d <unavailable> + 5901

    5    libc.so.6                          0x00002baa73f12460 __libc_start_main +
    245

    6    tmpphewce2u                        0x000055ad182d72d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1, lst2 = lst2\n    var evens\
    \ = lst1.filter { $0 % 2 == 0 }\n    var odds = lst2.filter { $0 % 2 != 0 }\n\
    \    if evens.count == lst1.count {\n        return \"YES\"\n    }\n    if odds.count\
    \ == lst2.count {\n        return \"NO\"\n    }\n    var i = 0\n    while i <\
    \ lst1.count {\n        if lst1[i] % 2 != 0 {\n            var j = 0\n       \
    \     while j < lst2.count {\n                if lst2[j] % 2 == 0 {\n        \
    \            lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n      \
    \              evens = lst1.filter { $0 % 2 == 0 }\n                    if evens.count\
    \ == lst1.count {\n                        return \"YES\"\n                  \
    \  }\n                    break\n                }\n                j += 1\n \
    \           }\n        }\n        i += 1\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmppslquj0a/tmppslquj0a.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8853628c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b885331fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b885331f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b885331e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppslquj0a                        0x0000560404d7c84f <unavailable> + 6223

    5    libc.so.6                          0x00002b8853814460 __libc_start_main +
    245

    6    tmppslquj0a                        0x0000560404d7c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1EvenCount = lst1Even.count\n    var\
    \ lst2EvenCount = lst2Even.count\n    var lst1OddCount = lst1Odd.count\n    var\
    \ lst2OddCount = lst2Odd.count\n    if lst1EvenCount > lst2EvenCount {\n     \
    \   return \"NO\"\n    } else if lst1EvenCount == lst2EvenCount {\n        return\
    \ \"YES\"\n    } else {\n        if lst1OddCount > lst2OddCount {\n          \
    \  return \"NO\"\n        } else {\n            return \"YES\"\n        }\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp98ewpfg0/tmp98ewpfg0.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba84d47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba84a3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba84a3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba84a3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp98ewpfg0                        0x00005636d3316ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002aba84f33460 __libc_start_main +
    245

    6    tmp98ewpfg0                        0x00005636d33161f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let tmp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = tmp\n                    break\n  \
    \              }\n                j += 1\n            }\n            if j == lst2.count\
    \ {\n                return \"NO\"\n            }\n        }\n        i += 1\n\
    \    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var result = \"NO\"\n    var i = 0\n    while i < lst1.count {\n        if\
    \ lst1[i] % 2 != 0 {\n            var j = 0\n            while j < lst2.count\
    \ {\n                if lst2[j] % 2 == 0 {\n                    let temp = lst1[i]\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = temp\n \
    \                   break\n                }\n                j += 1\n       \
    \     }\n        }\n        i += 1\n    }\n    if lst1.filter({ $0 % 2 != 0 }).count\
    \ == 0 {\n        result = \"YES\"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    return lst1.filter { $0 % 2 == 1 }.isEmpty ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpdm1v09fb/tmpdm1v09fb.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3b9fd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3b9ccdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3b9ccd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3b9ccc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdm1v09fb                        0x0000557390e3eb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ae3ba1c2460 __libc_start_main +
    245

    6    tmpdm1v09fb                        0x0000557390e3e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 1 {\n \
    \           return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp8nbua0uz/tmp8nbua0uz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac883eb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac883babb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac883bab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac883baa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8nbua0uz                        0x000055c47675162d <unavailable> + 5677

    5    libc.so.6                          0x00002ac8840a0460 __libc_start_main +
    245

    6    tmp8nbua0uz                        0x000055c4767511f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    } else if lst2Odd.count == lst2.count {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvwilcoxf/tmpvwilcoxf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c92926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwilcoxf                        0x0000559f583e879f <unavailable> + 6047

    5    libc.so.6                          0x00002b2c92b12460 __libc_start_main +
    245

    6    tmpvwilcoxf                        0x0000559f583e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    isExchange\
    \ = true\n                    break\n                }\n            }\n      \
    \  }\n        if !isExchange {\n            return \"NO\"\n        }\n    }\n\
    \    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp81p70i94/tmp81p70i94.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08621a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0861e97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0861e97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0861e967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81p70i94                        0x000055677d25287f <unavailable> + 6271

    5    libc.so.6                          0x00002b086238c460 __libc_start_main +
    245

    6    tmp81p70i94                        0x000055677d2522d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ == lst1.count || lst2Even.count == lst2.count {\n        return \"YES\"\n  \
    \  } else if lst1Odd.count == lst1.count || lst2Odd.count == lst2.count {\n  \
    \      return \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmph6v6f5rr/tmph6v6f5rr.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49bb86ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49bb565b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49bb565988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49bb5647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6v6f5rr                        0x000055deedc4179f <unavailable> + 6047

    5    libc.so.6                          0x00002b49bba5a460 __libc_start_main +
    245

    6    tmph6v6f5rr                        0x000055deedc411f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    for num in lst1 {\n        if num % 2 == 1 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpedn5p9xx/tmpedn5p9xx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac05bbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac05b8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac05b8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac05b8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedn5p9xx                        0x00005604ad20fb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac05bdb0460 __libc_start_main +
    245

    6    tmpedn5p9xx                        0x00005604ad20f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count && lst2Even.count\
    \ == lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"YES\"\n    } else if lst1Even.count\
    \ == lst1.count && lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\
    \ else if lst1Odd.count == lst1.count && lst2Even.count == lst2.count {\n    \
    \    return \"NO\"\n    } else if lst1Even.count == lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Even.count != lst2.count {\n        return \"NO\"\n    } else if lst1Even.count\
    \ != lst1.count && lst2Even.count == lst2.count {\n        return \"YES\"\n  \
    \  } else if lst1Even.count != lst1.count && lst2Odd.count == lst2.count {\n \
    \       return \"NO\"\n    } else if lst1Even.count != lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpbilri4r7/tmpbilri4r7.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae49b92cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae49b623b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae49b623988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae49b6227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbilri4r7                        0x000055e6e2ea679f <unavailable> + 6047

    5    libc.so.6                          0x00002ae49bb18460 __libc_start_main +
    245

    6    tmpbilri4r7                        0x000055e6e2ea61f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count && lst2Even.count\
    \ == lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"YES\"\n    } else if lst1Even.count\
    \ == lst1.count && lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\
    \ else if lst1Odd.count == lst1.count && lst2Even.count == lst2.count {\n    \
    \    return \"NO\"\n    } else if lst1Even.count == lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Even.count != lst2.count {\n        return \"NO\"\n    } else if lst1Even.count\
    \ != lst1.count && lst2Even.count == lst2.count {\n        return \"YES\"\n  \
    \  } else if lst1Even.count != lst1.count && lst2Odd.count == lst2.count {\n \
    \       return \"NO\"\n    } else if lst1Even.count != lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpbilri4r7/tmpbilri4r7.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae49b92cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae49b623b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae49b623988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae49b6227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbilri4r7                        0x000055e6e2ea679f <unavailable> + 6047

    5    libc.so.6                          0x00002ae49bb18460 __libc_start_main +
    245

    6    tmpbilri4r7                        0x000055e6e2ea61f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp8nbua0uz/tmp8nbua0uz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac883eb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac883babb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac883bab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac883baa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8nbua0uz                        0x000055c47675162d <unavailable> + 5677

    5    libc.so.6                          0x00002ac8840a0460 __libc_start_main +
    245

    6    tmp8nbua0uz                        0x000055c4767511f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpedn5p9xx/tmpedn5p9xx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac05bbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac05b8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac05b8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac05b8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedn5p9xx                        0x00005604ad20fb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac05bdb0460 __libc_start_main +
    245

    6    tmpedn5p9xx                        0x00005604ad20f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    var lst1EvenCount = lst1Even.count\n    var\
    \ lst2EvenCount = lst2Even.count\n    var lst1OddCount = lst1Odd.count\n    var\
    \ lst2OddCount = lst2Odd.count\n    var lst1Count = lst1.count\n    var lst2Count\
    \ = lst2.count\n    var lst1EvenIndex = 0\n    var lst2EvenIndex = 0\n    var\
    \ lst1OddIndex = 0\n    var lst2OddIndex = 0\n    var lst1Index = 0\n    var lst2Index\
    \ = 0\n    var lst1EvenIndex2 = 0\n    var lst2EvenIndex2 = 0\n    var lst1OddIndex2\
    \ = 0\n    var lst2OddIndex2 = 0\n    var lst1Index2 = 0\n    var lst2Index2 =\
    \ 0\n    var lst1EvenIndex3 = 0\n    var lst2EvenIndex3 = 0\n    var lst1OddIndex3\
    \ = 0\n    var lst2OddIndex3 = 0\n    var lst1Index3 = 0\n    var lst2Index3 =\
    \ 0\n    var lst1EvenIndex4 = 0\n    var lst2EvenIndex4 = 0\n    var lst1OddIndex4\
    \ = 0\n    var lst2OddIndex4 = 0\n    var lst1Index4 = 0\n    var lst2Index4 =\
    \ 0\n    var lst1EvenIndex5 = 0\n    var lst2EvenIndex5 = 0\n    var lst1OddIndex5\
    \ = 0\n    var lst2OddIndex5 = 0\n    var lst1Index5 = 0\n   \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmpu8rbvte_.swift:16:9: warning: variable 'lst1' was never mutated;\
    \ consider changing to 'let' constant\n    var lst1 = lst1\n    ~~~ ^\n    let\n\
    /tmp/tmpu8rbvte_.swift:17:9: warning: variable 'lst2' was never mutated; consider\
    \ changing to 'let' constant\n    var lst2 = lst2\n    ~~~ ^\n    let\n/tmp/tmpu8rbvte_.swift:18:9:\
    \ warning: variable 'lst1Even' was never mutated; consider changing to 'let' constant\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    ~~~ ^\n    let\n/tmp/tmpu8rbvte_.swift:19:9:\
    \ warning: variable 'lst2Even' was never mutated; consider changing to 'let' constant\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    ~~~ ^\n    let\n/tmp/tmpu8rbvte_.swift:20:9:\
    \ warning: variable 'lst1Odd' was never mutated; consider changing to 'let' constant\n\
    \    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    ~~~ ^\n    let\n/tmp/tmpu8rbvte_.swift:21:9:\
    \ warning: variable 'lst2Odd' was never mutated; consider changing to 'let' constant\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    ~~~ ^\n    let\n/tmp/tmpu8rbvte_.swift:22:9:\
    \ warning: initialization of variable 'lst1EvenCount' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var lst1EvenCount = lst1Even.count\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpu8rbvte_.swift:23:9: warning: initialization\
    \ of variable 'lst2EvenCount' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var lst2EvenCount = lst2Even.count\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpu8rbvte_.swift:24:9: warning: initialization of variable 'lst1OddCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var lst1OddCount = lst1Odd.count\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpu8rbvte_.swift:25:9:\
    \ warning: initialization of variable 'lst2OddCount' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var lst2OddCount = lst2Odd.count\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpu8rbvte_.swift:26:9: warning: initialization\
    \ of variable 'lst1Count' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var lst1Count = "
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7unu543i/tmp7unu543i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78ad9b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ad6abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ad6ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ad6aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7unu543i                        0x000055c21bf6462d <unavailable> + 5677

    5    libc.so.6                          0x00002b78adba0460 __libc_start_main +
    245

    6    tmp7unu543i                        0x000055c21bf641f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for num in lst1 {\n        if num %\
    \ 2 == 0 {\n            evens += 1\n        } else {\n            odds += 1\n\
    \        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n        \
    \    evens += 1\n        } else {\n            odds += 1\n        }\n    }\n \
    \   if odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"\
    NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp4rpjgrrk/tmp4rpjgrrk.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a653d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a650cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a650cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a650ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4rpjgrrk                        0x00005578d63e7b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b3a655c4460 __libc_start_main +
    245

    6    tmp4rpjgrrk                        0x00005578d63e7249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            i += 1\n            j += 1\n        }\n    }\n    return lst1.allSatisfy\
    \ { $0 % 2 == 0 } ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst2Even.count == lst2.count\
    \ {\n        return \"YES\"\n    } else if lst1Even.count + lst2Even.count >=\
    \ lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens1 = lst1.filter { $0 % 2 == 0\
    \ }\n    let odds1 = lst1.filter { $0 % 2 != 0 }\n    let evens2 = lst2.filter\
    \ { $0 % 2 == 0 }\n    let odds2 = lst2.filter { $0 % 2 != 0 }\n    return (evens1.count\
    \ + odds2.count == lst1.count && odds1.count + evens2.count == lst2.count) ? \"\
    YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmptjo9pn2s/tmptjo9pn2s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbfe609c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbfe300b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbfe300988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbfe2ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptjo9pn2s                        0x00005567f335eac7 <unavailable> + 6855

    5    libc.so.6                          0x00002abbfe7f5460 __libc_start_main +
    245

    6    tmptjo9pn2s                        0x00005567f335e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    return lst1Even.count\
    \ + lst2Even.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpedn5p9xx/tmpedn5p9xx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac05bbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac05b8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac05b8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac05b8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedn5p9xx                        0x00005604ad20fb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac05bdb0460 __libc_start_main +
    245

    6    tmpedn5p9xx                        0x00005604ad20f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ == 0 {\n            evenCount += 1\n        }\n    }\n    if evenCount == lst1.count\
    \ {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n                if\
    \ lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n                \
    \    lst2[j] = lst1[i]\n                    evenCount += 1\n                 \
    \   break\n                }\n            }\n        }\n    }\n    if evenCount\
    \ == lst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpg6lcuvk1/tmpg6lcuvk1.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5378268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5377f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5377f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5377f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6lcuvk1                        0x000056166bbb187f <unavailable> + 6271

    5    libc.so.6                          0x00002b5378454460 __libc_start_main +
    245

    6    tmpg6lcuvk1                        0x000056166bbb12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            i += 1\n            j += 1\n        }\n    }\n    return lst1.contains(where:\
    \ { $0 % 2 == 1 }) ? \"NO\" : \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpedn5p9xx/tmpedn5p9xx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac05bbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac05b8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac05b8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac05b8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedn5p9xx                        0x00005604ad20fb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac05bdb0460 __libc_start_main +
    245

    6    tmpedn5p9xx                        0x00005604ad20f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    break\n \
    \               }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpdm1v09fb/tmpdm1v09fb.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3b9fd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3b9ccdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3b9ccd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3b9ccc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdm1v09fb                        0x0000557390e3eb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ae3ba1c2460 __libc_start_main +
    245

    6    tmpdm1v09fb                        0x0000557390e3e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var count = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0\
    \ {\n            for j in 0..<lst2.count {\n                if lst2[j] % 2 ==\
    \ 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    count += 1\n                    break\n                }\n\
    \            }\n        }\n    }\n    return count == lst1.count ? \"YES\" : \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpphewce2u/tmpphewce2u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa73d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa73a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa73a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa73a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpphewce2u                        0x000055ad182d770d <unavailable> + 5901

    5    libc.so.6                          0x00002baa73f12460 __libc_start_main +
    245

    6    tmpphewce2u                        0x000055ad182d72d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    } else if lst2Odd.count == lst2.count {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvwilcoxf/tmpvwilcoxf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c92926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwilcoxf                        0x0000559f583e879f <unavailable> + 6047

    5    libc.so.6                          0x00002b2c92b12460 __libc_start_main +
    245

    6    tmpvwilcoxf                        0x0000559f583e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpedn5p9xx/tmpedn5p9xx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac05bbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac05b8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac05b8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac05b8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedn5p9xx                        0x00005604ad20fb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac05bdb0460 __libc_start_main +
    245

    6    tmpedn5p9xx                        0x00005604ad20f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            let temp = lst1[i]\n\
    \            lst1[i] = lst2[j]\n            lst2[j] = temp\n            i += 1\n\
    \            j += 1\n        }\n    }\n    return lst1.filter { $0 % 2 == 1 }.isEmpty\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var odd1 = [Int]()\n    var odd2 = [Int]()\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            odd1.append(lst1[i])\n        }\n\
    \        if lst2[i] % 2 != 0 {\n            odd2.append(lst2[i])\n        }\n\
    \    }\n    if odd1.count == odd2.count {\n        return \"YES\"\n    } else\
    \ {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp3x9qnqnu/tmp3x9qnqnu.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba231b97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba23188eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba23188e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba23188d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3x9qnqnu                        0x000055c367222bf7 <unavailable> + 7159

    5    libc.so.6                          0x00002ba231d83460 __libc_start_main +
    245

    6    tmp3x9qnqnu                        0x000055c367222329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\
    \ else if lst1Odd.count + lst2Odd.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp8nbua0uz/tmp8nbua0uz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac883eb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac883babb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac883bab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac883baa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8nbua0uz                        0x000055c47675162d <unavailable> + 5677

    5    libc.so.6                          0x00002ac8840a0460 __libc_start_main +
    245

    6    tmp8nbua0uz                        0x000055c4767511f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpue8w0zj3/tmpue8w0zj3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b315972ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3159421b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3159421988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31594207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpue8w0zj3                        0x000055d22502587f <unavailable> + 6271

    5    libc.so.6                          0x00002b3159916460 __libc_start_main +
    245

    6    tmpue8w0zj3                        0x000055d2250252d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var even1 = 0\n    var even2 = 0\n    for i in 0..<lst1.count {\n       \
    \ if lst1[i] % 2 == 0 {\n            even1 += 1\n        }\n        if lst2[i]\
    \ % 2 == 0 {\n            even2 += 1\n        }\n    }\n    if even1 == lst1.count\
    \ || even2 == lst2.count {\n        return \"YES\"\n    }\n    if even1 > even2\
    \ {\n        for i in 0..<lst1.count {\n            if lst1[i] % 2 != 0 && lst2[i]\
    \ % 2 == 0 {\n                lst1[i] = lst2[i]\n                even1 += 1\n\
    \                even2 -= 1\n            }\n            if even1 == lst1.count\
    \ {\n                return \"YES\"\n            }\n        }\n    } else {\n\
    \        for i in 0..<lst1.count {\n            if lst1[i] % 2 == 0 && lst2[i]\
    \ % 2 != 0 {\n                lst2[i] = lst1[i]\n                even1 -= 1\n\
    \                even2 += 1\n            }\n            if even2 == lst2.count\
    \ {\n                return \"YES\"\n            }\n        }\n    }\n    return\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpxaoch4_9/tmpxaoch4_9.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a4ce65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a4cb5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a4cb5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a4cb5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxaoch4_9                        0x0000555b730a470d <unavailable> + 5901

    5    libc.so.6                          0x00002b6a4d051460 __libc_start_main +
    245

    6    tmpxaoch4_9                        0x0000555b730a42d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    } else if lst2Odd.count == lst2.count {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvwilcoxf/tmpvwilcoxf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c92926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwilcoxf                        0x0000559f583e879f <unavailable> + 6047

    5    libc.so.6                          0x00002b2c92b12460 __libc_start_main +
    245

    6    tmpvwilcoxf                        0x0000559f583e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    isExchange\
    \ = true\n                    break\n                }\n            }\n      \
    \  }\n        if !isExchange {\n            return \"NO\"\n        }\n    }\n\
    \    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp81p70i94/tmp81p70i94.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08621a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0861e97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0861e97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0861e967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81p70i94                        0x000055677d25287f <unavailable> + 6271

    5    libc.so.6                          0x00002b086238c460 __libc_start_main +
    245

    6    tmp81p70i94                        0x000055677d2522d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for (index, value) in lst1.enumerated() {\n \
    \       if value % 2 != 0 {\n            for (index2, value2) in lst2.enumerated()\
    \ {\n                if value2 % 2 == 0 {\n                    lst1[index] = value2\n\
    \                    lst2[index2] = value\n                    isExchange = true\n\
    \                    break\n                }\n            }\n        }\n    \
    \    if isExchange {\n            break\n        }\n    }\n    if isExchange {\n\
    \        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpmyrhvnlj/tmpmyrhvnlj.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ce17a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ce149ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ce149a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ce14997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmyrhvnlj                        0x0000564690ae08ef <unavailable> + 6383

    5    libc.so.6                          0x00002b8ce198f460 __libc_start_main +
    245

    6    tmpmyrhvnlj                        0x0000564690ae0349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isEven = true\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ != 0 {\n            isEven = false\n            for j in 0..<lst2.count {\n\
    \                if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = lst1[i]\n                    isEven = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isEven {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmps0s2ckqz/tmps0s2ckqz.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8fd2aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8fcfa1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8fcfa1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8fcfa07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0s2ckqz                        0x00005605275db87f <unavailable> + 6271

    5    libc.so.6                          0x00002ab8fd496460 __libc_start_main +
    245

    6    tmps0s2ckqz                        0x00005605275db2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count % 2 == 0 {\n        return \"YES\"\n    }\
    \ else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp0suvix58/tmp0suvix58.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5cb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a59aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a59aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0suvix58                        0x000055e7976dbc17 <unavailable> + 7191

    5    libc.so.6                          0x00002b94a5e9f460 __libc_start_main +
    245

    6    tmp0suvix58                        0x000055e7976db349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpuyp9dcl9/tmpuyp9dcl9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7aabd0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7aaba05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7aaba05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7aaba047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuyp9dcl9                        0x000055daf3b4279f <unavailable> + 6047

    5    libc.so.6                          0x00002b7aabefa460 __libc_start_main +
    245

    6    tmpuyp9dcl9                        0x000055daf3b421f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    } else if lst2Odd.count == lst2.count {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvwilcoxf/tmpvwilcoxf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c92926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwilcoxf                        0x0000559f583e879f <unavailable> + 6047

    5    libc.so.6                          0x00002b2c92b12460 __libc_start_main +
    245

    6    tmpvwilcoxf                        0x0000559f583e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for num in lst1 {\n        if num %\
    \ 2 == 0 {\n            evens += 1\n        } else {\n            odds += 1\n\
    \        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n        \
    \    evens += 1\n        } else {\n            odds += 1\n        }\n    }\n \
    \   if odds == 0 {\n        return \"YES\"\n    } else if evens == 0 {\n     \
    \   return \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpl5jh61te/tmpl5jh61te.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0b5b8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0b5881b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0b5881988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0b58807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl5jh61te                        0x00005584368f47ef <unavailable> + 6127

    5    libc.so.6                          0x00002ba0b5d76460 __libc_start_main +
    245

    6    tmpl5jh61te                        0x00005584368f4249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    break\n \
    \               }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = 0\n    var lst2Even = 0\n    for i in 0..<lst1.count {\n \
    \       if lst1[i] % 2 == 0 {\n            lst1Even += 1\n        }\n        if\
    \ lst2[i] % 2 == 0 {\n            lst2Even += 1\n        }\n    }\n    if lst1Even\
    \ == lst1.count || lst2Even == lst2.count {\n        return \"YES\"\n    }\n \
    \   if lst1Even + lst2Even == lst1.count + lst2.count {\n        return \"YES\"\
    \n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5wz971l2/tmp5wz971l2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bcb4dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bcb1d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bcb1d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bcb1d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wz971l2                        0x0000564c7b6a96bd <unavailable> + 5821

    5    libc.so.6                          0x00002b6bcb6c7460 __libc_start_main +
    245

    6    tmp5wz971l2                        0x0000564c7b6a9289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count ==\
    \ lst1.count || lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp1hn2jyo4/tmp1hn2jyo4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a97c6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a97965b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a97965988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a979647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1hn2jyo4                        0x000056077de8562d <unavailable> + 5677

    5    libc.so.6                          0x00002b0a97e5a460 __libc_start_main +
    245

    6    tmp1hn2jyo4                        0x000056077de851f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    return lst1.filter { $0 % 2 == 1 }.isEmpty ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 1 {\n \
    \           return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            i += 1\n            j += 1\n        }\n    }\n    return lst1.contains(where:\
    \ { $0 % 2 == 1 }) ? \"NO\" : \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    return lst1Even.count\
    \ + lst2Even.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 1 {\n \
    \           return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var count = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0\
    \ {\n            for j in 0..<lst2.count {\n                if lst2[j] % 2 ==\
    \ 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    count += 1\n                    break\n                }\n\
    \            }\n        }\n    }\n    if count == lst1.count {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpovvijfnr/tmpovvijfnr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaaf16ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaaee65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaaee65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaaee647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovvijfnr                        0x00005644aab8670d <unavailable> + 5901

    5    libc.so.6                          0x00002acaaf35a460 __libc_start_main +
    245

    6    tmpovvijfnr                        0x00005644aab862d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if odds.count % 2 == 0 {\n        return \"YES\"\n    }\
    \ else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp0suvix58/tmp0suvix58.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5cb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a59aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a59aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0suvix58                        0x000055e7976dbc17 <unavailable> + 7191

    5    libc.so.6                          0x00002b94a5e9f460 __libc_start_main +
    245

    6    tmp0suvix58                        0x000055e7976db349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ == lst1.count || lst2Even.count == lst2.count {\n        return \"YES\"\n  \
    \  } else if lst1Odd.count == lst1.count || lst2Odd.count == lst2.count {\n  \
    \      return \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmph6v6f5rr/tmph6v6f5rr.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49bb86ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49bb565b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49bb565988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49bb5647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6v6f5rr                        0x000055deedc4179f <unavailable> + 6047

    5    libc.so.6                          0x00002b49bba5a460 __libc_start_main +
    245

    6    tmph6v6f5rr                        0x000055deedc411f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count && lst2Even.count\
    \ == lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"YES\"\n    } else if lst1Even.count\
    \ == lst1.count && lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\
    \ else if lst1Odd.count == lst1.count && lst2Even.count == lst2.count {\n    \
    \    return \"NO\"\n    } else if lst1Even.count == lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Even.count != lst2.count {\n        return \"NO\"\n    } else if lst1Even.count\
    \ != lst1.count && lst2Even.count == lst2.count {\n        return \"YES\"\n  \
    \  } else if lst1Even.count != lst1.count && lst2Odd.count == lst2.count {\n \
    \       return \"NO\"\n    } else if lst1Even.count != lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpbilri4r7/tmpbilri4r7.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae49b92cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae49b623b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae49b623988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae49b6227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbilri4r7                        0x000055e6e2ea679f <unavailable> + 6047

    5    libc.so.6                          0x00002ae49bb18460 __libc_start_main +
    245

    6    tmpbilri4r7                        0x000055e6e2ea61f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchanged = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchanged = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchanged {\n    \
    \        return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmptfk_yafa/tmptfk_yafa.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b470ff79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b470fc70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b470fc70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b470fc6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfk_yafa                        0x000055ca343bf87f <unavailable> + 6271

    5    libc.so.6                          0x00002b4710165460 __libc_start_main +
    245

    6    tmptfk_yafa                        0x000055ca343bf2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter\
    \ { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count\
    \ == lst1.count {\n        return \"YES\"\n    } else if lst2Even.count == lst2.count\
    \ {\n        return \"YES\"\n    } else if lst1Even.count + lst2Odd.count == lst1.count\
    \ {\n        return \"YES\"\n    } else if lst2Even.count + lst1Odd.count == lst2.count\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1IsEven = lst1.filter { $0 % 2 ==\
    \ 0 }.count == lst1.count\n    let lst2IsEven = lst2.filter { $0 % 2 == 0 }.count\
    \ == lst2.count\n    return lst1IsEven || lst2IsEven ? \"YES\" : \"NO\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpvx_w7uj0/tmpvx_w7uj0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93d1c4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93d1942b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93d1942988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93d19417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvx_w7uj0                        0x0000561ad2d1462d <unavailable> + 5677

    5    libc.so.6                          0x00002b93d1e37460 __libc_start_main +
    245

    6    tmpvx_w7uj0                        0x0000561ad2d141f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpapbpraor/tmpapbpraor.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8f5ac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8f57beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8f57be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8f57bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpapbpraor                        0x000055874a04547d <unavailable> + 5245

    5    libc.so.6                          0x00002ba8f5cb3460 __libc_start_main +
    245

    6    tmpapbpraor                        0x000055874a045049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var count = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0\
    \ {\n            for j in 0..<lst2.count {\n                if lst2[j] % 2 ==\
    \ 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    count += 1\n                    break\n                }\n\
    \            }\n        }\n    }\n    return count == lst1.count ? \"YES\" : \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpphewce2u/tmpphewce2u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa73d26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa73a1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa73a1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa73a1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpphewce2u                        0x000055ad182d770d <unavailable> + 5901

    5    libc.so.6                          0x00002baa73f12460 __libc_start_main +
    245

    6    tmpphewce2u                        0x000055ad182d72d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ == 0 {\n            evenCount += 1\n        }\n    }\n    if evenCount == lst1.count\
    \ {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n                if\
    \ lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n                \
    \    lst2[j] = lst1[i]\n                    evenCount += 1\n                 \
    \   break\n                }\n            }\n        }\n    }\n    if evenCount\
    \ == lst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpg6lcuvk1/tmpg6lcuvk1.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5378268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5377f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5377f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5377f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6lcuvk1                        0x000056166bbb187f <unavailable> + 6271

    5    libc.so.6                          0x00002b5378454460 __libc_start_main +
    245

    6    tmpg6lcuvk1                        0x000056166bbb12d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpdm1v09fb/tmpdm1v09fb.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3b9fd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3b9ccdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3b9ccd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3b9ccc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdm1v09fb                        0x0000557390e3eb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ae3ba1c2460 __libc_start_main +
    245

    6    tmpdm1v09fb                        0x0000557390e3e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count {\n        return \"YES\"\
    \n    }\n    if lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         lst1Even = lst1.filter { $0 % 2 == 0 }\n                    lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n                    if lst1Even.count == lst1.count\
    \ {\n                        return \"YES\"\n                    }\n         \
    \           if lst2Even.count == lst2.count {\n                        return\
    \ \"YES\"\n                    }\n                }\n            }\n        }\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpeuy4yk5p/tmpeuy4yk5p.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbe8329c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbe8020b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbe8020988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbe801f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeuy4yk5p                        0x0000556c6f6d493f <unavailable> + 6463

    5    libc.so.6                          0x00002adbe8515460 __libc_start_main +
    245

    6    tmpeuy4yk5p                        0x0000556c6f6d4399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    break\n \
    \               }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == lst2.count {\n                return \"\
    NO\"\n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7v8hzz5v/tmp7v8hzz5v.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b637708ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6376d85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6376d85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6376d847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7v8hzz5v                        0x000055e80ba0377f <unavailable> + 6015

    5    libc.so.6                          0x00002b637727a460 __libc_start_main +
    245

    6    tmp7v8hzz5v                        0x000055e80ba031d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count && lst2Even.count\
    \ == lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"YES\"\n    } else if lst1Even.count\
    \ == lst1.count && lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\
    \ else if lst1Odd.count == lst1.count && lst2Even.count == lst2.count {\n    \
    \    return \"NO\"\n    } else if lst1Even.count == lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Even.count != lst2.count {\n        return \"NO\"\n    } else if lst1Even.count\
    \ != lst1.count && lst2Even.count == lst2.count {\n        return \"YES\"\n  \
    \  } else if lst1Even.count != lst1.count && lst2Odd.count == lst2.count {\n \
    \       return \"NO\"\n    } else if lst1Even.count != lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpbilri4r7/tmpbilri4r7.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae49b92cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae49b623b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae49b623988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae49b6227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbilri4r7                        0x000055e6e2ea679f <unavailable> + 6047

    5    libc.so.6                          0x00002ae49bb18460 __libc_start_main +
    245

    6    tmpbilri4r7                        0x000055e6e2ea61f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var flag = false\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 !=\
    \ 0 {\n            for j in 0..<lst2.count {\n                if lst2[j] % 2 ==\
    \ 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    flag = true\n                    break\n                }\n\
    \            }\n        }\n        if !flag {\n            return \"NO\"\n   \
    \     }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp0lx2ytq6/tmp0lx2ytq6.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b592fb0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b592f805b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b592f805988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b592f8047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0lx2ytq6                        0x0000560b309a487f <unavailable> + 6271

    5    libc.so.6                          0x00002b592fcfa460 __libc_start_main +
    245

    6    tmp0lx2ytq6                        0x0000560b309a42d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ == 0 {\n        return \"YES\"\n    } else if evens == 0 {\n        return \"\
    NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp9rmbiqhy/tmp9rmbiqhy.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7459440c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7459137b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7459137988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74591367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rmbiqhy                        0x0000558e2af8d7ef <unavailable> + 6127

    5    libc.so.6                          0x00002b745962c460 __libc_start_main +
    245

    6    tmp9rmbiqhy                        0x0000558e2af8d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpp87sdmea/tmpp87sdmea.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1c50b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1c4da7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1c4da7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1c4da67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp87sdmea                        0x000055ab2a4fe47d <unavailable> + 5245

    5    libc.so.6                          0x00002ba1c529c460 __libc_start_main +
    245

    6    tmpp87sdmea                        0x000055ab2a4fe049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1IsEven = lst1.filter { $0 % 2 ==\
    \ 0 }.count == lst1.count\n    let lst2IsEven = lst2.filter { $0 % 2 == 0 }.count\
    \ == lst2.count\n    if lst1IsEven && lst2IsEven {\n        return \"YES\"\n \
    \   }\n    let lst1IsOdd = lst1.filter { $0 % 2 != 0 }.count == lst1.count\n \
    \   let lst2IsOdd = lst2.filter { $0 % 2 != 0 }.count == lst2.count\n    if lst1IsOdd\
    \ && lst2IsOdd {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpe0h1lllk/tmpe0h1lllk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4e6f24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4e6c1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4e6c1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4e6c1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0h1lllk                        0x000055b8e0f2462d <unavailable> + 5677

    5    libc.so.6                          0x00002af4e7110460 __libc_start_main +
    245

    6    tmpe0h1lllk                        0x000055b8e0f241f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return (evens.count + odds.count\
    \ == lst1.count + lst2.count) ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpk493ijid/tmpk493ijid.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75c8190c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75c7e87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75c7e87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75c7e867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk493ijid                        0x000055dbeaf8662d <unavailable> + 5677

    5    libc.so.6                          0x00002b75c837c460 __libc_start_main +
    245

    6    tmpk493ijid                        0x000055dbeaf861f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7unu543i/tmp7unu543i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78ad9b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ad6abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ad6ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ad6aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7unu543i                        0x000055c21bf6462d <unavailable> + 5677

    5    libc.so.6                          0x00002b78adba0460 __libc_start_main +
    245

    6    tmp7unu543i                        0x000055c21bf641f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            i += 1\n            j += 1\n        }\n    }\n    return lst1.contains(where:\
    \ { $0 % 2 == 1 }) ? \"NO\" : \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    if lst1.contains(where: { $0 % 2 == 1 }) {\n        return \"\
    NO\"\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ == 0 {\n            evenCount += 1\n        }\n    }\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            evenCount -= 1\n        }\n  \
    \  }\n    if evenCount == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7sni94zp/tmp7sni94zp.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7194f08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7194bffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7194bff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7194bfe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7sni94zp                        0x00005629cf399b57 <unavailable> + 6999

    5    libc.so.6                          0x00002b71950f4460 __libc_start_main +
    245

    6    tmp7sni94zp                        0x00005629cf399289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7unu543i/tmp7unu543i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78ad9b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ad6abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ad6ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ad6aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7unu543i                        0x000055c21bf6462d <unavailable> + 5677

    5    libc.so.6                          0x00002b78adba0460 __libc_start_main +
    245

    6    tmp7unu543i                        0x000055c21bf641f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // your code here\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpdkreeiie/tmpdkreeiie.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0879173c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0878e6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0878e6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0878e697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkreeiie                        0x000055f31f3e047d <unavailable> + 5245

    5    libc.so.6                          0x00002b087935f460 __libc_start_main +
    245

    6    tmpdkreeiie                        0x000055f31f3e0049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = [Int]()\n    var odds = [Int]()\n\
    \    var lst1 = lst1\n    var lst2 = lst2\n    for i in lst1 {\n        if i %\
    \ 2 == 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    if odds.count\
    \ == 0 {\n        return \"YES\"\n    } else if evens.count == 0 {\n        return\
    \ \"NO\"\n    } else {\n        for i in odds {\n            if let index = lst1.firstIndex(of:\
    \ i) {\n                lst1.remove(at: index)\n            } else if let index\
    \ = lst2.firstIndex(of: i) {\n                lst2.remove(at: index)\n       \
    \     }\n        }\n        for i in evens {\n            if let index = lst1.firstIndex(of:\
    \ i) {\n                lst1.remove(at: index)\n            } else if let index\
    \ = lst2.firstIndex(of: i) {\n                lst2.remove(at: index)\n       \
    \     }\n        }\n        if lst1.count == 0 {\n            return \"YES\"\n\
    \        } else {\n            return \"NO\"\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpx7dyro_a/tmpx7dyro_a.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0271982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0271679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0271679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02716787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7dyro_a                        0x000056481759f9bf <unavailable> + 6591

    5    libc.so.6                          0x00002b0271b6e460 __libc_start_main +
    245

    6    tmpx7dyro_a                        0x000056481759f419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1EvenCount = 0\n    var lst2EvenCount = 0\n    for i in 0..<lst1.count\
    \ {\n        if lst1[i] % 2 == 0 {\n            lst1EvenCount += 1\n        }\n\
    \        if lst2[i] % 2 == 0 {\n            lst2EvenCount += 1\n        }\n  \
    \  }\n    if lst1EvenCount == lst1.count || lst2EvenCount == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1EvenCount == lst1.count - 1 && lst2EvenCount\
    \ == lst2.count - 1 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmppxj4d8pv/tmppxj4d8pv.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2230fbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2230cb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2230cb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2230cb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxj4d8pv                        0x00005557de9f36bd <unavailable> + 5821

    5    libc.so.6                          0x00002b22311ab460 __libc_start_main +
    245

    6    tmppxj4d8pv                        0x00005557de9f3289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            i += 1\n            j += 1\n        }\n    }\n    return lst1.contains(where:\
    \ { $0 % 2 == 1 }) ? \"NO\" : \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 1 {\n \
    \           return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Even.count + lst2Odd.count == lst1.count {\n    \
    \    return \"YES\"\n    } else if lst2Even.count + lst1Odd.count == lst2.count\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count && lst2Even.count\
    \ == lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"YES\"\n    } else if lst1Even.count\
    \ == lst1.count && lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\
    \ else if lst1Odd.count == lst1.count && lst2Even.count == lst2.count {\n    \
    \    return \"NO\"\n    } else if lst1Even.count == lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Even.count != lst2.count {\n        return \"NO\"\n    } else if lst1Even.count\
    \ != lst1.count && lst2Even.count == lst2.count {\n        return \"YES\"\n  \
    \  } else if lst1Even.count != lst1.count && lst2Even.count != lst2.count {\n\
    \        return \"NO\"\n    } else if lst1Even.count != lst1.count && lst2Odd.count\
    \ == lst2.count {\n        return \"NO\"\n    } else if lst1Odd.count != lst1.count\
    \ && lst2Even.count == lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count\
    \ != lst1.count && lst2Odd.count != lst2.\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmp58j_lz89.swift:42:67: error: expected member name following '.'\n\
    \    } else if lst1Odd.count != lst1.count && lst2Odd.count != lst2.\n       \
    \                                                           ^\n/tmp/tmp58j_lz89.swift:42:68:\
    \ error: expected '{' after 'if' condition\n    } else if lst1Odd.count != lst1.count\
    \ && lst2Odd.count != lst2.\n                                                \
    \                   ^\n"
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    } else if lst2Odd.count == lst2.count {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvwilcoxf/tmpvwilcoxf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c92926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwilcoxf                        0x0000559f583e879f <unavailable> + 6047

    5    libc.so.6                          0x00002b2c92b12460 __libc_start_main +
    245

    6    tmpvwilcoxf                        0x0000559f583e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == lst2.count {\n                return \"\
    NO\"\n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7v8hzz5v/tmp7v8hzz5v.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b637708ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6376d85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6376d85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6376d847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7v8hzz5v                        0x000055e80ba0377f <unavailable> + 6015

    5    libc.so.6                          0x00002b637727a460 __libc_start_main +
    245

    6    tmp7v8hzz5v                        0x000055e80ba031d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    break\n \
    \               }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isEven = false\n    var isOdd = false\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 == 0 {\n            isEven = true\n        } else {\n\
    \            isOdd = true\n        }\n    }\n    if isEven && isOdd {\n      \
    \  for i in 0..<lst1.count {\n            if lst1[i] % 2 != 0 {\n            \
    \    for j in 0..<lst2.count {\n                    if lst2[j] % 2 == 0 {\n  \
    \                      lst1[i] = lst2[j]\n                        lst2[j] = lst1[i]\n\
    \                        break\n                    }\n                }\n   \
    \         }\n        }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmplsj133rs/tmplsj133rs.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62ba1b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62b9eb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62b9eb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62b9eaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsj133rs                        0x000055ecdee9587f <unavailable> + 6271

    5    libc.so.6                          0x00002b62ba3a5460 __libc_start_main +
    245

    6    tmplsj133rs                        0x000055ecdee952d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 0\
    \ {\n            evens += 1\n        }\n    }\n    if evens == lst1.count {\n\
    \        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    evens += 1\n                    break\n     \
    \           }\n            }\n        }\n    }\n    if evens == lst1.count {\n\
    \        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpaa1_5rz3/tmpaa1_5rz3.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae16fe54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae16fb4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae16fb4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae16fb4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaa1_5rz3                        0x00005641f962d87f <unavailable> + 6271

    5    libc.so.6                          0x00002ae170040460 __libc_start_main +
    245

    6    tmpaa1_5rz3                        0x00005641f962d2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst2Even.count == lst2.count\
    \ {\n        return \"YES\"\n    } else if lst1Even.count + lst2Even.count >=\
    \ lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for num in lst1 {\n    \
    \    if num % 2 == 0 {\n            evens.append(num)\n        } else {\n    \
    \        odds.append(num)\n        }\n    }\n    for num in lst2 {\n        if\
    \ num % 2 == 0 {\n            evens.append(num)\n        } else {\n          \
    \  odds.append(num)\n        }\n    }\n    if odds.count % 2 == 0 {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp8ijpg1xo/tmp8ijpg1xo.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ecf17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ecee72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ecee72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ecee717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ijpg1xo                        0x000055e8b47dec17 <unavailable> + 7191

    5    libc.so.6                          0x00002b3ecf367460 __libc_start_main +
    245

    6    tmp8ijpg1xo                        0x000055e8b47de349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst2Even.count == lst2.count\
    \ {\n        return \"YES\"\n    } else if lst1Even.count + lst2Even.count >=\
    \ lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 1 {\n \
    \           return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpue8w0zj3/tmpue8w0zj3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b315972ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3159421b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3159421988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31594207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpue8w0zj3                        0x000055d22502587f <unavailable> + 6271

    5    libc.so.6                          0x00002b3159916460 __libc_start_main +
    245

    6    tmpue8w0zj3                        0x000055d2250252d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    } else if lst2Odd.count == lst2.count {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvwilcoxf/tmpvwilcoxf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c92926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwilcoxf                        0x0000559f583e879f <unavailable> + 6047

    5    libc.so.6                          0x00002b2c92b12460 __libc_start_main +
    245

    6    tmpvwilcoxf                        0x0000559f583e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpue8w0zj3/tmpue8w0zj3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b315972ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3159421b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3159421988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31594207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpue8w0zj3                        0x000055d22502587f <unavailable> + 6271

    5    libc.so.6                          0x00002b3159916460 __libc_start_main +
    245

    6    tmpue8w0zj3                        0x000055d2250252d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isExchange = false\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isExchange = true\n                    break\n\
    \                }\n            }\n        }\n        if !isExchange {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpucc4u6nr/tmpucc4u6nr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ecbd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ec8d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ec8d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ec8cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucc4u6nr                        0x0000563f3108587f <unavailable> + 6271

    5    libc.so.6                          0x00002b43ecdc5460 __libc_start_main +
    245

    6    tmpucc4u6nr                        0x0000563f310852d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var result = \"NO\"\n    var i = 0\n    while i < lst1.count {\n        if\
    \ lst1[i] % 2 != 0 {\n            var j = 0\n            while j < lst2.count\
    \ {\n                if lst2[j] % 2 == 0 {\n                    let temp = lst1[i]\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = temp\n \
    \                   break\n                }\n                j += 1\n       \
    \     }\n        }\n        i += 1\n    }\n    if lst1.filter({ $0 % 2 != 0 }).count\
    \ == 0 {\n        result = \"YES\"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7unu543i/tmp7unu543i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78ad9b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ad6abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ad6ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ad6aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7unu543i                        0x000055c21bf6462d <unavailable> + 5677

    5    libc.so.6                          0x00002b78adba0460 __libc_start_main +
    245

    6    tmp7unu543i                        0x000055c21bf641f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 1 {\n \
    \           return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            i += 1\n            j += 1\n        }\n    }\n    return lst1.contains(where:\
    \ { $0 % 2 == 1 }) ? \"NO\" : \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = 0\n    var odds = 0\n    for\
    \ num in lst1 {\n        if num % 2 == 0 {\n            evens += 1\n        }\
    \ else {\n            odds += 1\n        }\n    }\n    for num in lst2 {\n   \
    \     if num % 2 == 0 {\n            evens += 1\n        } else {\n          \
    \  odds += 1\n        }\n    }\n    if odds % 2 == 0 {\n        return \"YES\"\
    \n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp20_0z2ad/tmp20_0z2ad.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ca8cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ca89bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ca89bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ca89be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp20_0z2ad                        0x000055aa2335eb17 <unavailable> + 6935

    5    libc.so.6                          0x00002b4ca8eb4460 __libc_start_main +
    245

    6    tmp20_0z2ad                        0x000055aa2335e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 1 {\n \
    \           return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    } else if lst2Odd.count == lst2.count {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvwilcoxf/tmpvwilcoxf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c92926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwilcoxf                        0x0000559f583e879f <unavailable> + 6047

    5    libc.so.6                          0x00002b2c92b12460 __libc_start_main +
    245

    6    tmpvwilcoxf                        0x0000559f583e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ > evens {\n        return \"NO\"\n    } else {\n        return \"YES\"\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // your code here\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpdkreeiie/tmpdkreeiie.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0879173c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0878e6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0878e6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0878e697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkreeiie                        0x000055f31f3e047d <unavailable> + 5245

    5    libc.so.6                          0x00002b087935f460 __libc_start_main +
    245

    6    tmpdkreeiie                        0x000055f31f3e0049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    } else if lst2Odd.count == lst2.count {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvwilcoxf/tmpvwilcoxf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c92926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwilcoxf                        0x0000559f583e879f <unavailable> + 6047

    5    libc.so.6                          0x00002b2c92b12460 __libc_start_main +
    245

    6    tmpvwilcoxf                        0x0000559f583e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 1 {\n \
    \           return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpedn5p9xx/tmpedn5p9xx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac05bbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac05b8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac05b8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac05b8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedn5p9xx                        0x00005604ad20fb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac05bdb0460 __libc_start_main +
    245

    6    tmpedn5p9xx                        0x00005604ad20f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst2Even.count == lst2.count\
    \ {\n        return \"YES\"\n    } else if lst1Even.count + lst2Even.count >=\
    \ lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    } else if lst2Odd.count == lst2.count {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvwilcoxf/tmpvwilcoxf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c92926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwilcoxf                        0x0000559f583e879f <unavailable> + 6047

    5    libc.so.6                          0x00002b2c92b12460 __libc_start_main +
    245

    6    tmpvwilcoxf                        0x0000559f583e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    return lst1.allSatisfy { $0 % 2 == 0 } ? \"YES\" : \"NO\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824604
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for num in lst1 {\n        if num %\
    \ 2 == 0 {\n            evens += 1\n        } else {\n            odds += 1\n\
    \        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n        \
    \    evens += 1\n        } else {\n            odds += 1\n        }\n    }\n \
    \   if evens % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n\
    \        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp8rxkae1f/tmp8rxkae1f.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41f0b35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41f082cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41f082c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41f082b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rxkae1f                        0x0000558c355b4b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b41f0d21460 __libc_start_main +
    245

    6    tmp8rxkae1f                        0x0000558c355b4249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824604
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // Your code here\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp4be3f9k2/tmp4be3f9k2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2bd12cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2bce23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2bce23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2bce227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4be3f9k2                        0x000055a09a02d47d <unavailable> + 5245

    5    libc.so.6                          0x00002ba2bd318460 __libc_start_main +
    245

    6    tmp4be3f9k2                        0x000055a09a02d049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824604
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for num in lst1 {\n        if num %\
    \ 2 == 0 {\n            evens += 1\n        } else {\n            odds += 1\n\
    \        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n        \
    \    evens += 1\n        } else {\n            odds += 1\n        }\n    }\n \
    \   if evens % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n\
    \        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp8rxkae1f/tmp8rxkae1f.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41f0b35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41f082cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41f082c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41f082b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rxkae1f                        0x0000558c355b4b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b41f0d21460 __libc_start_main +
    245

    6    tmp8rxkae1f                        0x0000558c355b4249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824604
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenCount = 0\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ == 0 {\n            evenCount += 1\n        }\n    }\n    if evenCount == lst1.count\
    \ {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        for\
    \ j in 0..<lst2.count {\n            if lst1[i] % 2 != 0 && lst2[j] % 2 == 0 {\n\
    \                let temp = lst1[i]\n                lst1[i] = lst2[j]\n     \
    \           lst2[j] = temp\n                evenCount += 1\n            }\n  \
    \      }\n    }\n    if evenCount == lst1.count {\n        return \"YES\"\n  \
    \  }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824604
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if evens\
    \ % 2 == 0 && odds % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpedn5p9xx/tmpedn5p9xx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac05bbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac05b8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac05b8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac05b8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedn5p9xx                        0x00005604ad20fb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac05bdb0460 __libc_start_main +
    245

    6    tmpedn5p9xx                        0x00005604ad20f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ == lst1.count + lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7unu543i/tmp7unu543i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78ad9b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ad6abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ad6ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ad6aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7unu543i                        0x000055c21bf6462d <unavailable> + 5677

    5    libc.so.6                          0x00002b78adba0460 __libc_start_main +
    245

    6    tmp7unu543i                        0x000055c21bf641f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = lst1[i]\n            i += 1\n            j += 1\n     \
    \   }\n    }\n    return lst1.contains(where: { $0 % 2 == 1 }) ? \"NO\" : \"YES\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824604
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Odd.count == lst1.count && lst2Odd.count == lst2.count\
    \ {\n        return \"NO\"\n    } else {\n        for i in 0..<lst1.count {\n\
    \            if lst1[i] % 2 != 0 {\n                for j in 0..<lst2.count {\n\
    \                    if lst2[j] % 2 == 0 {\n                        lst1[i] =\
    \ lst2[j]\n                        lst2[j] = lst1[i]\n                       \
    \ lst1Even = lst1.filter { $0 % 2 == 0 }\n                        lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n                        if lst1Even.count == lst1.count {\n\
    \                            return \"YES\"\n                        }\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmptgb7loav/tmptgb7loav.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fbcf72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fbcc69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fbcc69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fbcc687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptgb7loav                        0x000056509b66793f <unavailable> + 6463

    5    libc.so.6                          0x00002b5fbd15e460 __libc_start_main +
    245

    6    tmptgb7loav                        0x000056509b667399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824604
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isEven = false\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ == 0 {\n            isEven = true\n        }\n    }\n    if isEven {\n     \
    \   return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] %\
    \ 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 != 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    isEven = true\n                    break\n  \
    \              }\n            }\n        }\n    }\n    if isEven {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpjbfx2fnq/tmpjbfx2fnq.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd92ccbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd929c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd929c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd929c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbfx2fnq                        0x0000558d11d2687f <unavailable> + 6271

    5    libc.so.6                          0x00002afd92eb7460 __libc_start_main +
    245

    6    tmpjbfx2fnq                        0x0000558d11d262d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824604
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    break\n                }\n                j +=\
    \ 1\n            }\n            if j == lst2.count {\n                return \"\
    NO\"\n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7v8hzz5v/tmp7v8hzz5v.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b637708ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6376d85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6376d85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6376d847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7v8hzz5v                        0x000055e80ba0377f <unavailable> + 6015

    5    libc.so.6                          0x00002b637727a460 __libc_start_main +
    245

    6    tmp7v8hzz5v                        0x000055e80ba031d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if lst2Even.count == lst2.count {\n        return\
    \ \"YES\"\n    } else if lst1Odd.count == lst1.count {\n        return \"NO\"\n\
    \    } else if lst2Odd.count == lst2.count {\n        return \"NO\"\n    } else\
    \ {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvwilcoxf/tmpvwilcoxf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c92926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9261db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9261d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9261c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvwilcoxf                        0x0000559f583e879f <unavailable> + 6047

    5    libc.so.6                          0x00002b2c92b12460 __libc_start_main +
    245

    6    tmpvwilcoxf                        0x0000559f583e81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Odd = lst1.filter { $0 % 2 != 0\
    \ }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    return lst1Odd.count\
    \ == lst2Even.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpfbvr3ner/tmpfbvr3ner.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0483dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0480d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0480d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0480d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfbvr3ner                        0x0000564b7af3df96 <unavailable> + 8086

    5    libc.so.6                          0x00002ad0485cb460 __libc_start_main +
    245

    6    tmpfbvr3ner                        0x0000564b7af3d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824604
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = [Int]()\n    var odds = [Int]()\n    for i in lst1 {\n      \
    \  if i % 2 == 0 {\n            evens.append(i)\n        } else {\n          \
    \  odds.append(i)\n        }\n    }\n    for i in lst2 {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    if evens.count >= odds.count {\n        return \"YES\"\n\
    \    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824604
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    var odds = 0\n    for i in lst1 {\n        if i % 2 ==\
    \ 0 {\n            evens += 1\n        } else {\n            odds += 1\n     \
    \   }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            evens\
    \ += 1\n        } else {\n            odds += 1\n        }\n    }\n    if odds\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpc_0n5o1n/tmpc_0n5o1n.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91cbc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91c8bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91c8bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91c8ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_0n5o1n                        0x000056498c94db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac91cdb0460 __libc_start_main +
    245

    6    tmpc_0n5o1n                        0x000056498c94d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count && lst2Even.count\
    \ == lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"YES\"\n    } else if lst1Even.count\
    \ == lst1.count && lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\
    \ else if lst1Odd.count == lst1.count && lst2Even.count == lst2.count {\n    \
    \    return \"NO\"\n    } else if lst1Even.count == lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Even.count != lst2.count {\n        return \"NO\"\n    } else if lst1Even.count\
    \ != lst1.count && lst2Even.count == lst2.count {\n        return \"YES\"\n  \
    \  } else if lst1Even.count != lst1.count && lst2Odd.count == lst2.count {\n \
    \       return \"NO\"\n    } else if lst1Even.count != lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpbilri4r7/tmpbilri4r7.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae49b92cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae49b623b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae49b623988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae49b6227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbilri4r7                        0x000055e6e2ea679f <unavailable> + 6047

    5    libc.so.6                          0x00002ae49bb18460 __libc_start_main +
    245

    6    tmpbilri4r7                        0x000055e6e2ea61f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n  \
    \          var j = 0\n            while j < lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    let temp = lst1[i]\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = temp\n                    break\n \
    \               }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Odd = [Int]()\n    var lst2Even = [Int]()\n    for i in 0..<lst1.count\
    \ {\n        if lst1[i] % 2 != 0 {\n            lst1Odd.append(lst1[i])\n    \
    \    }\n        if lst2[i] % 2 == 0 {\n            lst2Even.append(lst2[i])\n\
    \        }\n    }\n    if lst1Odd.count == lst2Even.count {\n        return \"\
    YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp8jnlbr2i/tmp8jnlbr2i.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31d1466c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31d115db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31d115d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31d115c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jnlbr2i                        0x000055c29d5710c6 <unavailable> + 8390

    5    libc.so.6                          0x00002b31d1652460 __libc_start_main +
    245

    6    tmp8jnlbr2i                        0x000055c29d570329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824604
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpue8w0zj3/tmpue8w0zj3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b315972ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3159421b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3159421988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31594207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpue8w0zj3                        0x000055d22502587f <unavailable> + 6271

    5    libc.so.6                          0x00002b3159916460 __libc_start_main +
    245

    6    tmpue8w0zj3                        0x000055d2250252d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = 0\n    var odds = 0\n    for\
    \ num in lst1 {\n        if num % 2 == 0 {\n            evens += 1\n        }\
    \ else {\n            odds += 1\n        }\n    }\n    for num in lst2 {\n   \
    \     if num % 2 == 0 {\n            evens += 1\n        } else {\n          \
    \  odds += 1\n        }\n    }\n    if evens % 2 == 0 && odds % 2 == 0 {\n   \
    \     return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpfb7eelrl/tmpfb7eelrl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9983ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9980f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9980f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9980f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfb7eelrl                        0x00005619ec1d5b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ad9985eb460 __libc_start_main +
    245

    6    tmpfb7eelrl                        0x00005619ec1d5249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var isEven = true\n    for i in 0..<lst1.count {\n        if lst1[i] % 2\
    \ != 0 {\n            isEven = false\n            for j in 0..<lst2.count {\n\
    \                if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = lst1[i]\n                    isEven = true\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  if !isEven {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmps0s2ckqz/tmps0s2ckqz.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8fd2aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8fcfa1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8fcfa1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8fcfa07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0s2ckqz                        0x00005605275db87f <unavailable> + 6271

    5    libc.so.6                          0x00002ab8fd496460 __libc_start_main +
    245

    6    tmps0s2ckqz                        0x00005605275db2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count ==\
    \ lst1.count || lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp1hn2jyo4/tmp1hn2jyo4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a97c6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a97965b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a97965988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a979647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1hn2jyo4                        0x000056077de8562d <unavailable> + 5677

    5    libc.so.6                          0x00002b0a97e5a460 __libc_start_main +
    245

    6    tmp1hn2jyo4                        0x000056077de851f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpc_ps05h0/tmpc_ps05h0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8a6701c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8a63f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8a63f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8a63f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_ps05h0                        0x0000565266e925ef <unavailable> + 5615

    5    libc.so.6                          0x00002ae8a68ed460 __libc_start_main +
    245

    6    tmpc_ps05h0                        0x0000565266e92049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824604
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpp87sdmea/tmpp87sdmea.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1c50b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1c4da7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1c4da7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1c4da67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp87sdmea                        0x000055ab2a4fe47d <unavailable> + 5245

    5    libc.so.6                          0x00002ba1c529c460 __libc_start_main +
    245

    6    tmpp87sdmea                        0x000055ab2a4fe049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824603
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    var lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count && lst2Even.count\
    \ == lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"YES\"\n    } else if lst1Even.count\
    \ == lst1.count {\n        return \"YES\"\n    } else if lst2Even.count == lst2.count\
    \ {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count {\n   \
    \     return \"YES\"\n    } else if lst2Odd.count == lst2.count {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpbhic63cv/tmpbhic63cv.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71bd803c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71bd4fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71bd4fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71bd4f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbhic63cv                        0x00005577f0e6962d <unavailable> + 5677

    5    libc.so.6                          0x00002b71bd9ef460 __libc_start_main +
    245

    6    tmpbhic63cv                        0x00005577f0e691f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824602
