language: swift
name: HumanEval_149_sorted_list_sum
results:
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ odd_length_words = [String]()\n    for word in lst {\n        if word.count\
    \ % 2 == 1 {\n            odd_length_words.append(word)\n        }\n    }\n  \
    \  return odd_length_words.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpcx6grda6/tmpcx6grda6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54071dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5406ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5406ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5406ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcx6grda6                        0x000055f0dfd928e6 <unavailable> + 6374

    5    libc.so.6                          0x00002b54073c8460 __libc_start_main +
    245

    6    tmpcx6grda6                        0x000055f0dfd92469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count == $1.count ? $0 < $1 : $0.count\
    \ < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n  \
    \          new_lst.append(i)\n        }\n    }\n    return new_lst.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp68y8tnmr/tmp68y8tnmr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1636fe7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1636cdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1636cde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1636cdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp68y8tnmr                        0x00005574c6e6364b <unavailable> + 9803

    5    libc.so.6                          0x00002b16371d3460 __libc_start_main +
    245

    6    tmp68y8tnmr                        0x00005574c6e62469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpherzb3lq/tmpherzb3lq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b8a8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b8783b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b8783988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b87827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpherzb3lq                        0x000055b9146ea5fb <unavailable> + 9723

    5    libc.so.6                          0x00002b05b8c78460 __libc_start_main +
    245

    6    tmpherzb3lq                        0x000055b9146e9419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n  \
    \          new_lst.append(i)\n        }\n    }\n    new_lst.sort()\n    return\
    \ new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpuczijeab/tmpuczijeab.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3becb45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bec83cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bec83c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bec83b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuczijeab                        0x00005623d0d096cb <unavailable> + 9931

    5    libc.so.6                          0x00002b3becd31460 __libc_start_main +
    245

    6    tmpuczijeab                        0x00005623d0d084e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpdjvet8ly/tmpdjvet8ly.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fbd346c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fbd03db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fbd03d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fbd03c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdjvet8ly                        0x000055f1174c064b <unavailable> + 9803

    5    libc.so.6                          0x00002b0fbd532460 __libc_start_main +
    245

    6    tmpdjvet8ly                        0x000055f1174bf469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort(by: {$0.count\
    \ < $1.count})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmparp97_ac/tmparp97_ac.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bc2f75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bc2c6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bc2c6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bc2c6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparp97_ac                        0x000056372a862f1f <unavailable> + 7967

    5    libc.so.6                          0x00002b8bc3161460 __libc_start_main +
    245

    6    tmparp97_ac                        0x000056372a862449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort(by: { $0.count <\
    \ $1.count })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw5kfdj7m/tmpw5kfdj7m.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4b644ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4b6145b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4b6145988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4b61447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw5kfdj7m                        0x000055d98d8fef1f <unavailable> + 7967

    5    libc.so.6                          0x00002ab4b663a460 __libc_start_main +
    245

    6    tmpw5kfdj7m                        0x000055d98d8fe449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted_lst = lst.sorted {\n        if $0.count == $1.count {\n            return\
    \ $0 < $1\n        }\n        return $0.count < $1.count\n    }\n    var result:\
    \ [String] = []\n    for i in sorted_lst {\n        if i.count % 2 == 0 {\n  \
    \          result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ strs = lst\n    var i = 0\n    while i < strs.count {\n        if strs[i].count\
    \ % 2 == 1 {\n            strs.remove(at: i)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    strs.sort()\n    return strs\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp53jlkpwb/tmp53jlkpwb.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cda64ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cda341b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cda341988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cda3407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53jlkpwb                        0x00005643b887a5bb <unavailable> + 9659

    5    libc.so.6                          0x00002b2cda836460 __libc_start_main +
    245

    6    tmp53jlkpwb                        0x00005643b88793d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpk7vaqqlh/tmpk7vaqqlh.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a1f31fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a1f016b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a1f016988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a1f0157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7vaqqlh                        0x0000556af26ba53b <unavailable> + 9531

    5    libc.so.6                          0x00002b5a1f50b460 __libc_start_main +
    245

    6    tmpk7vaqqlh                        0x0000556af26b9359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var odd_length_words = [String]()\n    var even_length_words\
    \ = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n    \
    \        even_length_words.append(word)\n        } else {\n            odd_length_words.append(word)\n\
    \        }\n    }\n    even_length_words.sort()\n    result = even_length_words\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpo6c1t_wm/tmpo6c1t_wm.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1472729c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1472420b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1472420988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b147241f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6c1t_wm                        0x000056068246d6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b1472915460 __libc_start_main +
    245

    6    tmpo6c1t_wm                        0x000056068246c4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = lst\n    for i in 0..<new_lst.count {\n        if new_lst[i].count\
    \ % 2 != 0 {\n            new_lst.remove(at: i)\n        }\n    }\n    return\
    \ new_lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ade247d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade244ca561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ade244ca286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ade244ca13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ade244c9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ade242c9fc3 <unavailable> + 188355

    6    tmpvzps4c7k                        0x000055ab388c37b5 <unavailable> + 10165

    7    tmpvzps4c7k                        0x000055ab388c27cd <unavailable> + 6093

    8    libc.so.6                          0x00002ade249bf460 __libc_start_main +
    245

    9    tmpvzps4c7k                        0x000055ab388c2449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ odd_length_strings: [String] = []\n    var even_length_strings: [String] = []\n\
    \    for string in lst {\n        if string.count % 2 == 0 {\n            even_length_strings.append(string)\n\
    \        } else {\n            odd_length_strings.append(string)\n        }\n\
    \    }\n    even_length_strings.sort()\n    return even_length_strings\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpffk56ejg/tmpffk56ejg.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3329b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3326afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3326af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3326ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpffk56ejg                        0x0000555c8dc3367b <unavailable> + 9851

    5    libc.so.6                          0x00002ae332ba4460 __libc_start_main +
    245

    6    tmpffk56ejg                        0x0000555c8dc32499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpherzb3lq/tmpherzb3lq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b8a8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b8783b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b8783988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b87827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpherzb3lq                        0x000055b9146ea5fb <unavailable> + 9723

    5    libc.so.6                          0x00002b05b8c78460 __libc_start_main +
    245

    6    tmpherzb3lq                        0x000055b9146e9419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpherzb3lq/tmpherzb3lq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b8a8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b8783b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b8783988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b87827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpherzb3lq                        0x000055b9146ea5fb <unavailable> + 9723

    5    libc.so.6                          0x00002b05b8c78460 __libc_start_main +
    245

    6    tmpherzb3lq                        0x000055b9146e9419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ newList = [String]()\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            newList.append(item)\n        }\n    }\n    newList.sort()\n\
    \    return newList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpedzie97g/tmpedzie97g.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f48c13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f4890ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f4890a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f489097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedzie97g                        0x0000565170b456cb <unavailable> + 9931

    5    libc.so.6                          0x00002b7f48dff460 __libc_start_main +
    245

    6    tmpedzie97g                        0x0000565170b444e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted = lst.sorted { (a, b) -> Bool in\n        if a.count == b.count {\n \
    \           return a < b\n        }\n        return a.count < b.count\n    }\n\
    \    var result: [String] = []\n    for item in sorted {\n        if item.count\
    \ % 2 == 0 {\n            result.append(item)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted = lst.sorted { (a, b) -> Bool in\n        if a.count == b.count {\n \
    \           return a < b\n        }\n        return a.count < b.count\n    }\n\
    \    var result: [String] = []\n    for i in sorted {\n        if i.count % 2\
    \ == 0 {\n            result.append(i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = lst\n    for i in 0..<new_lst.count {\n        if new_lst[i].count\
    \ % 2 != 0 {\n            new_lst.remove(at: i)\n        }\n    }\n    new_lst.sort()\n\
    \    return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b96d389dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96d3594561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b96d3594286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b96d359413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b96d3593bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b96d3393fc3 <unavailable> + 188355

    6    tmpl3tka3d2                        0x000055a3bc86e82c <unavailable> + 10284

    7    tmpl3tka3d2                        0x000055a3bc86d84d <unavailable> + 6221

    8    libc.so.6                          0x00002b96d3a89460 __libc_start_main +
    245

    9    tmpl3tka3d2                        0x000055a3bc86d4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = lst\n    for i in 0..<new_lst.count {\n        if new_lst[i].count\
    \ % 2 != 0 {\n            new_lst.remove(at: i)\n        }\n    }\n    new_lst.sort()\n\
    \    return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b96d389dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96d3594561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b96d3594286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b96d359413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b96d3593bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b96d3393fc3 <unavailable> + 188355

    6    tmpl3tka3d2                        0x000055a3bc86e82c <unavailable> + 10284

    7    tmpl3tka3d2                        0x000055a3bc86d84d <unavailable> + 6221

    8    libc.so.6                          0x00002b96d3a89460 __libc_start_main +
    245

    9    tmpl3tka3d2                        0x000055a3bc86d4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort(by: {$0.count <\
    \ $1.count})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf_i9xfoo/tmpf_i9xfoo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9aff70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9afc67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9afc67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9afc667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_i9xfoo                        0x000056315b2edf1f <unavailable> + 7967

    5    libc.so.6                          0x00002af9b015c460 __libc_start_main +
    245

    6    tmpf_i9xfoo                        0x000056315b2ed449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = lst\n    for i in 0..<new_lst.count {\n        if new_lst[i].count\
    \ % 2 != 0 {\n            new_lst.remove(at: i)\n        }\n    }\n    new_lst.sort()\n\
    \    return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b96d389dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96d3594561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b96d3594286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b96d359413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b96d3593bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b96d3393fc3 <unavailable> + 188355

    6    tmpl3tka3d2                        0x000055a3bc86e82c <unavailable> + 10284

    7    tmpl3tka3d2                        0x000055a3bc86d84d <unavailable> + 6221

    8    libc.so.6                          0x00002b96d3a89460 __libc_start_main +
    245

    9    tmpl3tka3d2                        0x000055a3bc86d4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpherzb3lq/tmpherzb3lq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b8a8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b8783b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b8783988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b87827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpherzb3lq                        0x000055b9146ea5fb <unavailable> + 9723

    5    libc.so.6                          0x00002b05b8c78460 __libc_start_main +
    245

    6    tmpherzb3lq                        0x000055b9146e9419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpherzb3lq/tmpherzb3lq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b8a8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b8783b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b8783988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b87827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpherzb3lq                        0x000055b9146ea5fb <unavailable> + 9723

    5    libc.so.6                          0x00002b05b8c78460 __libc_start_main +
    245

    6    tmpherzb3lq                        0x000055b9146e9419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for item in lst {\n        if item.count % 2 == 0 {\n\
    \            result.append(item)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpxrepe9um/tmpxrepe9um.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8239613c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b823930ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b823930a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82393097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxrepe9um                        0x000056467d2686cb <unavailable> + 9931

    5    libc.so.6                          0x00002b82397ff460 __libc_start_main +
    245

    6    tmpxrepe9um                        0x000056467d2674e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst.filter { $0.count % 2 == 0 }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpiud3wmsy/tmpiud3wmsy.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f6f576c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f6f26db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f6f26d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f6f26c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiud3wmsy                        0x000055cbcdf5c57b <unavailable> + 9595

    5    libc.so.6                          0x00002b5f6f762460 __libc_start_main +
    245

    6    tmpiud3wmsy                        0x000055cbcdf5b399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort(by: {$0.count <\
    \ $1.count})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf_i9xfoo/tmpf_i9xfoo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9aff70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9afc67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9afc67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9afc667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_i9xfoo                        0x000056315b2edf1f <unavailable> + 7967

    5    libc.so.6                          0x00002af9b015c460 __libc_start_main +
    245

    6    tmpf_i9xfoo                        0x000056315b2ed449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = lst\n    for i in 0..<new_lst.count {\n        if new_lst[i].count\
    \ % 2 != 0 {\n            new_lst.remove(at: i)\n        }\n    }\n    new_lst.sort()\n\
    \    return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b96d389dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96d3594561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b96d3594286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b96d359413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b96d3593bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b96d3393fc3 <unavailable> + 188355

    6    tmpl3tka3d2                        0x000055a3bc86e82c <unavailable> + 10284

    7    tmpl3tka3d2                        0x000055a3bc86d84d <unavailable> + 6221

    8    libc.so.6                          0x00002b96d3a89460 __libc_start_main +
    245

    9    tmpl3tka3d2                        0x000055a3bc86d4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_list = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           new_list.append(i)\n        }\n    }\n    return new_list.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmputc1dub_/tmputc1dub_.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d089adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d086a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d086a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d086a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmputc1dub_                        0x000055ff5783364b <unavailable> + 9803

    5    libc.so.6                          0x00002b7d08b99460 __libc_start_main +
    245

    6    tmputc1dub_                        0x000055ff57832469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = lst\n    for i in 0..<new_lst.count {\n        if new_lst[i].count\
    \ % 2 != 0 {\n            new_lst.remove(at: i)\n        }\n    }\n    new_lst.sort()\n\
    \    return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b96d389dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96d3594561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b96d3594286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b96d359413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b96d3593bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b96d3393fc3 <unavailable> + 188355

    6    tmpl3tka3d2                        0x000055a3bc86e82c <unavailable> + 10284

    7    tmpl3tka3d2                        0x000055a3bc86d84d <unavailable> + 6221

    8    libc.so.6                          0x00002b96d3a89460 __libc_start_main +
    245

    9    tmpl3tka3d2                        0x000055a3bc86d4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpherzb3lq/tmpherzb3lq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b8a8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b8783b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b8783988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b87827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpherzb3lq                        0x000055b9146ea5fb <unavailable> + 9723

    5    libc.so.6                          0x00002b05b8c78460 __libc_start_main +
    245

    6    tmpherzb3lq                        0x000055b9146e9419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort(by: {$0.count\
    \ < $1.count})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmparp97_ac/tmparp97_ac.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bc2f75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bc2c6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bc2c6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bc2c6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparp97_ac                        0x000056372a862f1f <unavailable> + 7967

    5    libc.so.6                          0x00002b8bc3161460 __libc_start_main +
    245

    6    tmparp97_ac                        0x000056372a862449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = lst\n    for i in 0..<new_lst.count {\n        if new_lst[i].count\
    \ % 2 != 0 {\n            new_lst.remove(at: i)\n        }\n    }\n    new_lst.sort()\n\
    \    return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b96d389dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96d3594561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b96d3594286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b96d359413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b96d3593bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b96d3393fc3 <unavailable> + 188355

    6    tmpl3tka3d2                        0x000055a3bc86e82c <unavailable> + 10284

    7    tmpl3tka3d2                        0x000055a3bc86d84d <unavailable> + 6221

    8    libc.so.6                          0x00002b96d3a89460 __libc_start_main +
    245

    9    tmpl3tka3d2                        0x000055a3bc86d4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sortedList = lst.sorted(by: {$0.count < $1.count})\n    var result = [String]()\n\
    \    for i in sortedList {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmptu1bzujw/tmptu1bzujw.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6af28ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6aef85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6aef85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6aef847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptu1bzujw                        0x000056237c8c7f0f <unavailable> + 7951

    5    libc.so.6                          0x00002af6af47a460 __libc_start_main +
    245

    6    tmptu1bzujw                        0x000056237c8c7439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpherzb3lq/tmpherzb3lq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b8a8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b8783b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b8783988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b87827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpherzb3lq                        0x000055b9146ea5fb <unavailable> + 9723

    5    libc.so.6                          0x00002b05b8c78460 __libc_start_main +
    245

    6    tmpherzb3lq                        0x000055b9146e9419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted_lst = lst.sorted { (s1, s2) -> Bool in\n        if s1.count == s2.count\
    \ {\n            return s1 < s2\n        }\n        return s1.count < s2.count\n\
    \    }\n    var result = [String]()\n    for i in 0..<sorted_lst.count {\n   \
    \     if sorted_lst[i].count % 2 == 0 {\n            result.append(sorted_lst[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    var odd_length_words: [String] = []\n    for word\
    \ in lst {\n        if word.count % 2 == 0 {\n            result.append(word)\n\
    \        } else {\n            odd_length_words.append(word)\n        }\n    }\n\
    \    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpk2tcd01n/tmpk2tcd01n.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac697ac7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6977beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6977be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6977bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2tcd01n                        0x000055dceacf067b <unavailable> + 9851

    5    libc.so.6                          0x00002ac697cb3460 __libc_start_main +
    245

    6    tmpk2tcd01n                        0x000055dceacef499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ odd_length_words: [String] = []\n    for word in lst {\n        if word.count\
    \ % 2 != 0 {\n            odd_length_words.append(word)\n        }\n    }\n  \
    \  return odd_length_words.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpg53aj_77/tmpg53aj_77.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48f79f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48f76e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48f76e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48f76e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg53aj_77                        0x0000560444867896 <unavailable> + 6294

    5    libc.so.6                          0x00002b48f7bdd460 __libc_start_main +
    245

    6    tmpg53aj_77                        0x0000560444867419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = lst\n    for i in 0..<new_lst.count {\n        if new_lst[i].count\
    \ % 2 != 0 {\n            new_lst.remove(at: i)\n        }\n    }\n    new_lst.sort()\n\
    \    return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b96d389dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96d3594561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b96d3594286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b96d359413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b96d3593bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b96d3393fc3 <unavailable> + 188355

    6    tmpl3tka3d2                        0x000055a3bc86e82c <unavailable> + 10284

    7    tmpl3tka3d2                        0x000055a3bc86d84d <unavailable> + 6221

    8    libc.so.6                          0x00002b96d3a89460 __libc_start_main +
    245

    9    tmpl3tka3d2                        0x000055a3bc86d4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n  \
    \          new_lst.append(i)\n        }\n    }\n    new_lst.sort()\n    return\
    \ new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpuczijeab/tmpuczijeab.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3becb45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bec83cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bec83c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bec83b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuczijeab                        0x00005623d0d096cb <unavailable> + 9931

    5    libc.so.6                          0x00002b3becd31460 __libc_start_main +
    245

    6    tmpuczijeab                        0x00005623d0d084e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpk7vaqqlh/tmpk7vaqqlh.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a1f31fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a1f016b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a1f016988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a1f0157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7vaqqlh                        0x0000556af26ba53b <unavailable> + 9531

    5    libc.so.6                          0x00002b5a1f50b460 __libc_start_main +
    245

    6    tmpk7vaqqlh                        0x0000556af26b9359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted = lst.sorted { (a, b) -> Bool in\n        if a.count == b.count {\n \
    \           return a < b\n        }\n        return a.count < b.count\n    }\n\
    \    var result: [String] = []\n    for i in sorted {\n        if i.count % 2\
    \ == 0 {\n            result.append(i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpherzb3lq/tmpherzb3lq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05b8a8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05b8783b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05b8783988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05b87827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpherzb3lq                        0x000055b9146ea5fb <unavailable> + 9723

    5    libc.so.6                          0x00002b05b8c78460 __libc_start_main +
    245

    6    tmpherzb3lq                        0x000055b9146e9419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = lst\n    for i in 0..<new_lst.count {\n        if new_lst[i].count\
    \ % 2 != 0 {\n            new_lst.remove(at: i)\n        }\n    }\n    new_lst.sort()\n\
    \    return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b96d389dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96d3594561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b96d3594286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b96d359413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b96d3593bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b96d3393fc3 <unavailable> + 188355

    6    tmpl3tka3d2                        0x000055a3bc86e82c <unavailable> + 10284

    7    tmpl3tka3d2                        0x000055a3bc86d84d <unavailable> + 6221

    8    libc.so.6                          0x00002b96d3a89460 __libc_start_main +
    245

    9    tmpl3tka3d2                        0x000055a3bc86d4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ result = lst.filter { $0.count % 2 == 0 }\n    return result.sorted { $0.count\
    \ < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpilwbif7e/tmpilwbif7e.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87dc252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87dbf49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87dbf49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87dbf487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpilwbif7e                        0x000055b7352addbf <unavailable> + 7615

    5    libc.so.6                          0x00002b87dc43e460 __libc_start_main +
    245

    6    tmpilwbif7e                        0x000055b7352ad2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var dict = [Int: [String]]()\n    for i in lst {\n\
    \        if dict[i.count] == nil {\n            dict[i.count] = [i]\n        }\
    \ else {\n            dict[i.count]?.append(i)\n        }\n    }\n    for i in\
    \ dict {\n        if i.key % 2 == 0 {\n            result.append(contentsOf: i.value)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp071chw1v/tmp071chw1v.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad176e82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad176b79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad176b79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad176b787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp071chw1v                        0x000055e8d61f49bb <unavailable> + 10683

    5    libc.so.6                          0x00002ad17706e460 __libc_start_main +
    245

    6    tmp071chw1v                        0x000055e8d61f37d9 <unavailable> + 6105

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    while i < lst.count {\n        if lst[i].count\
    \ % 2 == 1 {\n            lst.remove(at: i)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk73szpqm/tmpk73szpqm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf53bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf50b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf50b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf50b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk73szpqm                        0x000055c567fb25bb <unavailable> + 9659

    5    libc.so.6                          0x00002aaaf55aa460 __libc_start_main +
    245

    6    tmpk73szpqm                        0x000055c567fb13d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sg35d9v/tmp2sg35d9v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34017bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34014b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34014b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34014b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sg35d9v                        0x0000563a676be6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b34019aa460 __libc_start_main +
    245

    6    tmp2sg35d9v                        0x0000563a676bd4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            result.append(word)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp558yawjr/tmp558yawjr.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9403766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b940345db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b940345d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b940345c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp558yawjr                        0x000055a59fc2f6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9403952460 __libc_start_main +
    245

    6    tmp558yawjr                        0x000055a59fc2e4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwpn1hf6z/tmpwpn1hf6z.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dc74f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dc71eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dc71ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dc71e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpn1hf6z                        0x0000560d326b4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b0dc76df460 __libc_start_main +
    245

    6    tmpwpn1hf6z                        0x0000560d326b42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n \
    \           result.append(i)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp724xgutt/tmp724xgutt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b053d872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b053d569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b053d569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b053d5687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp724xgutt                        0x000055d80f2c267b <unavailable> + 9851

    5    libc.so.6                          0x00002b053da5e460 __libc_start_main +
    245

    6    tmp724xgutt                        0x000055d80f2c1499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw7c6vh_2/tmpw7c6vh_2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b2493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b218ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b218a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b21897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c6vh_2                        0x00005644730c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b57b267f460 __libc_start_main +
    245

    6    tmpw7c6vh_2                        0x00005644730c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824675
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp3a5gq14q/tmp3a5gq14q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89cc756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89cc44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89cc44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89cc44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a5gq14q                        0x0000562bf238d4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b89cc942460 __libc_start_main +
    245

    6    tmp3a5gq14q                        0x0000562bf238c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824675
