name: HumanEval_11_string_xor
language: swift
prompt: "\n/// Input are two strings a and b consisting only of 1s and 0s.\n/// Perform\
  \ binary XOR on these inputs and return result also as a string.\n/// >>> string_xor(a:\
  \ \"010\", b: \"110\")\n/// \"100\"\nfunc string_xor(a: String, b: String) -> String\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(string_xor(a: \"111000\", b: \"101010\"\
  ) == \"010010\")\nassert(string_xor(a: \"1\", b: \"1\") == \"0\")\nassert(string_xor(a:\
  \ \"0101\", b: \"0000\") == \"0101\")"
completions: ["    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n\
    \    }\n    return result", "    var result = \"\"\n    for (index, char) in a.enumerated()\
    \ {\n        let a = char == \"1\"\n        let b = b[b.index(b.startIndex, offsetBy:\
    \ index)] == \"1\"\n        result += a != b ? \"1\" : \"0\"\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n\
    \    }\n    return result", "    let a = a.utf8.map { UInt8(bitPattern: $0) }\n\
    \    let b = b.utf8.map { UInt8(bitPattern: $0) }\n    let xor = zip(a, b).map\
    \ { $0 ^ $1 }\n    return xor.map { String(UnicodeScalar(UInt8(bitPattern: $0)))\
    \ }.joined()", "    var result = \"\"\n    for i in 0..<a.count {\n        let\
    \ a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n   \
    \ let result = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return result.map {\
    \ String($0, radix: 2) }.joined()", "    let a = a.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let b = b.utf8.map { UInt8(bitPattern: $0) }\n    let c = zip(a,\
    \ b).map { $0 ^ $1 }\n    return c.map { String(UnicodeScalar(UInt8(bitPattern:\
    \ $0))) }.joined()", "    let aa = a.utf8.map { $0 - 48 }\n    let bb = b.utf8.map\
    \ { $0 - 48 }\n    let cc = zip(aa, bb).map { $0 ^ $1 }\n    return String(cc.map\
    \ { $0 + 48 })", "    var result = \"\"\n    for i in 0..<a.count {\n        let\
    \ a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n   \
    \ let xor_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return String(bytes:\
    \ xor_bytes, encoding: .utf8)!", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a = a.utf8.map { $0 - 48 }\n    let\
    \ b = b.utf8.map { $0 - 48 }\n    let c = zip(a, b).map { $0 ^ $1 }\n    return\
    \ String(c.map { $0 + 48 })", "    let a_bytes = a.utf8.map { UInt8($0) }\n  \
    \  let b_bytes = b.utf8.map { UInt8($0) }\n    let result = zip(a_bytes, b_bytes).map\
    \ { $0 ^ $1 }\n    return result.map { String($0, radix: 2) }.joined()", "   \
    \ var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[i]\n        let b_char\
    \ = b[i]\n        if a_char == b_char {\n            result += \"0\"\n       \
    \ } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", '    return
    a.xor(b)', "    let a = a.utf8.map { UInt8(bitPattern: $0) }\n    let b = b.utf8.map\
    \ { UInt8(bitPattern: $0) }\n    let xor = zip(a, b).map { $0 ^ $1 }\n    return\
    \ xor.map { String(UnicodeScalar(UInt8(bitPattern: $0))) }.joined()", "    var\
    \ result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let aChar = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let bChar = b[b.index(b.startIndex, offsetBy: i)]\n \
    \       if aChar == bChar {\n            result += \"0\"\n        } else {\n \
    \           result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a\
    \ = a.utf8.map { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let xor = zip(a, b).map { $0 ^ $1 }\n    return xor.map { String(UnicodeScalar(UInt8(bitPattern:\
    \ $0))) }.joined()", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        let a_int = Int(String(a_char))!\n\
    \        let b_int = Int(String(b_char))!\n        result += String(a_int ^ b_int)\n\
    \    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count {\n\
    \        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a_bytes = a.utf8.map { UInt8($0)\
    \ }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let xor_bytes = zip(a_bytes,\
    \ b_bytes).map { $0 ^ $1 }\n    return xor_bytes.map { String($0, radix: 2) }.joined()",
  "    let a = a.utf8.map { Int($0) - 48 }\n    let b = b.utf8.map { Int($0) - 48\
    \ }\n    var result = \"\"\n    for i in 0..<a.count {\n        result += String(a[i]\
    \ ^ b[i])\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    let a = a.utf8.map\
    \ { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern: $0) }\n\
    \    let result = zip(a, b).map { $0 ^ $1 }\n    return result.reduce(\"\") {\
    \ $0 + String(format: \"%02x\", $1) }", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a = a.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let b = b.utf8.map { UInt8(bitPattern: $0) }\n    let result = zip(a,\
    \ b).map { $0 ^ $1 }\n    return result.reduce(\"\") { $0 + String(format: \"\
    %02x\", $1) }", "    var result = \"\"\n    for i in 0..<a.count {\n        let\
    \ a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for (index, char) in a.characters.enumerated() {\n        let a\
    \ = char == \"0\" ? false : true\n        let b = b[index] == \"0\" ? false :\
    \ true\n        result += a != b ? \"1\" : \"0\"\n    }\n    return result", " \
    \   var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for (i, j) in zip(a, b) {\n        result += String(Int(String(i))!\
    \ ^ Int(String(j))!)\n    }\n    return result", "    var result = \"\"\n    for\
    \ i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for (index, char) in a.enumerated() {\n        let a = char == \"\
    1\"\n        let b = b[b.index(b.startIndex, offsetBy: index)] == \"1\"\n    \
    \    result += a != b ? \"1\" : \"0\"\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for (index, char) in a.characters.enumerated() {\n        let a\
    \ = char == \"0\" ? false : true\n        let b = b[index] == \"0\" ? false :\
    \ true\n        result += a ^ b ? \"1\" : \"0\"\n    }\n    return result", " \
    \   var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(a_char == b_char ? \"0\" : \"1\")\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for (index, char) in a.characters.enumerated() {\n        let a\
    \ = char == \"0\" ? false : true\n        let b = b[index] == \"0\" ? false :\
    \ true\n        result += a != b ? \"1\" : \"0\"\n    }\n    return result", " \
    \   var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a\
    \ = a.utf8.map { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let result = zip(a, b).map { $0 ^ $1 }\n    return result.reduce(\"\
    \") { $0 + String(format: \"%02x\", $1) }", "    var result = \"\"\n    for i\
    \ in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for (i, j) in zip(a, b) {\n        result += String(i ^ j)\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += \"\\(Int(String(a_char))! ^ Int(String(b_char))!)\"\n    }\n\
    \    return result", "    let a = a.utf8.map { UInt8(bitPattern: $0) }\n    let\
    \ b = b.utf8.map { UInt8(bitPattern: $0) }\n    let result = zip(a, b).map { $0\
    \ ^ $1 }\n    return result.reduce(\"\") { $0 + String(format: \"%02x\", $1) }",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a\
    \ = a.utf8.map { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let result = zip(a, b).map { $0 ^ $1 }\n    return result.reduce(\"\
    \") { $0 + String(UnicodeScalar(bitPattern: $1)) }", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        let a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n\
    \        let xor = a_int ^ b_int\n        result += String(xor)\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for (index, char) in a.characters.enumerated() {\n        let a\
    \ = char == \"0\" ? false : true\n        let b = b[index] == \"0\" ? false :\
    \ true\n        result += a != b ? \"1\" : \"0\"\n    }\n    return result", " \
    \   let a_bytes = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0)\
    \ }\n    let xor_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    let xor_string\
    \ = xor_bytes.map { String($0, radix: 2) }.joined()\n    return xor_string", " \
    \   let a = a.utf8.map { Int($0) - 48 }\n    let b = b.utf8.map { Int($0) - 48\
    \ }\n    var result = \"\"\n    for i in 0..<a.count {\n        result += String(a[i]\
    \ ^ b[i])\n    }\n    return result", "    var result = \"\"\n    for (index,\
    \ char) in a.characters.enumerated() {\n        let a = Int(String(char))!\n \
    \       let b = Int(String(b[b.index(b.startIndex, offsetBy: index)]))!\n    \
    \    result += String(a ^ b)\n    }\n    return result", "    var result = \"\"\
    \n    for (i, j) in zip(a, b) {\n        result += String(i != j ? \"1\" : \"\
    0\")\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        result += String(a_char ==\
    \ b_char ? \"0\" : \"1\")\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        let a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n\
    \        let xor = a_int ^ b_int\n        result.append(String(xor))\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        let a_int = Int(String(a_char))!\n\
    \        let b_int = Int(String(b_char))!\n        let xor = a_int ^ b_int\n \
    \       result.append(String(xor))\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for (index, char)\
    \ in a.characters.enumerated() {\n        let a = char == \"0\" ? false : true\n\
    \        let b = b[index] == \"0\" ? false : true\n        result += a ^ b ? \"\
    1\" : \"0\"\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a_bytes = a.utf8.map { UInt8($0)\
    \ }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let xor_bytes = zip(a_bytes,\
    \ b_bytes).map { $0 ^ $1 }\n    return xor_bytes.map { String($0, radix: 2) }.joined()",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        let a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n\
    \        result += String(a_int ^ b_int)\n    }\n    return result", "    let\
    \ a_bytes = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0)\
    \ }\n    let xor_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return xor_bytes.map\
    \ { String($0, radix: 2) }.joined()", "    var result = \"\"\n    for (index,\
    \ char) in a.characters.enumerated() {\n        let a = char == \"0\" ? false\
    \ : true\n        let b = b[index] == \"0\" ? false : true\n        result +=\
    \ a != b ? \"1\" : \"0\"\n    }\n    return result", "    let a_bytes = a.utf8.map\
    \ { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n    let xor_bytes\
    \ = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return String(bytes: xor_bytes,\
    \ encoding: .utf8)!", "    var result = \"\"\n    for i in 0..<a.count {\n   \
    \     let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    let a = a.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let b = b.utf8.map { UInt8(bitPattern: $0) }\n    let result = zip(a,\
    \ b).map { $0 ^ $1 }\n    return result.reduce(\"\") { $0 + String(format: \"\
    %02x\", $1) }", "    var result = \"\"\n    for i in 0..<a.count {\n        let\
    \ a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        let a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n\
    \        let c_int = a_int ^ b_int\n        result += String(c_int)\n    }\n \
    \   return result", "    var result = \"\"\n    for i in 0..<a.count {\n     \
    \   let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        let a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n\
    \        let xor = a_int ^ b_int\n        result.append(String(xor))\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    let a = a.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let b = b.utf8.map { UInt8(bitPattern: $0) }\n    let result = zip(a,\
    \ b).map { $0 ^ $1 }\n    return result.reduce(\"\") { $0 + String(format: \"\
    %02x\", $1) }", "    let a = a.utf8.map { UInt8(bitPattern: $0) }\n    let b =\
    \ b.utf8.map { UInt8(bitPattern: $0) }\n    let xor = zip(a, b).map { $0 ^ $1\
    \ }\n    return xor.map { String(UnicodeScalar(UInt8(bitPattern: $0))) }.joined()",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        let a_int = Int(String(a_char))!\n\
    \        let b_int = Int(String(b_char))!\n        result += String(a_int ^ b_int)\n\
    \    }\n    return result", "    let a = a.utf8.map { Int($0) - 48 }\n    let\
    \ b = b.utf8.map { Int($0) - 48 }\n    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        result += String(a[i] ^ b[i])\n    }\n    return result", "    var\
    \ result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bin\
    \ = a.utf8.map { Int($0) - 48 }\n    let b_bin = b.utf8.map { Int($0) - 48 }\n\
    \    let xor_bin = zip(a_bin, b_bin).map { $0 != $1 ? 1 : 0 }\n    return xor_bin.map\
    \ { String($0) }.joined()", "    var result = \"\"\n    for i in 0..<a.count {\n\
    \        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        let a_int = Int(String(a_char))!\n\
    \        let b_int = Int(String(b_char))!\n        result += String(a_int ^ b_int)\n\
    \    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count {\n\
    \        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n  \
    \          result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    var result = \"\"\n    for (index, char) in a.enumerated()\
    \ {\n        let a = Int(String(char))!\n        let b = Int(String(b[b.index(b.startIndex,\
    \ offsetBy: index)]))!\n        result += String(a ^ b)\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_i = a[a.index(a.startIndex, offsetBy: i)]\n        let b_i = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_i == b_i {\n            result += \"0\"\n      \
    \  } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_index = a.index(a.startIndex,\
    \ offsetBy: i)\n        let b_index = b.index(b.startIndex, offsetBy: i)\n   \
    \     let a_char = a[a_index]\n        let b_char = b[b_index]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", '    return
    String(zip(a, b).map { $0 == $1 ? "0" : "1" })', "    let a = a.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let b = b.utf8.map { UInt8(bitPattern: $0) }\n    let c = zip(a,\
    \ b).map { $0 ^ $1 }\n    return c.map { String(UnicodeScalar(UInt8(bitPattern:\
    \ $0))) }.joined()", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        result += String(Int(String(a_char))!\
    \ ^ Int(String(b_char))!)\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(a_char == b_char ? \"0\" : \"1\")\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a\
    \ = a.utf8.map { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let result = zip(a, b).map { $0 ^ $1 }\n    return result.reduce(\"\
    \") { $0 + String(format: \"%02x\", $1) }", "    var result = \"\"\n    for (index,\
    \ char) in a.characters.enumerated() {\n        let a_bit = char == \"1\" ? 1\
    \ : 0\n        let b_bit = b[b.index(b.startIndex, offsetBy: index)] == \"1\"\
    \ ? 1 : 0\n        result += String(a_bit ^ b_bit)\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n   \
    \ let result_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return result_bytes.map\
    \ { String($0, radix: 2) }.joined()", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for (i, j) in\
    \ zip(a, b) {\n        result += String(Int(String(i))! ^ Int(String(j))!)\n \
    \   }\n    return result", "    let a_bytes = a.utf8.map { UInt8($0) }\n    let\
    \ b_bytes = b.utf8.map { UInt8($0) }\n    let xor_bytes = zip(a_bytes, b_bytes).map\
    \ { $0 ^ $1 }\n    return String(bytes: xor_bytes, encoding: .utf8)!", "    let\
    \ a_bytes = a.utf8.map { $0 }\n    let b_bytes = b.utf8.map { $0 }\n    let c_bytes\
    \ = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return String(bytes: c_bytes, encoding:\
    \ .utf8)!", "    let a = a.utf8.map { Int($0) - 48 }\n    let b = b.utf8.map {\
    \ Int($0) - 48 }\n    let result = zip(a, b).map { $0 ^ $1 }\n    return result.map\
    \ { String($0) }.joined()", "    let a_bytes = a.utf8.map { UInt8($0) }\n    let\
    \ b_bytes = b.utf8.map { UInt8($0) }\n    let result = zip(a_bytes, b_bytes).map\
    \ { $0 ^ $1 }\n    return result.map { String($0, radix: 2) }.joined()", "   \
    \ let a = a.utf8.map { UInt8(bitPattern: $0) }\n    let b = b.utf8.map { UInt8(bitPattern:\
    \ $0) }\n    let result = zip(a, b).map { $0 ^ $1 }\n    return result.reduce(\"\
    \") { $0 + String(format: \"%02x\", $1) }", "    var result = \"\"\n    for (i,\
    \ j) in zip(a, b) {\n        if i == j {\n            result.append(\"0\")\n \
    \       } else {\n            result.append(\"1\")\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        let a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n\
    \        let res_int = a_int ^ b_int\n        result += String(res_int)\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    result += a[i] == b[i] ? \"0\" : \"1\"\n    }\n    return result", "    var\
    \ result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    let a = Array(a)\n    let b = Array(b)\n    let result\
    \ = zip(a, b).map { $0 == $1 ? \"0\" : \"1\" }\n    return String(result)", " \
    \   var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b = b[b.index(b.startIndex, offsetBy: i)]\n     \
    \   result += String(a ^ b)\n    }\n    return result", "    var result = \"\"\
    \n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    var result = \"\"\n    for i in 0..<a.count {\n    \
    \    let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char =\
    \ b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n     \
    \       result += \"0\"\n        } else {\n            result += \"1\"\n     \
    \   }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char == b_char {\n   \
    \         result += \"0\"\n        } else {\n            result += \"1\"\n   \
    \     }\n    }\n    return result", "    var result = \"\"\n    for (index, char)\
    \ in a.characters.enumerated() {\n        let a = Int(String(char))!\n       \
    \ let b = Int(String(b[b.index(b.startIndex, offsetBy: index)]))!\n        result\
    \ += String(a ^ b)\n    }\n    return result", "    var result = \"\"\n    for\
    \ i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n\
    \        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if a_char\
    \ == b_char {\n            result += \"0\"\n        } else {\n            result\
    \ += \"1\"\n        }\n    }\n    return result", "    var result = \"\"\n   \
    \ for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    let a_bytes\
    \ = a.utf8.map { UInt8($0) }\n    let b_bytes = b.utf8.map { UInt8($0) }\n   \
    \ let xor_bytes = zip(a_bytes, b_bytes).map { $0 ^ $1 }\n    return String(bytes:\
    \ xor_bytes, encoding: .utf8)!", "    var result = \"\"\n    for i in 0..<a.count\
    \ {\n        let a_char = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char\
    \ = b[b.index(b.startIndex, offsetBy: i)]\n        result += String(a_char ==\
    \ b_char ? \"0\" : \"1\")\n    }\n    return result", "    var result = \"\"\n\
    \    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex, offsetBy:\
    \ i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n        if\
    \ a_char == b_char {\n            result += \"0\"\n        } else {\n        \
    \    result += \"1\"\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    for (index, char) in a.enumerated() {\n        if char == \"0\" {\n\
    \            if b[b.index(b.startIndex, offsetBy: index)] == \"0\" {\n       \
    \         result += \"0\"\n            } else {\n                result += \"\
    1\"\n            }\n        } else {\n            if b[b.index(b.startIndex, offsetBy:\
    \ index)] == \"0\" {\n                result += \"1\"\n            } else {\n\
    \                result += \"0\"\n            }\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        let a_int = Int(String(a_char))!\n        let b_int =\
    \ Int(String(b_char))!\n        result += String(a_int ^ b_int)\n    }\n    return\
    \ result", "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char\
    \ = a[a.index(a.startIndex, offsetBy: i)]\n        let b_char = b[b.index(b.startIndex,\
    \ offsetBy: i)]\n        if a_char == b_char {\n            result += \"0\"\n\
    \        } else {\n            result += \"1\"\n        }\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(Int(String(a_char))! ^ Int(String(b_char))!)\n    }\n\
    \    return result", "    let a_bytes = a.utf8.map { UInt8($0) }\n    let b_bytes\
    \ = b.utf8.map { UInt8($0) }\n    let xor_bytes = zip(a_bytes, b_bytes).map {\
    \ $0 ^ $1 }\n    return xor_bytes.map { String($0, radix: 2) }.joined()", "  \
    \  var result = \"\"\n    for (i, char) in a.characters.enumerated() {\n     \
    \   let a = char == \"1\"\n        let b = b[b.index(b.startIndex, offsetBy: i)]\
    \ == \"1\"\n        result += a != b ? \"1\" : \"0\"\n    }\n    return result",
  "    var result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        let a_int = Int(String(a_char))!\n        let b_int = Int(String(b_char))!\n\
    \        result += String(a_int ^ b_int)\n    }\n    return result", "    var\
    \ result = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        if a_char == b_char {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for i in 0..<a.count {\n        let a_char = a[a.index(a.startIndex,\
    \ offsetBy: i)]\n        let b_char = b[b.index(b.startIndex, offsetBy: i)]\n\
    \        result += String(a_char == b_char ? \"0\" : \"1\")\n    }\n    return\
    \ result"]
stop_tokens:
- "\n}"
