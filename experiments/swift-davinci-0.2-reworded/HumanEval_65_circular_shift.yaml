name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(x: 12, shift: 1)\n/// \"21\"\n\
  /// >>> circular_shift(x: 12, shift: 2)\n/// \"12\"\nfunc circular_shift(x: Int,\
  \ shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    let digits = String(x)\n    if shift >= digits.count {\n      \
    \  return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let n = digits.count\n    if shift >= n {\n  \
    \      return String(digits.reversed())\n    }\n    let i = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[i...] + digits[..<i])", "    let\
    \ digits = String(x)\n    let length = digits.count\n    if shift > length {\n\
    \        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let first = digits[..<index]\n    let second = digits[index...]\n\
    \    return String(second + first)", "    var x = x\n    var shift = shift\n \
    \   var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n \
    \       x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n \
    \   return String(shifted.reversed())", "    let digits = String(x)\n    let n\
    \ = digits.count\n    if shift >= n {\n        return String(digits.reversed())\n\
    \    }\n    let i = n - shift\n    let y = digits.index(digits.startIndex, offsetBy:\
    \ i)\n    return String(digits[y...] + digits[..<y])", "    let str = String(x)\n\
    \    let count = str.count\n    if shift > count {\n        return String(str.reversed())\n\
    \    }\n    let index = str.index(str.startIndex, offsetBy: shift)\n    let prefix\
    \ = str[str.startIndex..<index]\n    let suffix = str[index..<str.endIndex]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    let count\
    \ = digits.count\n    if shift >= count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift >= length {\n        return String(digits.reversed())\n    }\n \
    \   let index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift >= length {\n        return String(digits.reversed())\n    }\n \
    \   let left = digits.index(digits.startIndex, offsetBy: shift)\n    let right\
    \ = digits.index(digits.startIndex, offsetBy: length - shift)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    let digits = String(x)\n    let shift\
    \ = shift % digits.count\n    let prefix = digits.suffix(shift)\n    let suffix\
    \ = digits.prefix(digits.count - shift)\n    return String(prefix + suffix)",
  "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    shift %= digits.count\n\
    \    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ String(shifted.reversed())", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift >= length {\n        return String(digits.reversed())\n    }\n \
    \   let index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift > length {\n        return String(digits.reversed())\n    }\n  \
    \  let start = digits.index(digits.startIndex, offsetBy: shift)\n    let end =\
    \ digits.index(digits.endIndex, offsetBy: -shift)\n    return String(digits[start..<end]\
    \ + digits[digits.startIndex..<start] + digits[end..<digits.endIndex])", "   \
    \ let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let length = digits.count\n    if shift >= length {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    if shift >= digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let n = digits.count\n    if shift >= n {\n  \
    \      return String(digits.reversed())\n    }\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let right = digits.index(digits.startIndex, offsetBy:\
    \ n - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    guard shift < digits.count else {\n        return\
    \ String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let len = digits.count\n    if shift > len {\n\
    \        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)"]
stop_tokens:
- "\n}"
