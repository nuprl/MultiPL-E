name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(x: 12, shift: 1)\n/// \"21\"\n\
  /// >>> circular_shift(x: 12, shift: 2)\n/// \"12\"\nfunc circular_shift(x: Int,\
  \ shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    let digits = String(x)\n    if shift >= digits.count {\n      \
    \  return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let n = digits.count\n    if shift >= n {\n  \
    \      return String(digits.reversed())\n    }\n    let i = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[i...] + digits[..<i])", "    let\
    \ digits = String(x)\n    let length = digits.count\n    if shift > length {\n\
    \        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let first = digits[..<index]\n    let second = digits[index...]\n\
    \    return String(second + first)", "    var x = x\n    var shift = shift\n \
    \   var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n \
    \       x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n \
    \   return String(shifted.reversed())", "    let digits = String(x)\n    let n\
    \ = digits.count\n    if shift >= n {\n        return String(digits.reversed())\n\
    \    }\n    let i = n - shift\n    let y = digits.index(digits.startIndex, offsetBy:\
    \ i)\n    return String(digits[y...] + digits[..<y])", "    let str = String(x)\n\
    \    let count = str.count\n    if shift > count {\n        return String(str.reversed())\n\
    \    }\n    let index = str.index(str.startIndex, offsetBy: shift)\n    let prefix\
    \ = str[str.startIndex..<index]\n    let suffix = str[index..<str.endIndex]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    let count\
    \ = digits.count\n    if shift >= count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift >= length {\n        return String(digits.reversed())\n    }\n \
    \   let index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift >= length {\n        return String(digits.reversed())\n    }\n \
    \   let left = digits.index(digits.startIndex, offsetBy: shift)\n    let right\
    \ = digits.index(digits.startIndex, offsetBy: length - shift)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    let digits = String(x)\n    let shift\
    \ = shift % digits.count\n    let prefix = digits.suffix(shift)\n    let suffix\
    \ = digits.prefix(digits.count - shift)\n    return String(prefix + suffix)",
  "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    shift %= digits.count\n\
    \    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ String(shifted.reversed())", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift >= length {\n        return String(digits.reversed())\n    }\n \
    \   let index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift > length {\n        return String(digits.reversed())\n    }\n  \
    \  let start = digits.index(digits.startIndex, offsetBy: shift)\n    let end =\
    \ digits.index(digits.endIndex, offsetBy: -shift)\n    return String(digits[start..<end]\
    \ + digits[digits.startIndex..<start] + digits[end..<digits.endIndex])", "   \
    \ let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let length = digits.count\n    if shift >= length {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    if shift >= digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let n = digits.count\n    if shift >= n {\n  \
    \      return String(digits.reversed())\n    }\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let right = digits.index(digits.startIndex, offsetBy:\
    \ n - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    guard shift < digits.count else {\n        return\
    \ String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let len = digits.count\n    if shift > len {\n\
    \        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    let length\
    \ = digits.count\n    if shift >= length {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: length)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    let digits = String(x)\n    let n\
    \ = digits.count\n    if shift >= n {\n        return String(digits.reversed())\n\
    \    }\n    let i = n - shift\n    let left = digits[digits.index(digits.startIndex,\
    \ offsetBy: i)..<digits.endIndex]\n    let right = digits[digits.startIndex..<digits.index(digits.startIndex,\
    \ offsetBy: i)]\n    return String(left + right)", "    let digits = String(x)\n\
    \    let n = digits.count\n    if shift > n {\n        return String(digits.reversed())\n\
    \    }\n    let i = n - shift\n    let left = digits[digits.index(digits.startIndex,\
    \ offsetBy: i)..<digits.endIndex]\n    let right = digits[digits.startIndex..<digits.index(digits.startIndex,\
    \ offsetBy: i)]\n    return String(left + right)", "    let x_str = String(x)\n\
    \    if shift > x_str.count {\n        return String(x_str.reversed())\n    }\n\
    \    let index = x_str.index(x_str.startIndex, offsetBy: shift)\n    return String(x_str[index...]\
    \ + x_str[..<index])", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift > length {\n        return String(digits.reversed())\n    }\n  \
    \  let index = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix\
    \ = digits[..<index]\n    let suffix = digits[index...]\n    return String(suffix\
    \ + prefix)", "    var x_str = String(x)\n    if shift > x_str.count {\n     \
    \   x_str = String(x_str.reversed())\n    } else {\n        x_str = String(x_str.suffix(shift)\
    \ + x_str.prefix(x_str.count - shift))\n    }\n    return x_str", "    var x =\
    \ x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0 {\n    \
    \    digits.append(x % 10)\n        x /= 10\n    }\n    shift %= digits.count\n\
    \    if shift == 0 {\n        return digits.map { String($0) }.joined()\n    }\n\
    \    return digits.reversed().suffix(shift).map { String($0) }.joined() +\n  \
    \      digits.prefix(digits.count - shift).map { String($0) }.joined()", "   \
    \ let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    let s = String(x)\n    let\
    \ n = s.count\n    if shift >= n {\n        return String(s.reversed())\n    }\n\
    \    let i = s.index(s.startIndex, offsetBy: shift)\n    return String(s[i...]\
    \ + s[..<i])", "    let digits = String(x)\n    let length = digits.count\n  \
    \  let shift = shift % length\n    let left = String(digits.suffix(shift))\n \
    \   let right = String(digits.prefix(length - shift))\n    return left + right",
  "    let digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let length = digits.count\n    let shift = shift % length\n    let left =\
    \ String(digits.suffix(shift))\n    let right = String(digits.prefix(length -\
    \ shift))\n    return left + right", "    let digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let x_str = String(x)\n    let len = x_str.count\n\
    \    if shift >= len {\n        return String(x_str.reversed())\n    }\n    let\
    \ shift_str = x_str[x_str.index(x_str.startIndex, offsetBy: shift)...]\n    let\
    \ shift_str_2 = x_str[..<x_str.index(x_str.startIndex, offsetBy: shift)]\n   \
    \ return String(shift_str + shift_str_2)", "    let str = String(x)\n    let len\
    \ = str.count\n    if shift > len {\n        return String(str.reversed())\n \
    \   }\n    let index = str.index(str.startIndex, offsetBy: shift)\n    return\
    \ String(str[index...] + str[..<index])", "    var digits = String(x)\n    if\
    \ shift > digits.count {\n        return String(digits.reversed())\n    }\n  \
    \  let index = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix\
    \ = digits[..<index]\n    let suffix = digits[index...]\n    return String(suffix\
    \ + prefix)", "    let digits = String(x)\n    let length = digits.count\n   \
    \ if shift > length {\n        return String(digits.reversed())\n    }\n    let\
    \ index = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix = digits[..<index]\n\
    \    let suffix = digits[index...]\n    return String(suffix + prefix)", "   \
    \ var digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let first = digits[0..<shift].reversed()\n    let second = digits[shift..<digits.count].reversed()\n\
    \    return String(first + second)", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reversed())\n    }\n\
    \    let shift = shift % digits.count\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    let digits\
    \ = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let length = digits.count\n    let shift = shift % length\n    let left =\
    \ digits.index(digits.startIndex, offsetBy: shift)\n    let right = digits.index(digits.startIndex,\
    \ offsetBy: length - shift)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let x_str = String(x)\n    let x_len = x_str.count\n    if shift >= x_len {\n\
    \        return String(x_str.reversed())\n    }\n    let shift_str = x_str[x_str.index(x_str.startIndex,\
    \ offsetBy: shift)..<x_str.endIndex]\n    let shift_str_rev = String(shift_str.reversed())\n\
    \    let shift_str_rev_len = shift_str_rev.count\n    let shift_str_rev_str =\
    \ x_str[x_str.startIndex..<x_str.index(x_str.startIndex, offsetBy: x_len - shift_str_rev_len)]\n\
    \    return shift_str_rev + shift_str_rev_str", "    var x = x\n    var shift\
    \ = shift\n    var digits = [Int]()\n    var result = \"\"\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        shift %= digits.count\n    }\n    for i in 0..<digits.count {\n \
    \       result += String(digits[(i + shift) % digits.count])\n    }\n    return\
    \ result", "    let string = String(x)\n    if shift > string.count {\n      \
    \  return String(string.reversed())\n    }\n    let index = string.index(string.startIndex,\
    \ offsetBy: shift)\n    return String(string[index...] + string[..<index])", " \
    \   var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    let n = digits.count\n    if shift > n {\n\
    \        return String(digits.reversed())\n    }\n    let shifted = digits[n -\
    \ shift ..< n] + digits[0 ..< n - shift]\n    return String(shifted.map { String($0)\
    \ }.joined())", "    let digits = String(x)\n    let n = digits.count\n    if\
    \ shift > n {\n        return String(digits.reversed())\n    }\n    let left =\
    \ digits.index(digits.startIndex, offsetBy: shift)\n    let right = digits.index(digits.startIndex,\
    \ offsetBy: n)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shift_index = digits.index(digits.startIndex, offsetBy: shift)\n\
    \    let shifted = digits[shift_index...] + digits[..<shift_index]\n    return\
    \ String(shifted)", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reversed())\n    }\n\
    \    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ String(shifted.reversed())", "    let digits = String(x)\n    let length = digits.count\n\
    \    let shift = shift % length\n    let prefix = digits.prefix(length - shift)\n\
    \    let suffix = digits.suffix(shift)\n    return String(suffix + prefix)", " \
    \   let str = String(x)\n    let len = str.count\n    if shift > len {\n     \
    \   return String(str.reversed())\n    }\n    let index = str.index(str.startIndex,\
    \ offsetBy: shift)\n    return String(str[index...] + str[..<index])", "    var\
    \ digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift >= length {\n        return String(digits.reversed())\n    }\n \
    \   let index = digits.index(digits.startIndex, offsetBy: shift)\n    let left\
    \ = digits[index...]\n    let right = digits[..<index]\n    return String(left\
    \ + right)", "    let digits = String(x)\n    if shift > digits.count {\n    \
    \    return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    var shift = shift\n    while shift > digits.count\
    \ {\n        shift -= digits.count\n    }\n    if shift == digits.count {\n  \
    \      return String(digits.reversed().map { String($0) }.joined())\n    }\n \
    \   let first = digits[0..<shift].reversed().map { String($0) }.joined()\n   \
    \ let second = digits[shift..<digits.count].reversed().map { String($0) }.joined()\n\
    \    return second + first", "    let digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let shift_index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let shifted = digits[shift_index..<digits.endIndex] +\
    \ digits[digits.startIndex..<shift_index]\n    return String(shifted)", "    let\
    \ x_str = String(x)\n    let x_len = x_str.count\n    if shift > x_len {\n   \
    \     return String(x_str.reversed())\n    }\n    let x_shift = x_str.index(x_str.startIndex,\
    \ offsetBy: shift)\n    let x_shift_str = String(x_str[x_shift..<x_str.endIndex])\n\
    \    let x_shift_str_rev = String(x_shift_str.reversed())\n    let x_shift_str_rev_idx\
    \ = x_shift_str_rev.index(x_shift_str_rev.startIndex, offsetBy: x_len - shift)\n\
    \    let x_shift_str_rev_idx_str = String(x_shift_str_rev[x_shift_str_rev_idx..<x_shift_str_rev.endIndex])\n\
    \    return x_shift_str_rev_idx_str + x_str[x_str.startIndex..<x_shift]", "  \
    \  let digits = String(x)\n    let length = digits.count\n    if shift >= length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    let length\
    \ = digits.count\n    if shift >= length {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    if shift >= digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    let x_str\
    \ = String(x)\n    let x_len = x_str.count\n    if shift > x_len {\n        return\
    \ String(x_str.reversed())\n    }\n    let x_shift = x_str.index(x_str.startIndex,\
    \ offsetBy: shift)\n    let x_shift_str = String(x_str[x_shift...])\n    let x_shift_str_rev\
    \ = String(x_shift_str.reversed())\n    let x_shift_str_rev_len = x_shift_str_rev.count\n\
    \    let x_shift_str_rev_end = x_shift_str_rev.index(x_shift_str_rev.startIndex,\
    \ offsetBy: x_shift_str_rev_len - shift)\n    let x_shift_str_rev_end_str = String(x_shift_str_rev[x_shift_str_rev_end...])\n\
    \    let x_shift_str_rev_end_str_rev = String(x_shift_str_rev_end_str.reversed())\n\
    \    return x_shift_str_rev_end_str_rev + x_shift_str", "    let digits = String(x)\n\
    \    let n = digits.count\n    if shift >= n {\n        return String(digits.reversed())\n\
    \    }\n    let i = n - shift\n    let left = digits[digits.index(digits.startIndex,\
    \ offsetBy: i)..<digits.endIndex]\n    let right = digits[digits.startIndex..<digits.index(digits.startIndex,\
    \ offsetBy: i)]\n    return String(left + right)", "    let digits = String(x)\n\
    \    let length = digits.count\n    if shift >= length {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    var x = x\n    var digits = [Int]()\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let shift\
    \ = shift % digits.count\n    let shifted = digits[shift...] + digits[..<shift]\n\
    \    return String(shifted.map { String($0) }.joined())", "    var x = x\n   \
    \ var shift = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    let digits\
    \ = String(x)\n    let len = digits.count\n    if shift > len {\n        return\
    \ String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    let n =\
    \ digits.count\n    if shift >= n {\n        return String(digits.reversed())\n\
    \    }\n    let i = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[i...] + digits[..<i])", "    let digits = String(x)\n    let count\
    \ = digits.count\n    if shift > count {\n        return String(digits.reversed())\n\
    \    }\n    let start = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let end = digits.index(digits.endIndex, offsetBy: -shift)\n    return String(digits[start..<end])",
  "    var digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    let len = digits.count\n\
    \    if shift > len {\n        return String(digits.reversed())\n    }\n    let\
    \ index = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix = digits[..<index]\n\
    \    let suffix = digits[index...]\n    return String(suffix + prefix)", "   \
    \ let x_str = String(x)\n    let x_len = x_str.count\n    if shift > x_len {\n\
    \        return String(x_str.reversed())\n    }\n    let x_shift = x_str.index(x_str.startIndex,\
    \ offsetBy: shift)\n    let x_shift_str = String(x_str[x_shift..<x_str.endIndex])\n\
    \    let x_shift_str_rev = String(x_shift_str.reversed())\n    let x_shift_str_rev_idx\
    \ = x_shift_str_rev.index(x_shift_str_rev.startIndex, offsetBy: x_len - shift)\n\
    \    let x_shift_str_rev_idx_str = String(x_shift_str_rev[x_shift_str_rev_idx..<x_shift_str_rev.endIndex])\n\
    \    return x_shift_str_rev_idx_str + x_str[x_str.startIndex..<x_shift]", "  \
    \  var x = x\n    var shift = shift\n    var result = \"\"\n    var digits = \"\
    \"\n    while x > 0 {\n        digits.append(String(x % 10))\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        shift = digits.count\n    }\n \
    \   for i in 0..<digits.count {\n        result.append(digits[digits.index(digits.startIndex,\
    \ offsetBy: (i + shift) % digits.count)])\n    }\n    return result", "    let\
    \ digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return digits.substring(from: index) + digits.substring(to: index)", "    let\
    \ str = String(x)\n    if shift > str.count {\n        return String(str.reversed())\n\
    \    }\n    let index = str.index(str.startIndex, offsetBy: shift)\n    return\
    \ String(str[index...] + str[..<index])", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reversed())\n    }\n\
    \    let shift = shift % digits.count\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    var x = x\n\
    \    var shift = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    var result = [Int]()\n    for i in 0..<digits.count\
    \ {\n        result.append(digits[(i + shift) % digits.count])\n    }\n    return\
    \ String(result)", "    var x = x\n    var result = \"\"\n    var shift = shift\n\
    \    while x > 0 {\n        result = String(x % 10) + result\n        x /= 10\n\
    \    }\n    if shift > result.count {\n        shift = result.count\n    }\n \
    \   let start = result.index(result.startIndex, offsetBy: shift)\n    let end\
    \ = result.endIndex\n    return String(result[start..<end]) + String(result[result.startIndex..<start])",
  "    let digits = String(x)\n    let length = digits.count\n    if shift >= length\
    \ {\n        return String(digits.reversed())\n    }\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let right = digits.index(digits.startIndex, offsetBy:\
    \ length)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    let length = digits.count\n    if shift >= length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    var str = String(x)\n\
    \    if shift > str.count {\n        return String(str.reversed())\n    }\n  \
    \  let index = str.index(str.startIndex, offsetBy: shift)\n    str.append(contentsOf:\
    \ str[..<index])\n    str.removeSubrange(..<index)\n    return str", "    let\
    \ digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let count = digits.count\n    if shift >= count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    if shift\
    \ >= digits.count {\n        return String(digits.reversed())\n    }\n    let\
    \ index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let x_str = String(x)\n    let len = x_str.count\n\
    \    if shift > len {\n        return String(x_str.reversed())\n    }\n    let\
    \ index = x_str.index(x_str.startIndex, offsetBy: shift)\n    let prefix = x_str[..<index]\n\
    \    let suffix = x_str[index...]\n    return String(suffix + prefix)", "    let\
    \ digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let n = digits.count\n    let shift = shift % n\n    let left = String(digits.suffix(shift))\n\
    \    let right = String(digits.prefix(n - shift))\n    return left + right", " \
    \   let str = String(x)\n    if shift >= str.count {\n        return String(str.reversed())\n\
    \    }\n    let index = str.index(str.startIndex, offsetBy: shift)\n    return\
    \ String(str[index...] + str[..<index])", "    let str = String(x)\n    let len\
    \ = str.count\n    if shift > len {\n        return String(str.reversed())\n \
    \   }\n    let i = str.index(str.startIndex, offsetBy: shift)\n    return String(str[i...]\
    \ + str[..<i])", "    var digits = String(x)\n    if shift >= digits.count {\n\
    \        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    digits.append(contentsOf: digits[..<index])\n    digits.removeSubrange(..<index)\n\
    \    return digits", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift >= length {\n        return String(digits.reversed())\n    }\n \
    \   let index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let x_str = String(x)\n    let len = x_str.count\n\
    \    if shift > len {\n        return String(x_str.reversed())\n    }\n    let\
    \ index = x_str.index(x_str.startIndex, offsetBy: shift)\n    let left = x_str[..<index]\n\
    \    let right = x_str[index...]\n    return String(right + left)", "    var x\
    \ = x\n    var result = \"\"\n    var digits = 0\n    while x > 0 {\n        x\
    \ /= 10\n        digits += 1\n    }\n    x = x * 10 + shift\n    for _ in 0..<digits\
    \ {\n        result = String(x % 10) + result\n        x /= 10\n    }\n    return\
    \ result", "    var digits = String(x)\n    if shift > digits.count {\n      \
    \  return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix = digits[..<index]\n\
    \    let suffix = digits[index...]\n    return String(suffix + prefix)", "   \
    \ let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let length = digits.count\n    if shift >= length {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let length = digits.count\n    let shift = shift % length\n    let left =\
    \ String(digits.suffix(shift))\n    let right = String(digits.prefix(length -\
    \ shift))\n    return left + right", "    let digits = String(x)\n    let length\
    \ = digits.count\n    if shift >= length {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    var x = x\n    var\
    \ digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n       \
    \ x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shift_digits = digits[digits.count - shift ..< digits.count]\n\
    \    let other_digits = digits[0 ..< digits.count - shift]\n    return String(shift_digits\
    \ + other_digits)", "    var digits = String(x)\n    if shift > digits.count {\n\
    \        digits = String(digits.reversed())\n    } else {\n        digits = String(digits.suffix(shift))\
    \ + String(digits.prefix(digits.count - shift))\n    }\n    return digits", " \
    \   let x_str = String(x)\n    let x_len = x_str.count\n    if shift > x_len {\n\
    \        return String(x_str.reversed())\n    }\n    let shift_str = x_str.suffix(shift)\n\
    \    let shift_str_len = shift_str.count\n    let shift_str_rev = String(shift_str.reversed())\n\
    \    let shift_str_rev_len = shift_str_rev.count\n    let shift_str_rev_idx =\
    \ shift_str_rev.index(shift_str_rev.startIndex, offsetBy: shift_str_rev_len -\
    \ shift_str_len)\n    let shift_str_rev_suffix = shift_str_rev[shift_str_rev_idx...]\n\
    \    let shift_str_rev_suffix_str = String(shift_str_rev_suffix)\n    let x_str_prefix\
    \ = x_str.prefix(x_len - shift)\n    let x_str_prefix_str = String(x_str_prefix)\n\
    \    return shift_str_rev_suffix_str + x_str_prefix_str", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    let s = String(x)\n    let\
    \ n = s.count\n    if shift > n {\n        return String(s.reversed())\n    }\n\
    \    let i = s.index(s.startIndex, offsetBy: shift)\n    return String(s[i...]\
    \ + s[..<i])", "    let digits = String(x)\n    if shift >= digits.count {\n \
    \       return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let n = digits.count\n    if shift >= n {\n        return String(digits.reversed())\n\
    \    }\n    let i = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[i...] + digits[..<i])", "    let digits = String(x)\n    let length\
    \ = digits.count\n    let shift = shift % length\n    let prefix = digits.prefix(length\
    \ - shift)\n    let suffix = digits.suffix(shift)\n    return String(suffix +\
    \ prefix)", "    var digits = String(x)\n    if shift > digits.count {\n     \
    \   return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let suffix = digits[index...]\n    let prefix = digits[..<index]\n\
    \    return String(suffix + prefix)", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix = digits[..<index]\n\
    \    let suffix = digits[index...]\n    return String(suffix + prefix)", "   \
    \ var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    shift %= digits.count\n\
    \    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ String(shifted.reversed())", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    var result = String(x)\n    if shift\
    \ > result.count {\n        result = String(result.reversed())\n    } else {\n\
    \        result = String(result.suffix(shift)) + String(result.prefix(result.count\
    \ - shift))\n    }\n    return result", "    let string = String(x)\n    let length\
    \ = string.count\n    let shift = shift % length\n    let left = string.index(string.startIndex,\
    \ offsetBy: shift)\n    let right = string.index(string.startIndex, offsetBy:\
    \ length - shift)\n    return String(string[left..<right] + string[string.startIndex..<left])",
  "    let s = String(x)\n    let n = s.count\n    if shift >= n {\n        return\
    \ String(s.reversed())\n    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n\
    \    return String(s[i...] + s[..<i])", "    var x = x\n    var shift = shift\n\
    \    var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n\
    \        x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    shift %= digits.count\n    return String(digits[shift..<digits.count]\
    \ + digits[0..<shift])", "    let s = String(x)\n    let n = s.count\n    let\
    \ m = shift % n\n    let a = s.index(s.startIndex, offsetBy: m)\n    let b = s.index(s.startIndex,\
    \ offsetBy: n)\n    return String(s[a..<b] + s[s.startIndex..<a])", "    let s\
    \ = String(x)\n    let n = s.count\n    if shift > n {\n        return String(s.reversed())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return String(s[i...]\
    \ + s[..<i])", "    let str = String(x)\n    if shift > str.count {\n        return\
    \ String(str.reversed())\n    }\n    let index = str.index(str.startIndex, offsetBy:\
    \ shift)\n    return String(str[index...] + str[..<index])", "    let x_str =\
    \ String(x)\n    let x_len = x_str.count\n    if shift >= x_len {\n        return\
    \ String(x_str.reversed())\n    }\n    let shift_str = x_str[x_str.index(x_str.startIndex,\
    \ offsetBy: shift)...]\n    let shift_str_len = shift_str.count\n    let shift_str_rev\
    \ = String(shift_str.reversed())\n    let shift_str_rev_len = shift_str_rev.count\n\
    \    let shift_str_rev_idx = shift_str_rev.index(shift_str_rev.startIndex, offsetBy:\
    \ shift_str_rev_len - shift_str_len)\n    let shift_str_rev_sub = shift_str_rev[shift_str_rev.startIndex..<shift_str_rev_idx]\n\
    \    let shift_str_rev_sub_str = String(shift_str_rev_sub)\n    let shift_str_rev_sub_str_len\
    \ = shift_str_rev_sub_str.count\n    let shift_str_rev_sub_str_idx = shift_str_rev_sub_str.index(shift_str_rev_sub_str.startIndex,\
    \ offsetBy: shift_str_rev_sub_str_len - shift)\n    let shift_str_rev_sub_str_sub\
    \ = shift_str_rev_sub_str[shift_str_rev_sub_str.startIndex..<shift_str_rev_sub_str_idx]\n\
    \    let shift_str_rev_sub_str_sub_str = String(shift_str_rev_sub_str_sub)\n \
    \   let shift_str_rev_sub_str_sub_str_len = shift_str_rev_sub_str_sub_str.count\n\
    \    let shift_str_rev_sub_str_sub_str_idx = shift_str_rev_sub_str_sub_str.index(shift_str_rev_sub_str_sub_str.startIndex,\
    \ offsetBy: shift_str_rev_sub_str_sub_str_len - shift)\n    let", "    let digits\
    \ = String(x)\n    let length = digits.count\n    if shift > length {\n      \
    \  return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix = digits[..<index]\n\
    \    let suffix = digits[index...]\n    return String(suffix + prefix)", "   \
    \ var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let shift = shift % digits.count\n   \
    \ let result = digits[shift..<digits.count] + digits[0..<shift]\n    return String(result.map\
    \ { String($0) }.joined())", "    let digits = String(x)\n    let length = digits.count\n\
    \    let shift = shift % length\n    let start = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let end = digits.index(digits.endIndex, offsetBy: -shift)\n\
    \    let shifted = String(digits[start..<end]) + String(digits[digits.startIndex..<start])\n\
    \    return shifted", "    var x = x\n    var shift = shift\n    var digits =\
    \ [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        shift = digits.count\n    }\n \
    \   let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ shifted.map { String($0) }.joined()", "    let digits = String(x)\n    let n\
    \ = digits.count\n    if shift > n {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: n - shift)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    let digits = String(x)\n    let digit_count\
    \ = digits.count\n    if shift > digit_count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let count = digits.count\n    if shift > count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let suffix = digits[index...]\n    let prefix = digits[..<index]\n    return\
    \ String(suffix + prefix)", "    let str = String(x)\n    let count = str.count\n\
    \    if shift >= count {\n        return String(str.reversed())\n    }\n    let\
    \ index = str.index(str.startIndex, offsetBy: shift)\n    let prefix = str[..<index]\n\
    \    let suffix = str[index...]\n    return String(suffix + prefix)", "    let\
    \ x_str = String(x)\n    let x_len = x_str.count\n    if shift >= x_len {\n  \
    \      return String(x_str.reversed())\n    }\n    let shift_str = x_str[x_str.index(x_str.startIndex,\
    \ offsetBy: shift)..<x_str.endIndex]\n    let shift_str_len = shift_str.count\n\
    \    let shift_str_end = x_str[x_str.startIndex..<x_str.index(x_str.startIndex,\
    \ offsetBy: x_len - shift_str_len)]\n    return shift_str + shift_str_end", " \
    \   var digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ prefix = digits[..<index]\n    let suffix = digits[index...]\n    return String(suffix\
    \ + prefix)", "    let digits = String(x)\n    let len = digits.count\n    if\
    \ shift >= len {\n        return String(digits.reversed())\n    }\n    let left\
    \ = String(digits[digits.index(digits.startIndex, offsetBy: shift)..<digits.endIndex])\n\
    \    let right = String(digits[digits.startIndex..<digits.index(digits.startIndex,\
    \ offsetBy: shift)])\n    return left + right", "    var x = x\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n \
    \   return String(shifted.reversed())", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    let suffix = digits[index...]\n\
    \    let prefix = digits[..<index]\n    return String(suffix + prefix)", "   \
    \ var x = x\n    var result = \"\"\n    var shift = shift\n    while x > 0 {\n\
    \        result = String(x % 10) + result\n        x /= 10\n    }\n    if shift\
    \ > result.count {\n        return String(result.reversed())\n    }\n    let index\
    \ = result.index(result.startIndex, offsetBy: shift)\n    return String(result[index...]\
    \ + result[..<index])", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift >= length {\n        return String(digits.reversed())\n    }\n \
    \   let index = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix\
    \ = digits[..<index]\n    let suffix = digits[index...]\n    return String(suffix\
    \ + prefix)", "    let digits = String(x)\n    let length = digits.count\n   \
    \ if shift > length {\n        return String(digits.reversed())\n    }\n    let\
    \ index = digits.index(digits.startIndex, offsetBy: shift)\n    let left = digits[..<index]\n\
    \    let right = digits[index...]\n    return String(right + left)", "    let\
    \ digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.endIndex, offsetBy: -shift)\n    return String(digits[left..<right])",
  "    var digits = String(x)\n    let n = digits.count\n    if shift >= n {\n   \
    \     return String(digits.reversed())\n    }\n    let left = digits[digits.index(digits.startIndex,\
    \ offsetBy: shift)...]\n    let right = digits[digits.startIndex..<digits.index(digits.startIndex,\
    \ offsetBy: shift)]\n    return String(left + right)", "    let digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    var x = x\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shifted = digits[digits.count - shift ..< digits.count] + digits[0\
    \ ..< digits.count - shift]\n    return String(shifted.reversed())", "    let\
    \ s = String(x)\n    let n = s.count\n    if shift > n {\n        return String(s.reversed())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return String(s[i...]\
    \ + s[..<i])", "    var digits = String(x)\n    if shift > digits.count {\n  \
    \      return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift > length {\n        return String(digits.reversed())\n    }\n  \
    \  let index = digits.index(digits.startIndex, offsetBy: shift)\n    let left\
    \ = digits[..<index]\n    let right = digits[index...]\n    return String(right\
    \ + left)", "    let digits = String(x)\n    let length = digits.count\n    if\
    \ shift >= length {\n        return String(digits.reversed())\n    }\n    let\
    \ index = digits.index(digits.startIndex, offsetBy: shift)\n    let left = digits[..<index]\n\
    \    let right = digits[index...]\n    return String(right + left)", "    let\
    \ digits = String(x)\n    let n = digits.count\n    if shift > n {\n        return\
    \ String(digits.reversed())\n    }\n    let i = n - shift\n    let left = digits[digits.index(digits.startIndex,\
    \ offsetBy: i)...]\n    let right = digits[digits.startIndex..<digits.index(digits.startIndex,\
    \ offsetBy: i)]\n    return String(left + right)", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let right = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ left = digits.index(digits.startIndex, offsetBy: digits.count - shift)\n   \
    \ return String(digits[right..<digits.endIndex] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    let length = digits.count\n    if shift >= length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let left = digits[..<index]\n    let right = digits[index...]\n\
    \    return String(right + left)", "    let x_str = String(x)\n    if shift >=\
    \ x_str.count {\n        return String(x_str.reversed())\n    }\n    let index\
    \ = x_str.index(x_str.startIndex, offsetBy: shift)\n    return String(x_str[index...]\
    \ + x_str[..<index])", "    var x = x\n    var shift = shift\n    var result =\
    \ \"\"\n    while x > 0 {\n        result = String(x % 10) + result\n        x\
    \ /= 10\n    }\n    shift %= result.count\n    if shift == 0 {\n        return\
    \ result\n    }\n    return String(result.suffix(shift)) + String(result.prefix(result.count\
    \ - shift))", "    let digits = String(x)\n    let length = digits.count\n   \
    \ let shift = shift % length\n    let left = String(digits.suffix(shift))\n  \
    \  let right = String(digits.prefix(length - shift))\n    return left + right",
  "    let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    digits.append(contentsOf:\
    \ digits[..<index])\n    digits.removeSubrange(..<index)\n    return digits",
  "    let digits = String(x)\n    let len = digits.count\n    let shift = shift %\
    \ len\n    if shift == 0 {\n        return digits\n    }\n    let left = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let right = digits.index(digits.startIndex, offsetBy:\
    \ len - shift)\n    return String(digits[left..<digits.endIndex] + digits[digits.startIndex..<right])",
  "    let digits = String(x)\n    let len = digits.count\n    if shift >= len {\n\
    \        return String(digits.reversed())\n    }\n    let start = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let end = digits.index(digits.endIndex, offsetBy: -shift)\n\
    \    return String(digits[start..<end] + digits[digits.startIndex..<start] + digits[end..<digits.endIndex])",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let shift_digits = digits[digits.count\
    \ - shift ..< digits.count]\n    let remaining_digits = digits[0 ..< digits.count\
    \ - shift]\n    return String(shift_digits + remaining_digits)", "    var x =\
    \ x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0 {\n    \
    \    digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", '    return String(String(x).reversed().suffix(shift).reversed())',
  "    let digits = String(x)\n    let digits_count = digits.count\n    if shift >=\
    \ digits_count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix = digits[..<index]\n\
    \    let suffix = digits[index...]\n    return String(suffix + prefix)", "   \
    \ let digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let s = String(x)\n\
    \    if shift >= s.count {\n        return String(s.reversed())\n    }\n    let\
    \ index = s.index(s.startIndex, offsetBy: shift)\n    return String(s.suffix(from:\
    \ index) + s.prefix(upTo: index))", "    let digits = String(x)\n    let len =\
    \ digits.count\n    if shift > len {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   var digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix) + String(prefix)", "    var x_str = String(x)\n    var shift_str\
    \ = String(shift)\n    if shift > x_str.count {\n        return String(x_str.reversed())\n\
    \    }\n    let shift_index = x_str.index(x_str.startIndex, offsetBy: shift)\n\
    \    let shift_str = String(x_str[shift_index...])\n    let x_str = String(x_str[..<shift_index])\n\
    \    return shift_str + x_str", "    let digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let length = digits.count\n    let shift = shift\
    \ % length\n    let left = String(digits.suffix(shift))\n    let right = String(digits.prefix(length\
    \ - shift))\n    return left + right", "    let digits = String(x)\n    let n\
    \ = digits.count\n    if shift > n {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: n - shift)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    var x = x\n    var shift = shift\n\
    \    var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n\
    \        x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n \
    \   return String(shifted.reversed())", "    let digits = String(x)\n    let n\
    \ = digits.count\n    if shift >= n {\n        return String(digits.reversed())\n\
    \    }\n    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ right = digits.index(digits.startIndex, offsetBy: n - shift)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reversed())\n    }\n\
    \    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ String(shifted.reversed())", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reversed())\n    }\n\
    \    let shift = shift % digits.count\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted.reversed())", "    let digits\
    \ = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    let shift = shift % digits.count\n    let prefix = digits.prefix(shift)\n\
    \    let suffix = digits.suffix(digits.count - shift)\n    return String(suffix\
    \ + prefix)", "    let digits = String(x)\n    let length = digits.count\n   \
    \ if shift > length {\n        return String(digits.reversed())\n    }\n    let\
    \ index = digits.index(digits.startIndex, offsetBy: shift)\n    let first = digits[..<index]\n\
    \    let second = digits[index...]\n    return String(second + first)", "    let\
    \ digits = String(x)\n    let len = digits.count\n    let shift = shift % len\n\
    \    let left = digits.index(digits.startIndex, offsetBy: shift)\n    let right\
    \ = digits.index(digits.startIndex, offsetBy: len - shift)\n    return String(digits[left..<right]\
    \ + digits[digits.startIndex..<left])", "    let x_str = String(x)\n    let x_str_len\
    \ = x_str.count\n    if shift > x_str_len {\n        return String(x_str.reversed())\n\
    \    }\n    let shift_str = x_str[x_str.index(x_str.startIndex, offsetBy: shift)...]\n\
    \    let shift_str_len = shift_str.count\n    let shift_str_end = x_str[x_str.index(x_str.startIndex,\
    \ offsetBy: shift_str_len)...]\n    return String(shift_str + shift_str_end)",
  "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    for _ in 0..<shift {\n\
    \        let digit = digits.removeLast()\n        digits.insert(digit, at: 0)\n\
    \    }\n    return digits.map { String($0) }.joined()", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    let str = String(x)\n   \
    \ let len = str.count\n    let shift = shift % len\n    let left = str.index(str.startIndex,\
    \ offsetBy: shift)\n    let right = str.index(str.startIndex, offsetBy: len -\
    \ shift)\n    return String(str[left..<str.endIndex] + str[str.startIndex..<right])",
  "    let digits = String(x)\n    let length = digits.count\n    if shift > length\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let right = String(digits[index...])\n    let left = String(digits[..<index])\n\
    \    return right + left", "    let digits = String(x)\n    if shift >= digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let length = digits.count\n    let shift = shift\
    \ % length\n    let first = digits.index(digits.startIndex, offsetBy: shift)\n\
    \    let last = digits.index(digits.startIndex, offsetBy: length)\n    return\
    \ String(digits[first..<last] + digits[digits.startIndex..<first])", "    let\
    \ digits = String(x)\n    let len = digits.count\n    if shift > len {\n     \
    \   return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let digits = String(x)\n    if shift\
    \ >= digits.count {\n        return String(digits.reversed())\n    }\n    let\
    \ index = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    let digits = String(x)\n    let length = digits.count\n\
    \    if shift > length {\n        return String(digits.reversed())\n    }\n  \
    \  let index = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix\
    \ = digits[..<index]\n    let suffix = digits[index...]\n    return String(suffix\
    \ + prefix)", "    let digits = String(x)\n    if shift >= digits.count {\n  \
    \      return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let length = digits.count\n    if shift > length\
    \ {\n        return String(digits.reversed())\n    }\n    let start = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let end = digits.index(digits.endIndex, offsetBy: -shift)\n\
    \    return String(digits[start..<end])", "    let digits = String(x)\n    let\
    \ length = digits.count\n    if shift >= length {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)"]
stop_tokens:
- "\n}"
