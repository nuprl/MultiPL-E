name: HumanEval_139_special_factorial
language: swift
prompt: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
  \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
  \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
  \ Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
  \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
  \ 1) == 1)"
completions: ["    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result", "    var result = 1\n    for i in 1...n {\n \
    \       result *= factorial(n: i)\n    }\n    return result", "    var result\
    \ = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result", " \
    \   var result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n\
    \    }\n    return result", "    var result = 1\n    for i in 1...n {\n      \
    \  result *= factorial(n: i)\n    }\n    return result", "    var result = 1\n\
    \    for i in 1...n {\n        result *= i\n    }\n    return result", "    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result",
  "    var result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n \
    \   }\n    return result", "    var result = 1\n    for i in 1...n {\n       \
    \ result *= factorial(n: i)\n    }\n    return result", "    var result = 1\n\
    \    for i in 1...n {\n        result *= i\n    }\n    return result", "    var\
    \ result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n    }\n\
    \    return result", "    var result = 1\n    for i in 1...n {\n        result\
    \ *= i\n    }\n    return result", "    var result = 1\n    for i in 1...n {\n\
    \        result *= factorial(n: i)\n    }\n    return result", "    var result\
    \ = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result", " \
    \   var result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n\
    \    }\n    return result", "    var result = 1\n    for i in 1...n {\n      \
    \  result *= factorial(n: i)\n    }\n    return result", "    var result = 1\n\
    \    for i in 1...n {\n        result *= i\n    }\n    return result", "    var\
    \ result = 1\n    for i in 1...n {\n        result *= i\n    }\n    return result",
  "    var result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n \
    \   }\n    return result", "    var result = 1\n    for i in 1...n {\n       \
    \ result *= i\n    }\n    return result"]
stop_tokens:
- "\n}"
