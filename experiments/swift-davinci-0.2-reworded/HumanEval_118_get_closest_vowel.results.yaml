language: swift
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var index = 0\n    var prev = \"\"\n    var\
    \ curr = \"\"\n    var next = \"\"\n    for char in word.characters {\n      \
    \  if index == 0 {\n            prev = \" \"\n        } else {\n            prev\
    \ = String(word[word.index(word.startIndex, offsetBy: index - 1)])\n        }\n\
    \        curr = String(char)\n        if index == word.characters.count - 1 {\n\
    \            next = \" \"\n        } else {\n            next = String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])\n        }\n        if vowels.contains(curr) && consonants.contains(prev)\
    \ && consonants.contains(next) {\n            closestVowel = curr\n        }\n\
    \        index += 1\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpbtreo41_.swift:24:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpbtreo41_.swift:31:26:\
    \ error: 'characters' is unavailable: Please use String directly\n        if index\
    \ == word.characters.count - 1 {\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    if index < closestIndex {\n \
    \                       closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6fwcl5de/tmp6fwcl5de.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b534d409c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b534d100b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b534d100988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b534d0ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6fwcl5de                        0x000055aa100678f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b534d5f5460 __libc_start_main +
    245

    6    tmp6fwcl5de                        0x000055aa10067539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var result =\
    \ \"\"\n    var index = word.count - 1\n    var prev = \"\"\n    var next = \"\
    \"\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            if prev\
    \ != \"\" && next != \"\" {\n                result = char\n                break\n\
    \            }\n        } else if consonants.contains(char) {\n            if\
    \ prev == \"\" {\n                prev = char\n            } else {\n        \
    \        next = char\n            }\n        }\n        index -= 1\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp7z38j88m/tmp7z38j88m.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d8803ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d87d35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d87d35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d87d347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7z38j88m                        0x0000564b5d7ae8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b2d8822a460 __libc_start_main +
    245

    6    tmp7z38j88m                        0x0000564b5d7ae2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel: String = \"\"\n    var index: Int = 0\n    for i in stride(from:\
    \ word.count - 1, to: 0, by: -1) {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: i)]\n        if vowels.contains(char) {\n            vowel = String(char)\n\
    \            index = i\n            break\n        }\n    }\n    if vowel == \"\
    \" {\n        return \"\"\n    }\n    for i in stride(from: index - 1, to: 0,\
    \ by: -1) {\n        let char = word[word.index(word.startIndex, offsetBy: i)]\n\
    \        if consonants.contains(char) {\n            return vowel\n        }\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6mtqmvkb/tmp6mtqmvkb.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af950319c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af950010b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af950010988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af95000f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6mtqmvkb                        0x0000559fcf7898c7 <unavailable> + 6343

    5    libc.so.6                          0x00002af950505460 __libc_start_main +
    245

    6    tmp6mtqmvkb                        0x0000559fcf789419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel:\
    \ String = \"\"\n    var lastConsonantIndex: Int = -1\n    for (index, char) in\
    \ word.lowercased().reversed().enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            if lastConsonantIndex != -1 {\n                closestVowel =\
    \ String(char)\n                break\n            }\n        } else if consonants.contains(String(char))\
    \ {\n            lastConsonantIndex = index\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_r4e25us/tmp_r4e25us.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b413ffecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b413fce3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b413fce3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b413fce27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_r4e25us                        0x00005612b7480af3 <unavailable> + 6899

    5    libc.so.6                          0x00002b41401d8460 __libc_start_main +
    245

    6    tmp_r4e25us                        0x00005612b7480529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestVowelIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                let previousChar = word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]\n                let nextChar = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n                if !vowels.contains(String(previousChar))\
    \ && !vowels.contains(String(nextChar)) {\n                    if index < closestVowelIndex\
    \ {\n                        closestVowel = String(char)\n                   \
    \     closestVowelIndex = index\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp2h7wr1t_/tmp2h7wr1t_.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcaebdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcae8d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcae8d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcae8d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2h7wr1t_                        0x000055e2c9c158f7 <unavailable> + 6391

    5    libc.so.6                          0x00002afcaedcb460 __libc_start_main +
    245

    6    tmp2h7wr1t_                        0x000055e2c9c15539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            vowelIndex = index\n        }\n        if consonants.contains(char)\
    \ {\n            consonantIndex = index\n        }\n        if vowelIndex > consonantIndex\
    \ {\n            closestVowel = String(char)\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpi39r1pu9/tmpi39r1pu9.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae381c0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae381906b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae381906988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3819057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi39r1pu9                        0x00005614ab70a883 <unavailable> + 6275

    5    libc.so.6                          0x00002ae381dfb460 __libc_start_main +
    245

    6    tmpi39r1pu9                        0x00005614ab70a2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = -1\n    var lastConsonantIndex = -1\n  \
    \  var currentIndex = 0\n    for char in word {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            if lastConsonantIndex != -1 && currentIndex - lastConsonantIndex\
    \ < closestVowelIndex - lastConsonantIndex || closestVowelIndex == -1 {\n    \
    \            closestVowel = String(char)\n                closestVowelIndex =\
    \ currentIndex\n            }\n        } else if consonants.contains(String(char).lowercased())\
    \ {\n            lastConsonantIndex = currentIndex\n        }\n        currentIndex\
    \ += 1\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnwynolvh/tmpnwynolvh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b792d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b78fc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b78fc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b78fc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnwynolvh                        0x0000558602816647 <unavailable> + 5703

    5    libc.so.6                          0x00002b8b794bc460 __libc_start_main +
    245

    6    tmpnwynolvh                        0x0000558602816289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var result =\
    \ \"\"\n    var index = 0\n    var vowelIndex = 0\n    var consonantIndex = 0\n\
    \    var vowelCount = 0\n    var consonantCount = 0\n    for char in word.characters\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            vowelCount\
    \ += 1\n            vowelIndex = index\n        } else if consonants.contains(String(char).lowercased())\
    \ {\n            consonantCount += 1\n            consonantIndex = index\n   \
    \     }\n        index += 1\n    }\n    if vowelCount == 0 || consonantCount ==\
    \ 0 {\n        return \"\"\n    }\n    if vowelIndex > consonantIndex {\n    \
    \    return \"\"\n    }\n    return String(word[word.index(word.startIndex, offsetBy:\
    \ vowelIndex)])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpenz_0emf.swift:25:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpenz_0emf.swift:19:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = \"\"\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = -1\n    var consonantIndex\
    \ = -1\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            vowelIndex = index\n        }\n        if consonants.contains(char)\
    \ {\n            consonantIndex = index\n        }\n        if vowelIndex != -1\
    \ && consonantIndex != -1 && consonantIndex > vowelIndex {\n            closestVowel\
    \ = String(char)\n            break\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpsdxibq4q/tmpsdxibq4q.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65e4317c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65e400eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65e400e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65e400d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdxibq4q                        0x000055fae1256677 <unavailable> + 5751

    5    libc.so.6                          0x00002b65e4503460 __libc_start_main +
    245

    6    tmpsdxibq4q                        0x000055fae12562b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var distance = word.count\n    for (index, char) in word.enumerated() {\n\
    \        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    if index < distance {\n     \
    \                   distance = index\n                        closestVowel = String(char)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpgo0r80uz/tmpgo0r80uz.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba18035dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba180054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba180054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1800537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgo0r80uz                        0x00005580b37fb8f7 <unavailable> + 6391

    5    libc.so.6                          0x00002ba180549460 __libc_start_main +
    245

    6    tmpgo0r80uz                        0x00005580b37fb539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ closestVowel = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var wordArray = Array(word)\n    var vowelIndex = 0\n   \
    \ var consonantIndex = 0\n    var vowelDistance = 0\n    var consonantDistance\
    \ = 0\n    var closestDistance = 0\n    for i in 0..<wordArray.count {\n     \
    \   if vowels.contains(String(wordArray[i]).lowercased()) {\n            vowelIndex\
    \ = i\n            for j in (0..<wordArray.count).reversed() {\n             \
    \   if consonants.contains(String(wordArray[j]).lowercased()) {\n            \
    \        consonantIndex = j\n                    vowelDistance = vowelIndex -\
    \ consonantIndex\n                    if vowelDistance > 0 {\n               \
    \         if closestDistance == 0 {\n                            closestDistance\
    \ = vowelDistance\n                            closestVowel = String(wordArray[vowelIndex])\n\
    \                        } else if vowelDistance < closestDistance {\n       \
    \                     closestDistance = vowelDistance\n                      \
    \      closestVowel = String(wordArray[vowelIndex])\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpn0i1278w/tmpn0i1278w.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49e7e05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49e7afcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49e7afc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49e7afb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0i1278w                        0x000055b0d19f1b67 <unavailable> + 7015

    5    libc.so.6                          0x00002b49e7ff1460 __libc_start_main +
    245

    6    tmpn0i1278w                        0x000055b0d19f17a9 <unavailable> + 6057

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closest_vowel\
    \ = \"\"\n    var closest_vowel_index = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            if index\
    \ > 0 && index < word.count - 1 {\n                if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]).lowercased()) && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]).lowercased()) {\n                    if index < closest_vowel_index\
    \ {\n                        closest_vowel = String(char)\n                  \
    \      closest_vowel_index = index\n                    }\n                }\n\
    \            }\n        }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpvee4882s/tmpvee4882s.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f6b8e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f6b5deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f6b5de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f6b5dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvee4882s                        0x000055c204e4d947 <unavailable> + 6471

    5    libc.so.6                          0x00002b1f6bad3460 __libc_start_main +
    245

    6    tmpvee4882s                        0x000055c204e4d589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var index = word.count - 1\n    var foundVowel\
    \ = false\n    var foundConsonant = false\n    while index >= 0 {\n        let\
    \ char = String(word[word.index(word.startIndex, offsetBy: index)])\n        if\
    \ vowels.contains(char) {\n            if foundConsonant {\n                closestVowel\
    \ = char\n                foundVowel = true\n                break\n         \
    \   }\n        } else if consonants.contains(char) {\n            foundConsonant\
    \ = true\n        }\n        index -= 1\n    }\n    if !foundVowel {\n       \
    \ closestVowel = \"\"\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpx7t69v9x/tmpx7t69v9x.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e9b2ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e9afd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e9afd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e9afd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7t69v9x                        0x00005635f8d987a3 <unavailable> + 6051

    5    libc.so.6                          0x00002b4e9b4c9460 __libc_start_main +
    245

    6    tmpx7t69v9x                        0x00005635f8d981d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ vowel = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n    var arr = Array(word)\n    var i = arr.count - 1\n    while i >=\
    \ 0 {\n        if vowels.contains(String(arr[i]).lowercased()) {\n           \
    \ vowel = String(arr[i])\n            break\n        }\n        i -= 1\n    }\n\
    \    if vowel == \"\" {\n        return \"\"\n    }\n    var j = i - 1\n    while\
    \ j >= 0 {\n        if consonants.contains(String(arr[j]).lowercased()) {\n  \
    \          return vowel\n        }\n        j -= 1\n    }\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_jyuafmx/tmp_jyuafmx.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4214d98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4214a8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4214a8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4214a8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jyuafmx                        0x00005632d21f0b5b <unavailable> + 7003

    5    libc.so.6                          0x00002b4214f84460 __libc_start_main +
    245

    6    tmp_jyuafmx                        0x00005632d21f0359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    var prev = \"\"\n\
    \    var next = \"\"\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            if prev\
    \ != \"\" && next != \"\" {\n                result = char\n                break\n\
    \            }\n        } else if consonants.contains(char) {\n            if\
    \ prev == \"\" {\n                prev = char\n            } else {\n        \
    \        next = char\n            }\n        }\n        index -= 1\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpjecmd_k3/tmpjecmd_k3.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada42d1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada42a12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada42a12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada42a117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjecmd_k3                        0x000055e52e26d7a3 <unavailable> + 6051

    5    libc.so.6                          0x00002ada42f07460 __libc_start_main +
    245

    6    tmpjecmd_k3                        0x000055e52e26d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    for i in (0..<word.count).reversed() {\n        let\
    \ index = word.index(word.startIndex, offsetBy: i)\n        if vowels.contains(word[index])\
    \ {\n            vowel = String(word[index])\n            if i > 0 && consonants.contains(word[word.index(before:\
    \ index)]) {\n                return vowel\n            }\n        }\n    }\n\
    \    return vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp8j5guw7e/tmp8j5guw7e.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627a6cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627a3c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627a3c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627a3c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8j5guw7e                        0x00005577ee49cb93 <unavailable> + 7059

    5    libc.so.6                          0x00002b627a8bb460 __libc_start_main +
    245

    6    tmp8j5guw7e                        0x00005577ee49c5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var consonant = \"\"\n    var result = \"\"\n    for\
    \ char in word.characters {\n        if vowels.containsString(String(char)) {\n\
    \            vowel = String(char)\n        }\n        if consonants.containsString(String(char))\
    \ {\n            consonant = String(char)\n        }\n        if vowel != \"\"\
    \ && consonant != \"\" {\n            result = vowel\n            vowel = \"\"\
    \n            consonant = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpoqsm4zn7.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpoqsm4zn7.swift:23:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpoqsm4zn7.swift:26:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closestVowel = \"\"\n    var closestDistance\
    \ = word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            var distance = word.count - index\n            if distance <\
    \ closestDistance {\n                closestDistance = distance\n            \
    \    closestVowel = String(char)\n            }\n        }\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpq38qnhip/tmpq38qnhip.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9debcd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9deb9cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9deb9cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9deb9cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq38qnhip                        0x000055768ef338d3 <unavailable> + 6355

    5    libc.so.6                          0x00002b9debec2460 __libc_start_main +
    245

    6    tmpq38qnhip                        0x000055768ef33309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var vowel_index = 0\n    var consonant_index = 0\n\
    \    var vowel_count = 0\n    var consonant_count = 0\n    var i = word.count\
    \ - 1\n    while i >= 0 {\n        let index = word.index(word.startIndex, offsetBy:\
    \ i)\n        let char = word[index]\n        if vowels.contains(char) {\n   \
    \         vowel_count += 1\n            vowel_index = i\n        } else if consonants.contains(char)\
    \ {\n            consonant_count += 1\n            consonant_index = i\n     \
    \   }\n        if vowel_count == 1 && consonant_count == 2 {\n            result\
    \ = String(word[word.index(word.startIndex, offsetBy: vowel_index)])\n       \
    \     break\n        }\n        i -= 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpaom6pzz_/tmpaom6pzz_.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b802585fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8025556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8025556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80255557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaom6pzz_                        0x00005640673527e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b8025a4b460 __libc_start_main +
    245

    6    tmpaom6pzz_                        0x0000564067352219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closest_vowel = \"\"\n    var closest_index\
    \ = word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && index < word.count - 1 {\n                if\
    \ word[word.index(before: word.index(after: index))] != char && word[word.index(after:\
    \ word.index(before: index))] != char {\n                    if index < closest_index\
    \ {\n                        closest_index = index\n                        closest_vowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpz7kjhcsf.swift:23:62: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String.Index'\n                if word[word.index(before:\
    \ word.index(after: index))] != char && word[word.index(after: word.index(before:\
    \ index))] != char {\n                                                       \
    \      ^\n/tmp/tmpz7kjhcsf.swift:23:124: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String.Index'\n                if word[word.index(before:\
    \ word.index(after: index))] != char && word[word.index(after: word.index(before:\
    \ index))] != char {\n                                                       \
    \                                                                    ^\n"
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) == false && vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) == false {\n                    if index < closestIndex\
    \ {\n                        closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_0jlzn6g/tmp_0jlzn6g.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07eb0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07eadc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07eadc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07eadc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0jlzn6g                        0x000055aa64e238f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b07eb2be460 __libc_start_main +
    245

    6    tmp_0jlzn6g                        0x000055aa64e23539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            var\
    \ distance = 0\n            for (i, c) in word.enumerated() {\n              \
    \  if consonants.contains(String(c).lowercased()) {\n                    distance\
    \ = abs(index - i)\n                    break\n                }\n           \
    \ }\n            if distance < closestDistance {\n                closestDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpmvuz1fyr/tmpmvuz1fyr.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addfdff0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addfdce7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addfdce7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addfdce67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvuz1fyr                        0x0000562469598917 <unavailable> + 6423

    5    libc.so.6                          0x00002addfe1dc460 __libc_start_main +
    245

    6    tmpmvuz1fyr                        0x0000562469598559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"AEIOUaeiou\"\n    let consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    for i in\
    \ 0..<word.count {\n        let index = word.index(word.startIndex, offsetBy:\
    \ i)\n        let char = word[index]\n        if vowels.contains(char) {\n   \
    \         vowelFound = true\n            vowelIndex = i\n        }\n        if\
    \ consonants.contains(char) {\n            consonantFound = true\n           \
    \ consonantIndex = i\n        }\n        if vowelFound && consonantFound {\n \
    \           if vowelIndex > consonantIndex {\n                closestVowel = String(char)\n\
    \            }\n            vowelFound = false\n            consonantFound = false\n\
    \        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpie7rvpi6/tmpie7rvpi6.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b550b133c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b550ae2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b550ae2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b550ae297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpie7rvpi6                        0x000055b49a4d200d <unavailable> + 8205

    5    libc.so.6                          0x00002b550b31f460 __libc_start_main +
    245

    6    tmpie7rvpi6                        0x000055b49a4d1399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n    for\
    \ (index, char) in word.enumerated() {\n        if vowels.contains(char) {\n \
    \           if index > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) &&\n                index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                if index < closestVowelIndex {\n \
    \                   closestVowel = String(char)\n                    closestVowelIndex\
    \ = index\n                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpfzd1ky5j/tmpfzd1ky5j.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8b651bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8b6212b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8b6212988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8b62117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfzd1ky5j                        0x00005654b04be7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ae8b6707460 __libc_start_main +
    245

    6    tmpfzd1ky5j                        0x00005654b04be429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestDistance = word.count\n    for i in 0..<word.count {\n       \
    \ let index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            var distance = 0\n          \
    \  for j in i..<word.count {\n                let index = word.index(word.startIndex,\
    \ offsetBy: j)\n                let char = String(word[index])\n             \
    \   if !vowels.contains(char) {\n                    distance += 1\n         \
    \       } else {\n                    break\n                }\n            }\n\
    \            if distance < closestDistance {\n                closestDistance\
    \ = distance\n                closestVowel = char\n            }\n        }\n\
    \    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpt9gygl5t/tmpt9gygl5t.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2ce105c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2cddfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2cddfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2cddfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9gygl5t                        0x000055abbbb96827 <unavailable> + 6183

    5    libc.so.6                          0x00002af2ce2f1460 __libc_start_main +
    245

    6    tmpt9gygl5t                        0x000055abbbb96469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var result =\
    \ \"\"\n    for i in stride(from: word.count - 1, through: 0, by: -1) {\n    \
    \    let index = word.index(word.startIndex, offsetBy: i)\n        let character\
    \ = String(word[index])\n        if vowels.contains(character) {\n           \
    \ result = character\n            break\n        }\n    }\n    if result == \"\
    \" {\n        return result\n    }\n    for i in stride(from: word.count - 1,\
    \ through: 0, by: -1) {\n        let index = word.index(word.startIndex, offsetBy:\
    \ i)\n        let character = String(word[index])\n        if consonants.contains(character)\
    \ {\n            return result\n        }\n    }\n    return \"\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpi8i2aiih/tmpi8i2aiih.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b004b0e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b004add9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b004add9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b004add87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi8i2aiih                        0x000055661971aad3 <unavailable> + 6867

    5    libc.so.6                          0x00002b004b2ce460 __libc_start_main +
    245

    6    tmpi8i2aiih                        0x000055661971a509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    var index\
    \ = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if !vowelFound {\n            if vowels.contains(char)\
    \ {\n                vowelFound = true\n                vowelIndex = index\n \
    \           }\n        }\n        if !consonantFound {\n            if consonants.contains(char)\
    \ {\n                consonantFound = true\n                consonantIndex = index\n\
    \            }\n        }\n        if vowelFound && consonantFound {\n       \
    \     break\n        }\n        index -= 1\n    }\n    if vowelFound && consonantFound\
    \ && vowelIndex > consonantIndex {\n        closestVowel = String(word[word.index(word.startIndex,\
    \ offsetBy: vowelIndex)])\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpic12h__x/tmpic12h__x.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae28bb5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae28b852b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae28b852988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae28b8517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpic12h__x                        0x00005565fdba55d7 <unavailable> + 5591

    5    libc.so.6                          0x00002ae28bd47460 __libc_start_main +
    245

    6    tmpic12h__x                        0x00005565fdba5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            var\
    \ distance = word.count - index\n            if distance < closestDistance {\n\
    \                closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnp2suwix/tmpnp2suwix.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4014035c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4013d2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4013d2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4013d2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnp2suwix                        0x000055b57a1daa33 <unavailable> + 6707

    5    libc.so.6                          0x00002b4014221460 __libc_start_main +
    245

    6    tmpnp2suwix                        0x000055b57a1da469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closest_vowel = \"\"\n    var closest_vowel_index\
    \ = 0\n    var closest_vowel_distance = 0\n    var index = 0\n    for char in\
    \ word.characters {\n        if vowels.containsString(String(char)) {\n      \
    \      if index > closest_vowel_index {\n                closest_vowel = String(char)\n\
    \                closest_vowel_index = index\n                closest_vowel_distance\
    \ = index - closest_vowel_index\n            }\n        }\n        index += 1\n\
    \    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_qcee3co.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp_qcee3co.swift:23:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013324
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var result =\
    \ \"\"\n    var is_vowel = false\n    var is_consonant = false\n    var is_first_vowel\
    \ = false\n    var is_first_consonant = false\n    var is_second_vowel = false\n\
    \    var is_second_consonant = false\n    var is_third_vowel = false\n    var\
    \ is_third_consonant = false\n    var is_fourth_vowel = false\n    var is_fourth_consonant\
    \ = false\n    var is_fifth_vowel = false\n    var is_fifth_consonant = false\n\
    \    var is_sixth_vowel = false\n    var is_sixth_consonant = false\n    var is_seventh_vowel\
    \ = false\n    var is_seventh_consonant = false\n    var is_eighth_vowel = false\n\
    \    var is_eighth_consonant = false\n    var is_ninth_vowel = false\n    var\
    \ is_ninth_consonant = false\n    var is_tenth_vowel = false\n    var is_tenth_consonant\
    \ = false\n    var is_eleventh_vowel = false\n    var is_eleventh_consonant =\
    \ false\n    var is_twelfth_vowel = false\n    var is_twelfth_consonant = false\n\
    \    var is_thirteenth_vowel = false\n    var is_thirteenth_consonant = false\n\
    \    var is_fourteenth_vowel = false\n    var is_fourteenth_consonant = false\n\
    \    var is_fifteenth_vowel = false\n    var is_fifteenth_consonant = false\n\
    \    var is_sixteenth_vowel = false\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_m3k9fto.swift:17:9: warning: initialization of immutable value\
    \ 'vowels' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    ~~~~^~~~~~\n \
    \   _\n/tmp/tmp_m3k9fto.swift:18:9: warning: initialization of immutable value\
    \ 'consonants' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"]\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp_m3k9fto.swift:19:9: warning:\
    \ initialization of variable 'result' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var result = \"\"\n    ~~~~^~~~~~\n  \
    \  _\n/tmp/tmp_m3k9fto.swift:20:9: warning: initialization of variable 'is_vowel'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var is_vowel = false\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp_m3k9fto.swift:21:9:\
    \ warning: initialization of variable 'is_consonant' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var is_consonant = false\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp_m3k9fto.swift:22:9: warning: initialization\
    \ of variable 'is_first_vowel' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var is_first_vowel = false\n    ~~~~^~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp_m3k9fto.swift:23:9: warning: initialization of variable 'is_first_consonant'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var is_first_consonant = false\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp_m3k9fto.swift:24:9:\
    \ warning: initialization of variable 'is_second_vowel' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var is_second_vowel = false\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp_m3k9fto.swift:25:9: warning: initialization\
    \ of variable 'is_second_consonant' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var is_second_consonant = false\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp_m3k9fto.swift:26:9: warning"
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var vowel_index\
    \ = -1\n    var consonant_index = -1\n    for i in 0..<word.count {\n        let\
    \ index = word.index(word.startIndex, offsetBy: i)\n        let letter = String(word[index])\n\
    \        if vowels.contains(letter) {\n            vowel_index = i\n        }\n\
    \        if consonants.contains(letter) {\n            consonant_index = i\n \
    \       }\n        if vowel_index != -1 && consonant_index != -1 && vowel_index\
    \ < consonant_index {\n            return String(word[index])\n        }\n   \
    \ }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpr73afbxy/tmpr73afbxy.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c5a9acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c5a6a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c5a6a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c5a6a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr73afbxy                        0x000055a920a70827 <unavailable> + 6183

    5    libc.so.6                          0x00002b5c5ab98460 __libc_start_main +
    245

    6    tmpr73afbxy                        0x000055a920a70469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   var closestConsonant = \"\"\n    var vowelFound = false\n    var consonantFound\
    \ = false\n    for (index, letter) in word.lowercased().reversed().enumerated()\
    \ {\n        if vowels.contains(String(letter)) {\n            closestVowel =\
    \ String(letter)\n            closestVowelIndex = index\n            vowelFound\
    \ = true\n        }\n        if consonants.contains(String(letter)) && vowelFound\
    \ {\n            closestConsonant = String(letter)\n            closestConsonantIndex\
    \ = index\n            consonantFound = true\n        }\n        if vowelFound\
    \ && consonantFound {\n            break\n        }\n    }\n    if vowelFound\
    \ && consonantFound && closestVowelIndex < closestConsonantIndex {\n        return\
    \ closestVowel\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpziwmhr7y/tmpziwmhr7y.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b375d23cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b375cf33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b375cf33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b375cf327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpziwmhr7y                        0x000056190ac8ad2b <unavailable> + 7467

    5    libc.so.6                          0x00002b375d428460 __libc_start_main +
    245

    6    tmpziwmhr7y                        0x000056190ac8a529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelDistance = 0\n    var consonantDistance = 0\n    var distance\
    \ = 0\n    for char in word.characters {\n        if vowels.containsString(String(char))\
    \ {\n            vowelIndex = word.characters.indexOf(char)!\n            vowelDistance\
    \ = word.characters.count - vowelIndex\n            for char in word.characters\
    \ {\n                if consonants.containsString(String(char)) {\n          \
    \          consonantIndex = word.characters.indexOf(char)!\n                 \
    \   consonantDistance = word.characters.count - consonantIndex\n             \
    \       distance = vowelDistance - consonantDistance\n                    if distance\
    \ > 0 {\n                        closestVowel = String(char)\n               \
    \     }\n                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpbzumoc81.swift:25:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpbzumoc81.swift:26:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpbzumoc81.swift:27:42: error: value\
    \ of type 'String' has no member 'indexOf'\n            vowelIndex = word.characters.indexOf(char)!\n\
    \                         ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpbzumoc81.swift:28:34:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ vowelDistance = word.characters.count - vowelIndex\n                       \
    \          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpbzumoc81.swift:29:30: error: 'characters' is unavailable: Please use String\
    \ directly\n            for char in word.characters {\n                      \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpbzumoc81.swift:30:31:\
    \ error: value of type 'String' has no member 'containsString'\n             \
    \   if consonants.containsString(String(char)) {\n                   ~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~\n/tmp/tmpbzumoc81.swift:31:54: error: value of type 'String'\
    \ has no member 'indexOf'\n                    consonantIndex = word.characters.indexOf(char)!\n\
    \                                     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpbzumoc81.swift:32:46:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \         consonantDistance = word.characters.count - consonantIndex\n       \
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var index = 0\n    for char in word.reversed()\
    \ {\n        if consonants.contains(char) {\n            index += 1\n        }\
    \ else if vowels.contains(char) {\n            if index > 0 {\n              \
    \  closestVowel = String(char)\n                break\n            }\n       \
    \ }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpggdx8oes/tmpggdx8oes.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d911efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d90ee6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d90ee6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d90ee57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggdx8oes                        0x000055ffee6718b3 <unavailable> + 6323

    5    libc.so.6                          0x00002b2d913db460 __libc_start_main +
    245

    6    tmpggdx8oes                        0x000055ffee6712e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices.reversed()\
    \ {\n        if vowels.contains(word[i]) {\n            vowel = String(word[i])\n\
    \            index = word.distance(from: word.startIndex, to: i)\n        } else\
    \ if consonants.contains(word[i]) {\n            if index > 0 {\n            \
    \    return vowel\n            }\n        }\n    }\n    return \"\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp634a695s/tmp634a695s.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad41468dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad414384b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad414384988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4143837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp634a695s                        0x000055eecde2fceb <unavailable> + 7403

    5    libc.so.6                          0x00002ad414879460 __libc_start_main +
    245

    6    tmp634a695s                        0x000055eecde2f4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if consonants.contains(char) {\n            break\n        }\n       \
    \ index -= 1\n    }\n    if index == 0 {\n        return \"\"\n    }\n    for\
    \ i in index - 1...0 {\n        let char = word[word.index(word.startIndex, offsetBy:\
    \ i)]\n        if vowels.contains(char) {\n            result = String(char)\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002afa0ba37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa0b72e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afa0b72e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afa0b72e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afa0b72dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpd87uo_1k                        0x000055a6e323f838 <unavailable> + 10296

    6    tmpd87uo_1k                        0x000055a6e323e696 <unavailable> + 5782

    7    libc.so.6                          0x00002afa0bc23460 __libc_start_main +
    245

    8    tmpd87uo_1k                        0x000055a6e323e399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = 0\n    var prev = \"\"\n    var next = \"\"\n    for letter in word.reversed()\
    \ {\n        if vowels.contains(String(letter)) {\n            if index == 0 {\n\
    \                result = String(letter)\n            } else if index == 1 {\n\
    \                if prev != \"\" {\n                    result = String(letter)\n\
    \                }\n            } else {\n                if prev != \"\" && next\
    \ != \"\" {\n                    result = String(letter)\n                }\n\
    \            }\n        } else {\n            prev = String(letter)\n        }\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmppdkoq065/tmppdkoq065.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3325ae6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33257ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33257dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33257dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdkoq065                        0x000055be6f60e777 <unavailable> + 6007

    5    libc.so.6                          0x00002b3325cd2460 __libc_start_main +
    245

    6    tmppdkoq065                        0x000055be6f60e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestIndex = -1\n    for (index, char)\
    \ in word.enumerated() {\n        if consonants.contains(char) {\n           \
    \ for (i, vowel) in vowels.enumerated() {\n                if word.contains(vowel)\
    \ {\n                    if index < word.firstIndex(of: vowel)!.encodedOffset\
    \ && word.firstIndex(of: vowel)!.encodedOffset < closestIndex {\n            \
    \            closestVowel = String(vowel)\n                        closestIndex\
    \ = word.firstIndex(of: vowel)!.encodedOffset\n                    }\n       \
    \         }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpqtzkjylw/tmpqtzkjylw.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc79c9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc79992b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc79992988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc799917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqtzkjylw                        0x000056150b6a0827 <unavailable> + 6183

    5    libc.so.6                          0x00002abc79e87460 __libc_start_main +
    245

    6    tmpqtzkjylw                        0x000056150b6a0469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ result = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let consonants: [Character] = [\"b\", \"c\", \"d\", \"f\", \"g\", \"\
    h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var is_consonant = false\n    for char in\
    \ word.reversed() {\n        if is_consonant {\n            if vowels.contains(char)\
    \ {\n                result = String(char)\n                break\n          \
    \  }\n        } else {\n            if consonants.contains(char) {\n         \
    \       is_consonant = true\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpcfsxgtr5/tmpcfsxgtr5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7d49dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7d46d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7d46d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7d46d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfsxgtr5                        0x000055b455b30a43 <unavailable> + 6723

    5    libc.so.6                          0x00002ab7d4bc6460 __libc_start_main +
    245

    6    tmpcfsxgtr5                        0x000055b455b30479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var distance = word.count\n    for (index, char) in word.enumerated() {\n\
    \        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    if index < distance {\n     \
    \                   distance = index\n                        closestVowel = String(char)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpgo0r80uz/tmpgo0r80uz.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba18035dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba180054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba180054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1800537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgo0r80uz                        0x00005580b37fb8f7 <unavailable> + 6391

    5    libc.so.6                          0x00002ba180549460 __libc_start_main +
    245

    6    tmpgo0r80uz                        0x00005580b37fb539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let word = word.lowercased()\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = word[word.index(word.startIndex, offsetBy: index)]\n     \
    \   if vowels.contains(String(char)) {\n            result = String(char)\n  \
    \          break\n        }\n        index -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpcaiqebuz/tmpcaiqebuz.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b251ef44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b251ec3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b251ec3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b251ec3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcaiqebuz                        0x00005588858f7903 <unavailable> + 6403

    5    libc.so.6                          0x00002b251f130460 __libc_start_main +
    245

    6    tmpcaiqebuz                        0x00005588858f7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closestVowel = \"\"\n    var closestDistance\
    \ = word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            var distance = 0\n            for i in index..<word.count {\n\
    \                if vowels.contains(word[i]) {\n                    break\n  \
    \              }\n                distance += 1\n            }\n            if\
    \ distance < closestDistance {\n                closestDistance = distance\n \
    \               closestVowel = String(char)\n            }\n        }\n    }\n\
    \    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpf1kpzyey.swift:24:36: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ vowels.contains(word[i]) {\n                                   ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013324
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closest_vowel = \"\"\n    var vowel_index = 0\n    var consonant_index\
    \ = 0\n    var closest_vowel_index = 0\n    var closest_consonant_index = 0\n\
    \    for i in stride(from: word.count - 1, through: 0, by: -1) {\n        let\
    \ char = word[word.index(word.startIndex, offsetBy: i)]\n        if vowels.contains(char)\
    \ {\n            vowel_index = i\n            break\n        }\n    }\n    for\
    \ i in stride(from: vowel_index - 1, through: 0, by: -1) {\n        let char =\
    \ word[word.index(word.startIndex, offsetBy: i)]\n        if consonants.contains(char)\
    \ {\n            consonant_index = i\n            break\n        }\n    }\n  \
    \  if vowel_index > consonant_index {\n        closest_vowel = String(word[word.index(word.startIndex,\
    \ offsetBy: vowel_index)])\n        closest_vowel_index = vowel_index\n      \
    \  closest_consonant_index = consonant_index\n    }\n    for i in stride(from:\
    \ vowel_index - 1, through: 0, by: -1) {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: i)]\n        if vowels.contains(char) {\n            vowel_index =\
    \ i\n            break\n        }\n    }\n    for i in stride(from: vowel_index\
    \ - 1, through: 0, by: -1) {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: i)]\n        if consonants.contains(char) {\n            consonant_index\
    \ = i\n            break\n        }\n    }\n    if vowel_index > consonant_index\
    \ && vowel_index - consonant_index < closest_vowel_index - closest_consonant_index\
    \ {\n        closest_vow\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpwtdij1_j.swift:86:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmpwtdij1_j.swift:16:48: note: to match this opening\
    \ '{'\nfunc get_closest_vowel(word: String) -> String {\n                    \
    \                           ^\n/tmp/tmpwtdij1_j.swift:58:9: error: cannot find\
    \ 'closest_vow' in scope\n        closest_vow\n        ^~~~~~~~~~~\n/tmp/tmpwtdij1_j.swift:62:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013324
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestDistance = 0\n    var currentDistance = 0\n    for (index,\
    \ char) in word.characters.enumerated() {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            currentDistance = 0\n            for i in index+1..<word.characters.count\
    \ {\n                if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)]).lowercased()) {\n                    currentDistance += 1\n \
    \               } else {\n                    break\n                }\n     \
    \       }\n            if currentDistance > closestDistance {\n              \
    \  closestDistance = currentDistance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3gz5wdkb.swift:22:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3gz5wdkb.swift:25:37: error: 'characters' is unavailable:\
    \ Please use String directly\n            for i in index+1..<word.characters.count\
    \ {\n                                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013324
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closest_vowel = \"\"\n\
    \    for (index, letter) in word.enumerated() {\n        if vowels.contains(String(letter))\
    \ {\n            if index != 0 && index != word.count - 1 {\n                if\
    \ !vowels.contains(String(word[word.index(before: word.index(after: word.startIndex,\
    \ offsetBy: index))])) && !vowels.contains(String(word[word.index(before: word.index(after:\
    \ word.startIndex, offsetBy: index))])) {\n                    closest_vowel =\
    \ String(letter)\n                    break\n                }\n            }\n\
    \        }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpu3a_0ynk.swift:22:78: error: extraneous argument label 'after:'\
    \ in call\n                if !vowels.contains(String(word[word.index(before:\
    \ word.index(after: word.startIndex, offsetBy: index))])) && !vowels.contains(String(word[word.index(before:\
    \ word.index(after: word.startIndex, offsetBy: index))])) {\n                \
    \                                                             ^~~~~~~~\n     \
    \                                                                         \n/tmp/tmpu3a_0ynk.swift:22:185:\
    \ error: extraneous argument label 'after:' in call\n                if !vowels.contains(String(word[word.index(before:\
    \ word.index(after: word.startIndex, offsetBy: index))])) && !vowels.contains(String(word[word.index(before:\
    \ word.index(after: word.startIndex, offsetBy: index))])) {\n                \
    \                                                                            \
    \                                                                            \
    \                ^~~~~~~~\n                                                  \
    \                                                                            \
    \                                                           \n"
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    for i in\
    \ (0..<word.count).reversed() {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowelFound = true\n            vowelIndex = i\n        }\n  \
    \      if consonants.contains(char) && vowelFound {\n            consonantFound\
    \ = true\n            consonantIndex = i\n            break\n        }\n    }\n\
    \    if vowelFound && consonantFound {\n        let index = word.index(word.startIndex,\
    \ offsetBy: vowelIndex)\n        closestVowel = String(word[index])\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpajeo2nsd/tmpajeo2nsd.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c5e15fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c5de56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c5de56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c5de557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajeo2nsd                        0x0000560e814ffd3b <unavailable> + 7483

    5    libc.so.6                          0x00002b9c5e34b460 __libc_start_main +
    245

    6    tmpajeo2nsd                        0x0000560e814ff539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestIndex = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   if index > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy:\
    \ index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestIndex {\n  \
    \                      closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpwwaxe7rl/tmpwwaxe7rl.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2b4cfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2b49f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2b49f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2b49f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwaxe7rl                        0x000055704e2687e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ba2b4ee6460 __libc_start_main +
    245

    6    tmpwwaxe7rl                        0x000055704e268429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var is_consonant = false\n    var is_vowel = false\n\
    \    var is_first_vowel = false\n    var is_first_consonant = false\n    var is_second_vowel\
    \ = false\n    var is_second_consonant = false\n    var is_third_vowel = false\n\
    \    var is_third_consonant = false\n    var is_fourth_vowel = false\n    var\
    \ is_fourth_consonant = false\n    var is_fifth_vowel = false\n    var is_fifth_consonant\
    \ = false\n    var is_sixth_vowel = false\n    var is_sixth_consonant = false\n\
    \    var is_seventh_vowel = false\n    var is_seventh_consonant = false\n    var\
    \ is_eighth_vowel = false\n    var is_eighth_consonant = false\n    var is_ninth_vowel\
    \ = false\n    var is_ninth_consonant = false\n    var is_tenth_vowel = false\n\
    \    var is_tenth_consonant = false\n    var is_eleventh_vowel = false\n    var\
    \ is_eleventh_consonant = false\n    var is_twelfth_vowel = false\n    var is_twelfth_consonant\
    \ = false\n    var is_thirteenth_vowel = false\n    var is_thirteenth_consonant\
    \ = false\n    var is_fourteenth_vowel = false\n    var is_fourteenth_consonant\
    \ = false\n    var is_fifteenth_vowel = false\n    var is_fifteenth_consonant\
    \ = false\n    var is_sixteenth_vowel = false\n    var is_sixteenth_consonant\
    \ = false\n    var is_seventeenth_vowel = false\n    var is_seventeenth_consonant\
    \ = false\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpnp3yzp0c.swift:17:9: warning: initialization of immutable value\
    \ 'vowels' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let vowels = \"aeiouAEIOU\"\n    ~~~~^~~~~~\n    _\n/tmp/tmpnp3yzp0c.swift:18:9:\
    \ warning: initialization of immutable value 'consonants' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpnp3yzp0c.swift:19:9: warning: initialization\
    \ of variable 'result' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var result = \"\"\n    ~~~~^~~~~~\n    _\n/tmp/tmpnp3yzp0c.swift:20:9:\
    \ warning: initialization of variable 'is_consonant' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var is_consonant = false\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpnp3yzp0c.swift:21:9: warning: initialization\
    \ of variable 'is_vowel' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var is_vowel = false\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpnp3yzp0c.swift:22:9:\
    \ warning: initialization of variable 'is_first_vowel' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var is_first_vowel = false\n\
    \    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpnp3yzp0c.swift:23:9: warning: initialization\
    \ of variable 'is_first_consonant' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var is_first_consonant = false\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpnp3yzp0c.swift:24:9: warning: initialization of variable 'is_second_vowel'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var is_second_vowel = false\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpnp3yzp0c.swift:25:9:\
    \ warning: initialization of variable 'is_second_consonant' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var is_second_consonant\
    \ = false\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpnp3yzp0c.swift:26:9: warning:\
    \ initialization of variable 'is_third_vowel' was never used; consider rep"
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = word.count - 1\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            result =\
    \ char\n            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6sc2vqyn/tmp6sc2vqyn.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c5b1dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c5aed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c5aed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c5aed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6sc2vqyn                        0x000055787fbac8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b9c5b3c7460 __libc_start_main +
    245

    6    tmp6sc2vqyn                        0x000055787fbac2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    var closestVowel = \"\"\n    var closestIndex = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && index < word.count - 1 {\n                let\
    \ prevChar = word[word.index(word.startIndex, offsetBy: index - 1)]\n        \
    \        let nextChar = word[word.index(word.startIndex, offsetBy: index + 1)]\n\
    \                if !vowels.contains(prevChar) && !vowels.contains(nextChar) {\n\
    \                    if index < closestIndex {\n                        closestIndex\
    \ = index\n                        closestVowel = String(char)\n             \
    \       }\n                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmph7iezkxz/tmph7iezkxz.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa254bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa251b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa251b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa251b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7iezkxz                        0x00005598a0dc07e7 <unavailable> + 6119

    5    libc.so.6                          0x00002afa256a8460 __libc_start_main +
    245

    6    tmph7iezkxz                        0x00005598a0dc0429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    var previous = \"\
    \"\n    var current = \"\"\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            if previous\
    \ == \"\" {\n                break\n            }\n            if consonants.contains(previous)\
    \ {\n                result = char\n                break\n            }\n   \
    \     }\n        if consonants.contains(char) {\n            if current == \"\"\
    \ {\n                previous = char\n            } else {\n                if\
    \ vowels.contains(current) {\n                    result = current\n         \
    \           break\n                }\n                previous = char\n      \
    \      }\n        }\n        current = char\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpo92fdik5/tmpo92fdik5.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49f5e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49f5b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49f5b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49f5b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo92fdik5                        0x000055a785a537a3 <unavailable> + 6051

    5    libc.so.6                          0x00002b49f604a460 __libc_start_main +
    245

    6    tmpo92fdik5                        0x000055a785a531d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   for (index, char) in word.lowercased().reversed().enumerated() {\n       \
    \ if vowels.contains(String(char)) {\n            closestVowel = String(char)\n\
    \            closestVowelIndex = index\n        }\n        if consonants.contains(String(char))\
    \ && closestVowelIndex != 0 {\n            closestConsonantIndex = index\n   \
    \         break\n        }\n    }\n    if closestVowelIndex - closestConsonantIndex\
    \ == 1 {\n        return \"\"\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_oe6ahvw/tmp_oe6ahvw.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2cf7f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2cf4eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2cf4ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2cf4e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oe6ahvw                        0x000056531d7a7af3 <unavailable> + 6899

    5    libc.so.6                          0x00002ac2cf9df460 __libc_start_main +
    245

    6    tmp_oe6ahvw                        0x000056531d7a7529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var distance = word.count\n    for (i, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            if i\
    \ > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy: i - 1)])\
    \ {\n                if i < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: i + 1)]) {\n                    if i < distance {\n              \
    \          distance = i\n                        closestVowel = String(char)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpr5zxg2j0/tmpr5zxg2j0.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8ac3f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8ac0e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8ac0e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8ac0e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5zxg2j0                        0x000056113820b7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002af8ac5dd460 __libc_start_main +
    245

    6    tmpr5zxg2j0                        0x000056113820b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    if index < closestIndex {\n \
    \                       closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6fwcl5de/tmp6fwcl5de.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b534d409c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b534d100b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b534d100988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b534d0ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6fwcl5de                        0x000055aa100678f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b534d5f5460 __libc_start_main +
    245

    6    tmp6fwcl5de                        0x000055aa10067539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            var distance = 0\n\
    \            for i in index..<word.count {\n                if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)])) {\n                    break\n                }\n          \
    \      distance += 1\n            }\n            if distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestVowel\
    \ = String(char)\n            }\n        }\n    }\n    return closestVowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp455962tc/tmp455962tc.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c714cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c711c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c711c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c711c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp455962tc                        0x0000560339099a77 <unavailable> + 6775

    5    libc.so.6                          0x00002b3c716bb460 __libc_start_main +
    245

    6    tmp455962tc                        0x00005603390996b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n    \
    \    let char = word[word.index(word.startIndex, offsetBy: index)]\n        if\
    \ vowels.contains(char) {\n            result = String(char)\n            break\n\
    \        } else if consonants.contains(char) {\n            break\n        }\n\
    \        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpkledn4dy/tmpkledn4dy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80c7a07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80c76feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80c76fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80c76fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkledn4dy                        0x0000563c089e95d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b80c7bf3460 __libc_start_main +
    245

    6    tmpkledn4dy                        0x0000563c089e9219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    var found_vowel =\
    \ false\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            if found_vowel\
    \ {\n                result = String(char)\n                break\n          \
    \  }\n        } else if consonants.contains(char) {\n            found_vowel =\
    \ true\n        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpx38cccl2/tmpx38cccl2.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88cc415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88cc10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88cc10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88cc10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx38cccl2                        0x000055a0afd547e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b88cc601460 __libc_start_main +
    245

    6    tmpx38cccl2                        0x000055a0afd54219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var index = word.count - 1\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            closestVowel\
    \ = char\n            break\n        }\n        index -= 1\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp4n_k_bm5/tmp4n_k_bm5.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71e1c2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71e1922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71e1922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71e19217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4n_k_bm5                        0x00005625303cc8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b71e1e17460 __libc_start_main +
    245

    6    tmp4n_k_bm5                        0x00005625303cc2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestIndex = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   if index > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy:\
    \ index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestIndex {\n  \
    \                      closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpwwaxe7rl/tmpwwaxe7rl.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2b4cfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2b49f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2b49f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2b49f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwaxe7rl                        0x000055704e2687e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ba2b4ee6460 __libc_start_main +
    245

    6    tmpwwaxe7rl                        0x000055704e268429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   var consonantIndex = 0\n    var vowelIndex = 0\n    var vowelFound = false\n\
    \    var consonantFound = false\n    for char in word.characters {\n        if\
    \ vowels.contains(String(char).lowercased()) {\n            vowelFound = true\n\
    \            vowelIndex = word.characters.distance(from: word.startIndex, to:\
    \ char)\n            if vowelIndex > closestConsonantIndex {\n               \
    \ closestVowel = String(char)\n                closestVowelIndex = vowelIndex\n\
    \            }\n        }\n        if consonants.contains(String(char).lowercased())\
    \ {\n            consonantFound = true\n            consonantIndex = word.characters.distance(from:\
    \ word.startIndex, to: char)\n            if consonantIndex > closestVowelIndex\
    \ {\n                closestConsonantIndex = consonantIndex\n            }\n \
    \       }\n    }\n    if vowelFound && consonantFound {\n        return closestVowel\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpquajqpyc.swift:26:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpquajqpyc.swift:29:78:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String.Index'\n\
    \            vowelIndex = word.characters.distance(from: word.startIndex, to:\
    \ char)\n                                                                    \
    \         ^\n/tmp/tmpquajqpyc.swift:37:82: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String.Index'\n            consonantIndex\
    \ = word.characters.distance(from: word.startIndex, to: char)\n              \
    \                                                                   ^\n"
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = -1\n    var consonant_index = -1\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            vowel_index\
    \ = index\n        }\n        if consonants.contains(char) {\n            consonant_index\
    \ = index\n        }\n        if vowel_index != -1 && consonant_index != -1 {\n\
    \            if vowel_index > consonant_index {\n                return String(char)\n\
    \            }\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmppedx0w2z/tmppedx0w2z.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af849ddfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af849ad6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af849ad6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af849ad57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppedx0w2z                        0x0000560e7a600677 <unavailable> + 5751

    5    libc.so.6                          0x00002af849fcb460 __libc_start_main +
    245

    6    tmppedx0w2z                        0x0000560e7a6002b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closest_vowel = \"\"\n\
    \    var distance = word.count\n    for (index, letter) in word.enumerated() {\n\
    \        if vowels.contains(String(letter)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                let left_letter = word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]\n                let right_letter = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n                if !vowels.contains(String(left_letter))\
    \ && !vowels.contains(String(right_letter)) {\n                    if index <\
    \ distance {\n                        distance = index\n                     \
    \   closest_vowel = String(letter)\n                    }\n                }\n\
    \            }\n        }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_6z1eeyz/tmp_6z1eeyz.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae0132ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae01025b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae01025988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae010247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_6z1eeyz                        0x0000560ba4b9f8f7 <unavailable> + 6391

    5    libc.so.6                          0x00002aae0151a460 __libc_start_main +
    245

    6    tmp_6z1eeyz                        0x0000560ba4b9f539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var index = word.count - 1\n    var vowelIndex\
    \ = 0\n    var consonantIndex = 0\n    while index > 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            vowelIndex\
    \ = index\n        } else if consonants.contains(char) {\n            consonantIndex\
    \ = index\n            break\n        }\n        index -= 1\n    }\n    if vowelIndex\
    \ > consonantIndex {\n        closestVowel = String(word[word.index(word.startIndex,\
    \ offsetBy: vowelIndex)])\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmppoaw_04a/tmppoaw_04a.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21d44dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21d41d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21d41d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21d41d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppoaw_04a                        0x000055fc3f3675d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b21d46c7460 __libc_start_main +
    245

    6    tmppoaw_04a                        0x000055fc3f367219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    var closestVowel: Character = \" \"\n    var closestIndex\
    \ = word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && !vowels.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) {\n                if index < closestIndex {\n      \
    \              closestIndex = index\n                    closestVowel = char\n\
    \                }\n            }\n        }\n    }\n    return String(closestVowel)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmprst7voha/tmprst7voha.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ed2682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ed2379b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ed2379988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ed23787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprst7voha                        0x000055dbbc4c2877 <unavailable> + 6263

    5    libc.so.6                          0x00002b4ed286e460 __libc_start_main +
    245

    6    tmprst7voha                        0x000055dbbc4c24b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"AEIOUaeiou\"\n    let consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var vowel_index = 0\n    var consonant_index = 0\n\
    \    var vowel_distance = 0\n    var consonant_distance = 0\n    for i in 0..<word.count\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        if\
    \ vowels.contains(word[index]) {\n            vowel_index = i\n            vowel_distance\
    \ = word.count - i\n        }\n        if consonants.contains(word[index]) {\n\
    \            consonant_index = i\n            consonant_distance = word.count\
    \ - i\n        }\n        if vowel_index > consonant_index {\n            result\
    \ = String(word[index])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5a407c6p/tmp5a407c6p.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c483bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c480b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c480b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c480b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5a407c6p                        0x0000563ad7fc0963 <unavailable> + 6499

    5    libc.so.6                          0x00002b9c485aa460 __libc_start_main +
    245

    6    tmp5a407c6p                        0x0000563ad7fc0399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestIndex = 0\n    var index = 0\n    for letter in word.reversed()\
    \ {\n        if vowels.contains(String(letter)) {\n            closestVowel =\
    \ String(letter)\n            closestIndex = index\n        }\n        if consonants.contains(String(letter))\
    \ && closestVowel != \"\" {\n            if index == closestIndex + 1 {\n    \
    \            return closestVowel\n            }\n        }\n        index += 1\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpf6mf6i_l/tmpf6mf6i_l.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b770c6d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b770c3d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b770c3d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b770c3cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf6mf6i_l                        0x00005613f843fbbb <unavailable> + 7099

    5    libc.so.6                          0x00002b770c8c5460 __libc_start_main +
    245

    6    tmpf6mf6i_l                        0x00005613f843f3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelCount = 0\n    var consonantCount = 0\n    var vowelFound\
    \ = false\n    var consonantFound = false\n    var vowelIndexes = [Int]()\n  \
    \  var consonantIndexes = [Int]()\n    for i in 0..<word.count {\n        if vowels.contains(Array(word)[i])\
    \ {\n            vowelFound = true\n            vowelIndex = i\n            vowelIndexes.append(vowelIndex)\n\
    \            vowelCount += 1\n        }\n        if consonants.contains(Array(word)[i])\
    \ {\n            consonantFound = true\n            consonantIndex = i\n     \
    \       consonantIndexes.append(consonantIndex)\n            consonantCount +=\
    \ 1\n        }\n    }\n    if vowelFound && consonantFound {\n        for i in\
    \ 0..<vowelCount {\n            for j in 0..<consonantCount {\n              \
    \  if vowelIndexes[i] > consonantIndexes[j] {\n                    closestVowel\
    \ = String(Array(word)[vowelIndexes[i]])\n                }\n            }\n \
    \       }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp9tdhrj2x/tmp9tdhrj2x.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae924062c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae923d59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae923d59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae923d587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9tdhrj2x                        0x000055d1809bac7b <unavailable> + 7291

    5    libc.so.6                          0x00002ae92424e460 __libc_start_main +
    245

    6    tmp9tdhrj2x                        0x000055d1809ba479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closestVowel = \"\"\n    var closestDistance\
    \ = word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            var distance = 0\n            for i in index..<word.count {\n\
    \                if !vowels.contains(word[word.index(word.startIndex, offsetBy:\
    \ i)]) {\n                    distance += 1\n                } else {\n      \
    \              break\n                }\n            }\n            if distance\
    \ < closestDistance {\n                closestDistance = distance\n          \
    \      closestVowel = String(char)\n            }\n        }\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpqiu49c8i/tmpqiu49c8i.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09767f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09764f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09764f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09764ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqiu49c8i                        0x0000563d6992f977 <unavailable> + 6519

    5    libc.so.6                          0x00002b09769e5460 __libc_start_main +
    245

    6    tmpqiu49c8i                        0x0000563d6992f5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var vowel_index = -1\n    var consonant_index = -1\n\
    \    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            vowel_index = index\n        }\n        if consonants.contains(char)\
    \ {\n            consonant_index = index\n        }\n        if vowel_index !=\
    \ -1 && consonant_index != -1 && vowel_index > consonant_index {\n           \
    \ result = String(char)\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5h6t1tlc/tmp5h6t1tlc.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fbb3c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fbb0c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fbb0c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fbb0bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5h6t1tlc                        0x000055aa04101677 <unavailable> + 5751

    5    libc.so.6                          0x00002b4fbb5b5460 __libc_start_main +
    245

    6    tmp5h6t1tlc                        0x000055aa041012b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = -1\n    var consonant_index = -1\n    for i in 0..<word.count\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = word[index]\n        if vowels.contains(char) {\n            vowel_index\
    \ = i\n        } else if consonants.contains(char) {\n            consonant_index\
    \ = i\n        }\n        if vowel_index != -1 && consonant_index != -1 {\n  \
    \          if vowel_index > consonant_index {\n                return String(char)\n\
    \            }\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpe5v6g8qs/tmpe5v6g8qs.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac469694c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac46938bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac46938b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac46938a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5v6g8qs                        0x0000556e9584c757 <unavailable> + 5975

    5    libc.so.6                          0x00002ac469880460 __libc_start_main +
    245

    6    tmpe5v6g8qs                        0x0000556e9584c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var index = word.count - 1\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    while index >= 0 {\n        let character = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(String(character)) {\n       \
    \     vowelIndex = index\n        }\n        if consonants.contains(String(character))\
    \ {\n            consonantIndex = index\n        }\n        if vowelIndex > consonantIndex\
    \ {\n            closestVowel = String(character)\n            break\n       \
    \ }\n        index -= 1\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpytx6a_ur/tmpytx6a_ur.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba872b6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba872862b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba872862988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8728617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpytx6a_ur                        0x000055fafd8ef697 <unavailable> + 5783

    5    libc.so.6                          0x00002ba872d57460 __libc_start_main +
    245

    6    tmpytx6a_ur                        0x000055fafd8ef2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var vowel_index\
    \ = 0\n    var consonant_index = 0\n    var vowel_found = false\n    var consonant_found\
    \ = false\n    var closest_vowel = \"\"\n    for (index, char) in word.lowercased().reversed().enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            vowel_index = index\n\
    \            vowel_found = true\n        }\n        if consonants.contains(String(char))\
    \ {\n            consonant_index = index\n            consonant_found = true\n\
    \        }\n        if vowel_found && consonant_found {\n            if vowel_index\
    \ < consonant_index {\n                closest_vowel = String(char)\n        \
    \    }\n            break\n        }\n    }\n    return closest_vowel\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpaq6xt1t4/tmpaq6xt1t4.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b759adefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b759aae6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b759aae6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b759aae57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaq6xt1t4                        0x0000556cc58468e7 <unavailable> + 6375

    5    libc.so.6                          0x00002b759afdb460 __libc_start_main +
    245

    6    tmpaq6xt1t4                        0x0000556cc5846529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var consonant = \"\"\n    for char in word.characters\
    \ {\n        if vowels.containsString(String(char)) {\n            vowel = String(char)\n\
    \        }\n        if consonants.containsString(String(char)) {\n           \
    \ consonant = String(char)\n        }\n        if vowel != \"\" && consonant !=\
    \ \"\" {\n            return vowel\n        }\n    }\n    return \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpdnlyygjq.swift:21:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpdnlyygjq.swift:22:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpdnlyygjq.swift:25:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var minDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            var distance = 0\n\
    \            for i in index..<word.count {\n                if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)])) {\n                    break\n                }\n          \
    \      distance += 1\n            }\n            if distance < minDistance {\n\
    \                minDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6a6kkp9r/tmp6a6kkp9r.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafe96cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafe93c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafe93c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafe93c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6a6kkp9r                        0x0000564fe7e90a77 <unavailable> + 6775

    5    libc.so.6                          0x00002aafe98b9460 __libc_start_main +
    245

    6    tmp6a6kkp9r                        0x0000564fe7e906b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = word.count - 1\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            result =\
    \ char\n            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6sc2vqyn/tmp6sc2vqyn.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c5b1dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c5aed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c5aed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c5aed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6sc2vqyn                        0x000055787fbac8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b9c5b3c7460 __libc_start_main +
    245

    6    tmp6sc2vqyn                        0x000055787fbac2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"AEIOU\"\n    let consonants = \"BCDFGHJKLMNPQRSTVWXYZ\"\n    var\
    \ closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex = 0\n  \
    \  var vowelFound = false\n    for i in 0..<word.count {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: i)]\n        if vowels.contains(char) {\n            vowelFound =\
    \ true\n            vowelIndex = i\n        }\n        if consonants.contains(char)\
    \ {\n            consonantIndex = i\n        }\n        if vowelFound && vowelIndex\
    \ < consonantIndex {\n            closestVowel = String(char)\n            break\n\
    \        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp71pylsh7/tmp71pylsh7.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b249ec68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b249e95fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b249e95f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b249e95e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp71pylsh7                        0x000055f223e37757 <unavailable> + 5975

    5    libc.so.6                          0x00002b249ee54460 __libc_start_main +
    245

    6    tmp71pylsh7                        0x000055f223e37399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var vowel_index = -1\n    var consonant_index = -1\n\
    \    for i in (0..<word.count).reversed() {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = word[index]\n        if vowels.contains(char)\
    \ {\n            vowel_index = i\n        } else if consonants.contains(char)\
    \ {\n            consonant_index = i\n            break\n        }\n    }\n  \
    \  if vowel_index != -1 && consonant_index != -1 && vowel_index > consonant_index\
    \ {\n        let index = word.index(word.startIndex, offsetBy: vowel_index)\n\
    \        result = String(word[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmproshp8c1/tmproshp8c1.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9229870c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9229567b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9229567988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92295667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproshp8c1                        0x000055f0784df927 <unavailable> + 6439

    5    libc.so.6                          0x00002b9229a5c460 __libc_start_main +
    245

    6    tmproshp8c1                        0x000055f0784df569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var index = word.count - 1\n    var previousChar = \"\"\n    var\
    \ currentChar = \"\"\n    var nextChar = \"\"\n    while index >= 0 {\n      \
    \  currentChar = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if index == word.count - 1 {\n            nextChar = \"\"\n        }\
    \ else {\n            nextChar = String(word[word.index(word.startIndex, offsetBy:\
    \ index + 1)])\n        }\n        if vowels.contains(currentChar) && consonants.contains(previousChar)\
    \ && consonants.contains(nextChar) {\n            closestVowel = currentChar\n\
    \            break\n        }\n        previousChar = currentChar\n        index\
    \ -= 1\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp1ug95_gh/tmp1ug95_gh.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28f0fadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28f0ca4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28f0ca4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28f0ca37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ug95_gh                        0x000055e11fc1a8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b28f1199460 __libc_start_main +
    245

    6    tmp1ug95_gh                        0x000055e11fc1a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closest_vowel = \"\"\n    var vowel_index = 0\n    var consonant_index\
    \ = 0\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowel_index = i\n        }\n        if consonants.contains(char)\
    \ {\n            consonant_index = i\n        }\n        if vowel_index > consonant_index\
    \ {\n            closest_vowel = char\n            break\n        }\n    }\n \
    \   return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpamkl4g9g/tmpamkl4g9g.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8e06fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8dd66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8dd66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8dd657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpamkl4g9g                        0x00005584dbb88717 <unavailable> + 5911

    5    libc.so.6                          0x00002aec8e25b460 __libc_start_main +
    245

    6    tmpamkl4g9g                        0x00005584dbb88359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closestVowel = \"\"\n    var closestIndex =\
    \ word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index > 0 && index < word.count - 1 {\n                if\
    \ !vowels.contains(word[word.index(word.startIndex, offsetBy: index - 1)]) &&\
    \ !vowels.contains(word[word.index(word.startIndex, offsetBy: index + 1)]) {\n\
    \                    if index < closestIndex {\n                        closestIndex\
    \ = index\n                        closestVowel = String(char)\n             \
    \       }\n                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpfq_1124x/tmpfq_1124x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2da0f9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2da0c94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2da0c94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2da0c937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfq_1124x                        0x000056180b2ff7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b2da1189460 __libc_start_main +
    245

    6    tmpfq_1124x                        0x000056180b2ff429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   var closestConsonant = \"\"\n    var wordArray = Array(word)\n    for i in\
    \ 0..<wordArray.count {\n        if vowels.contains(String(wordArray[i]).lowercased())\
    \ {\n            closestVowel = String(wordArray[i])\n            closestVowelIndex\
    \ = i\n            break\n        }\n    }\n    for i in (0..<wordArray.count).reversed()\
    \ {\n        if consonants.contains(String(wordArray[i]).lowercased()) {\n   \
    \         closestConsonant = String(wordArray[i])\n            closestConsonantIndex\
    \ = i\n            break\n        }\n    }\n    if closestVowelIndex < closestConsonantIndex\
    \ {\n        return closestVowel\n    } else {\n        return \"\"\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp1ewvidjj/tmp1ewvidjj.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad927584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad92727bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad92727b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad92727a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ewvidjj                        0x0000560a09f03b67 <unavailable> + 7015

    5    libc.so.6                          0x00002ad927770460 __libc_start_main +
    245

    6    tmp1ewvidjj                        0x0000560a09f037a9 <unavailable> + 6057

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel: Character = \" \"\n    var closestVowelIndex = 0\n   \
    \ var closestConsonantIndex = 0\n    var closestConsonant: Character = \" \"\n\
    \    var foundVowel = false\n    var foundConsonant = false\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            closestVowel\
    \ = char\n            closestVowelIndex = index\n            foundVowel = true\n\
    \        }\n        if consonants.contains(char) && foundVowel {\n           \
    \ closestConsonant = char\n            closestConsonantIndex = index\n       \
    \     foundConsonant = true\n        }\n        if foundVowel && foundConsonant\
    \ {\n            break\n        }\n    }\n    if foundVowel && foundConsonant\
    \ && closestVowelIndex < closestConsonantIndex {\n        return String(closestVowel)\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp4kurkkop/tmp4kurkkop.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23cec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23ce98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23ce98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23ce98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kurkkop                        0x0000564495d53717 <unavailable> + 5911

    5    libc.so.6                          0x00002b23cee82460 __libc_start_main +
    245

    6    tmp4kurkkop                        0x0000564495d53359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n    for\
    \ (index, char) in word.enumerated() {\n        if vowels.contains(char) {\n \
    \           if index > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestVowelIndex {\n\
    \                        closestVowel = String(char)\n                       \
    \ closestVowelIndex = index\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp2n4f0s_2/tmp2n4f0s_2.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2569c0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2569902b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2569902988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25699017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2n4f0s_2                        0x0000560c4aa107e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b2569df7460 __libc_start_main +
    245

    6    tmp2n4f0s_2                        0x0000560c4aa10429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var prev = \"\"\n    var next = \"\"\n    for c in\
    \ word.characters {\n        if vowels.containsString(String(c)) {\n         \
    \   if consonants.containsString(prev) && consonants.containsString(next) {\n\
    \                result = String(c)\n                break\n            }\n  \
    \      }\n        prev = String(c)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_w1z9yri.swift:22:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_w1z9yri.swift:23:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(c))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp_w1z9yri.swift:24:27: error: value\
    \ of type 'String' has no member 'containsString'\n            if consonants.containsString(prev)\
    \ && consonants.containsString(next) {\n               ~~~~~~~~~~ ^~~~~~~~~~~~~~\n\
    /tmp/tmp_w1z9yri.swift:24:62: error: value of type 'String' has no member 'containsString'\n\
    \            if consonants.containsString(prev) && consonants.containsString(next)\
    \ {\n                                                  ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                let prevChar = word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]\n                let nextChar = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n                if !vowels.contains(String(prevChar))\
    \ && !vowels.contains(String(nextChar)) {\n                    if index < closestDistance\
    \ {\n                        closestDistance = index\n                       \
    \ closestVowel = String(char)\n                    }\n                }\n    \
    \        }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpbxunnskl/tmpbxunnskl.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25d1d09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25d1a00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25d1a00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25d19ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxunnskl                        0x000055e01303b8f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b25d1ef5460 __libc_start_main +
    245

    6    tmpbxunnskl                        0x000055e01303b539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closest_vowel = \"\"\n    var vowel_index = 0\n    var consonant_index\
    \ = 0\n    var vowel_found = false\n    var consonant_found = false\n    for i\
    \ in stride(from: word.count - 1, through: 0, by: -1) {\n        if !vowel_found\
    \ {\n            if vowels.contains(word[i]) {\n                vowel_index =\
    \ i\n                vowel_found = true\n            }\n        }\n        if\
    \ !consonant_found {\n            if consonants.contains(word[i]) {\n        \
    \        consonant_index = i\n                consonant_found = true\n       \
    \     }\n        }\n        if vowel_found && consonant_found {\n            break\n\
    \        }\n    }\n    if vowel_found && consonant_found {\n        if vowel_index\
    \ > consonant_index {\n            closest_vowel = String(word[vowel_index])\n\
    \        }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp5b4jgqb3.swift:26:32: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n            if vowels.contains(word[i])\
    \ {\n                               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp5b4jgqb3.swift:32:36: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if consonants.contains(word[i]) {\n                             \
    \      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmp5b4jgqb3.swift:43:36: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   closest_vowel = String(word[vowel_index])\n                              \
    \     ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var index = 0\n    var vowelIndex = 0\n   \
    \ var consonantIndex = 0\n    var consonantCount = 0\n    var vowelCount = 0\n\
    \    for letter in word.characters {\n        if vowels.containsString(String(letter))\
    \ {\n            vowelCount += 1\n            vowelIndex = index\n        }\n\
    \        if consonants.containsString(String(letter)) {\n            consonantCount\
    \ += 1\n            consonantIndex = index\n        }\n        if consonantCount\
    \ == 2 && vowelCount == 1 {\n            closestVowel = String(word[word.startIndex.advancedBy(vowelIndex)])\n\
    \            break\n        }\n        index += 1\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpye3w1zlv.swift:25:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in word.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpye3w1zlv.swift:26:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(letter))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpye3w1zlv.swift:30:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(letter))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpye3w1zlv.swift:35:56: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n            closestVowel\
    \ = String(word[word.startIndex.advancedBy(vowelIndex)])\n                   \
    \                    ~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestDistance = -1\n    for i in 0..<word.count {\n      \
    \  let index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            if closestDistance == -1 {\n\
    \                closestDistance = i\n                closestVowel = char\n  \
    \          } else {\n                if i < closestDistance {\n              \
    \      closestDistance = i\n                    closestVowel = char\n        \
    \        }\n            }\n        }\n    }\n    if closestDistance == -1 {\n\
    \        return \"\"\n    }\n    for i in (0..<closestDistance).reversed() {\n\
    \        let index = word.index(word.startIndex, offsetBy: i)\n        let char\
    \ = String(word[index])\n        if consonants.contains(char) {\n            return\
    \ closestVowel\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp81_g0o9q/tmp81_g0o9q.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2c8068c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2c7d5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2c7d5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2c7d5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81_g0o9q                        0x0000561c7e870ae7 <unavailable> + 6887

    5    libc.so.6                          0x00002ae2c8254460 __libc_start_main +
    245

    6    tmp81_g0o9q                        0x0000561c7e870729 <unavailable> + 5929

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ vowel = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for\
    \ (i, c) in word.reversed().enumerated() {\n        if vowels.contains(String(c))\
    \ {\n            vowel = String(c)\n            if i > 0 {\n                let\
    \ next = word.reversed()[i-1]\n                if !vowels.contains(String(next))\
    \ {\n                    return vowel\n                }\n            }\n    \
    \    }\n    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpbl9_y591/tmpbl9_y591.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7702b6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7702863b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7702863988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77028627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbl9_y591                        0x000055a7fbee1b93 <unavailable> + 7059

    5    libc.so.6                          0x00002b7702d58460 __libc_start_main +
    245

    6    tmpbl9_y591                        0x000055a7fbee15c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices {\n     \
    \   if consonants.contains(word[i]) {\n            index = word.distance(from:\
    \ word.startIndex, to: i)\n            break\n        }\n    }\n    for i in word.indices\
    \ {\n        if vowels.contains(word[i]) {\n            if word.distance(from:\
    \ word.startIndex, to: i) > index {\n                vowel = String(word[i])\n\
    \                break\n            }\n        }\n    }\n    return vowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpinkeneg9/tmpinkeneg9.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afeee4f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afeee1e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afeee1e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afeee1e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinkeneg9                        0x0000562c79236787 <unavailable> + 6023

    5    libc.so.6                          0x00002afeee6dc460 __libc_start_main +
    245

    6    tmpinkeneg9                        0x0000562c792363c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var result =\
    \ \"\"\n    var prev = \"\"\n    var next = \"\"\n    for char in word.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            if consonants.contains(prev)\
    \ && consonants.contains(next) {\n                result = String(char)\n    \
    \            break\n            }\n        }\n        next = prev\n        prev\
    \ = String(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpkgtw6_c7/tmpkgtw6_c7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba152bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1528ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1528eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1528ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgtw6_c7                        0x00005650a6fbe983 <unavailable> + 6531

    5    libc.so.6                          0x00002ba152de0460 __libc_start_main +
    245

    6    tmpkgtw6_c7                        0x00005650a6fbe3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var vowel_index = -1\n    var consonant_index = -1\n\
    \    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            vowel_index = index\n        }\n        if consonants.contains(char)\
    \ {\n            consonant_index = index\n        }\n        if vowel_index !=\
    \ -1 && consonant_index != -1 && vowel_index > consonant_index {\n           \
    \ result = String(char)\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5h6t1tlc/tmp5h6t1tlc.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fbb3c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fbb0c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fbb0c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fbb0bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5h6t1tlc                        0x000055aa04101677 <unavailable> + 5751

    5    libc.so.6                          0x00002b4fbb5b5460 __libc_start_main +
    245

    6    tmp5h6t1tlc                        0x000055aa041012b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var consonant = \"\"\n    var result = \"\"\n    for\
    \ char in word.characters {\n        if vowels.containsString(String(char)) {\n\
    \            vowel = String(char)\n        }\n        if consonants.containsString(String(char))\
    \ {\n            consonant = String(char)\n        }\n        if vowel != \"\"\
    \ && consonant != \"\" {\n            result = vowel\n            vowel = \"\"\
    \n            consonant = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpoqsm4zn7.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpoqsm4zn7.swift:23:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpoqsm4zn7.swift:26:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013324
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    for\
    \ i in stride(from: word.count - 1, to: 0, by: -1) {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            result = char\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp8zlrcwvy/tmp8zlrcwvy.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada44482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada44179b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada44179988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada441787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8zlrcwvy                        0x0000556c57cecab3 <unavailable> + 6835

    5    libc.so.6                          0x00002ada4466e460 __libc_start_main +
    245

    6    tmp8zlrcwvy                        0x0000556c57cec4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            if index\
    \ > 0 && consonants.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ index - 1)]).lowercased()) {\n                if index < word.count - 1 && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]).lowercased()) {\n                    if index < closestIndex\
    \ {\n                        closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpxngrnhag/tmpxngrnhag.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25e3e23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25e3b1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25e3b1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25e3b197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxngrnhag                        0x000055d3d9e58947 <unavailable> + 6471

    5    libc.so.6                          0x00002b25e400f460 __libc_start_main +
    245

    6    tmpxngrnhag                        0x000055d3d9e58589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   for (index, char) in word.lowercased().reversed().enumerated() {\n       \
    \ if vowels.contains(String(char)) {\n            closestVowel = String(char)\n\
    \            closestVowelIndex = index\n        }\n        if consonants.contains(String(char))\
    \ && closestVowel != \"\" {\n            closestConsonantIndex = index\n     \
    \       break\n        }\n    }\n    if closestVowelIndex - closestConsonantIndex\
    \ > 1 {\n        return closestVowel\n    }\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnbwd4r8n/tmpnbwd4r8n.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab809dbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab809ab1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab809ab1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab809ab07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnbwd4r8n                        0x0000559bb46ee8e7 <unavailable> + 6375

    5    libc.so.6                          0x00002ab809fa6460 __libc_start_main +
    245

    6    tmpnbwd4r8n                        0x0000559bb46ee529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closestVowel = \"\"\n    var closestIndex =\
    \ word.count\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            if index < closestIndex {\n                closestIndex = index\n\
    \                closestVowel = String(char)\n            }\n        }\n    }\n\
    \    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpvyroft7x/tmpvyroft7x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8b2d6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8b2a61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8b2a61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8b2a607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvyroft7x                        0x0000563403a396c7 <unavailable> + 5831

    5    libc.so.6                          0x00002ab8b2f56460 __libc_start_main +
    245

    6    tmpvyroft7x                        0x0000563403a39309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"AEIOUaeiou\"\n    let consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices {\n     \
    \   if consonants.contains(word[i]) {\n            index = word.distance(from:\
    \ word.startIndex, to: i)\n            break\n        }\n    }\n    for i in word.indices\
    \ {\n        if vowels.contains(word[i]) {\n            if word.distance(from:\
    \ word.startIndex, to: i) > index {\n                vowel = String(word[i])\n\
    \                break\n            }\n        }\n    }\n    return vowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6ekozhfj/tmp6ekozhfj.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b502d3e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b502d0dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b502d0df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b502d0de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ekozhfj                        0x000055b70439f787 <unavailable> + 6023

    5    libc.so.6                          0x00002b502d5d4460 __libc_start_main +
    245

    6    tmp6ekozhfj                        0x000055b70439f3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var vowelIndex = 0\n    var consonantIndex = 0\n    var vowelFound\
    \ = false\n    var consonantFound = false\n    var closestVowelIndex = 0\n   \
    \ var closestConsonantIndex = 0\n    var closestVowelFound = false\n    var closestConsonantFound\
    \ = false\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowelFound\
    \ == false {\n            for j in 0..<vowels.count {\n                if char\
    \ == vowels[j] {\n                    vowelFound = true\n                    vowelIndex\
    \ = i\n                }\n            }\n        }\n        if consonantFound\
    \ == false {\n            for j in 0..<consonants.count {\n                if\
    \ char == consonants[j] {\n                    consonantFound = true\n       \
    \             consonantIndex = i\n                }\n            }\n        }\n\
    \        if vowelFound == true && consonantFound == true {\n            if vowelIndex\
    \ > consonantIndex {\n                if closestVowelFound == false {\n      \
    \              closestVowelFound = true\n                    closestVowelIndex\
    \ = vowelIndex\n                    closestConsonantIndex = consonantIndex\n \
    \               } else {\n                    if vowelIndex < closestVowelIndex\
    \ {\n                        closestVowelIndex = vowelIndex\n                \
    \        closestConsonantIndex = consonantIndex\n                    }\n     \
    \           }\n            }\n            vowelFound = false\n            consonantFound\
    \ = false\n        }\n    }\n    if closestVowelFound == true {\n        let index\
    \ = word.index(word.startIndex, offsetBy: closestVowelIndex)\n        closestVowel\
    \ = String(word[index])\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp10gqvwht/tmp10gqvwht.swift:84: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b384aa71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b384a768b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b384a768988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b384a7677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10gqvwht                        0x000056262d9da827 <unavailable> + 6183

    5    libc.so.6                          0x00002b384ac5d460 __libc_start_main +
    245

    6    tmp10gqvwht                        0x000056262d9da469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = 0\n    var consonant_index = 0\n    var closest_vowel\
    \ = \"\"\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            vowel_index = index\n        }\n        if consonants.contains(char)\
    \ {\n            consonant_index = index\n        }\n        if vowel_index >\
    \ consonant_index {\n            closest_vowel = String(char)\n        }\n   \
    \ }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpmjf2p9x0/tmpmjf2p9x0.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2ced1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2cea14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2cea14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2cea137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmjf2p9x0                        0x000055b1be03c883 <unavailable> + 6275

    5    libc.so.6                          0x00002ab2cef09460 __libc_start_main +
    245

    6    tmpmjf2p9x0                        0x000055b1be03c2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    for\
    \ i in (0..<word.count).reversed() {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            result = char\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpdj_ih0t_/tmpdj_ih0t_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2b2951c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2b2648b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2b2648988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2b26477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdj_ih0t_                        0x000055c93ebfac03 <unavailable> + 7171

    5    libc.so.6                          0x00002ae2b2b3d460 __libc_start_main +
    245

    6    tmpdj_ih0t_                        0x000055c93ebfa639 <unavailable> + 5689

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    for i in\
    \ stride(from: word.count - 1, through: 0, by: -1) {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = word[index]\n        if vowels.contains(char)\
    \ {\n            vowelFound = true\n            vowelIndex = i\n        }\n  \
    \      if consonants.contains(char) && vowelFound {\n            consonantFound\
    \ = true\n            consonantIndex = i\n            break\n        }\n    }\n\
    \    if vowelFound && consonantFound {\n        let index = word.index(word.startIndex,\
    \ offsetBy: vowelIndex)\n        closestVowel = String(word[index])\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpcmlhmdu5/tmpcmlhmdu5.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b355a5fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b355a2f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b355a2f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b355a2f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcmlhmdu5                        0x000055b70391ac3b <unavailable> + 7227

    5    libc.so.6                          0x00002b355a7e6460 __libc_start_main +
    245

    6    tmpcmlhmdu5                        0x000055b70391a439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex = 0\n  \
    \  var vowelFound = false\n    var consonantFound = false\n    var vowelFoundIndex\
    \ = 0\n    var consonantFoundIndex = 0\n    for i in 0..<word.count {\n      \
    \  let index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            vowelFound = true\n         \
    \   vowelFoundIndex = i\n        }\n        if consonants.contains(char) {\n \
    \           consonantFound = true\n            consonantFoundIndex = i\n     \
    \   }\n        if vowelFound && consonantFound {\n            if vowelFoundIndex\
    \ > consonantFoundIndex {\n                vowelIndex = vowelFoundIndex\n    \
    \            consonantIndex = consonantFoundIndex\n            }\n           \
    \ vowelFound = false\n            consonantFound = false\n        }\n    }\n \
    \   if vowelIndex > consonantIndex {\n        let index = word.index(word.startIndex,\
    \ offsetBy: vowelIndex)\n        closestVowel = String(word[index])\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpgnrs8prt/tmpgnrs8prt.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7a8fb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7a8caab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7a8caa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7a8ca97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgnrs8prt                        0x0000564e36123fcd <unavailable> + 8141

    5    libc.so.6                          0x00002ab7a919f460 __libc_start_main +
    245

    6    tmpgnrs8prt                        0x0000564e36123359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        if vowels.contains(word[index]) {\n            vowelIndex\
    \ = i\n        }\n        if consonants.contains(word[index]) {\n            consonantIndex\
    \ = i\n        }\n        if vowelIndex > consonantIndex {\n            closestVowel\
    \ = String(word[index])\n            break\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpr38ytsjq/tmpr38ytsjq.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a1677fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a16476b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a16476988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a164757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr38ytsjq                        0x000055c4c2c3b757 <unavailable> + 5975

    5    libc.so.6                          0x00002b6a1696b460 __libc_start_main +
    245

    6    tmpr38ytsjq                        0x000055c4c2c3b399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var vowel = \"\"\n    var index = 0\n    var i\
    \ = word.count - 1\n    while i >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: i)]\n        if vowels.contains(char) {\n            vowel = String(char)\n\
    \            index = i\n            break\n        }\n        i -= 1\n    }\n\
    \    if vowel == \"\" {\n        return \"\"\n    }\n    i = index - 1\n    while\
    \ i >= 0 {\n        let char = word[word.index(word.startIndex, offsetBy: i)]\n\
    \        if !vowels.contains(char) {\n            return vowel\n        }\n  \
    \      i -= 1\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpl8is_ybt/tmpl8is_ybt.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83a9b4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83a9842b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83a9842988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83a98417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl8is_ybt                        0x000055f58e558a1b <unavailable> + 6683

    5    libc.so.6                          0x00002b83a9d37460 __libc_start_main +
    245

    6    tmpl8is_ybt                        0x000055f58e558219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    for i in (0..<word.count).reversed() {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        if vowels.contains(word[index]) {\n            vowelIndex\
    \ = i\n            for j in (0..<i).reversed() {\n                let index =\
    \ word.index(word.startIndex, offsetBy: j)\n                if consonants.contains(word[index])\
    \ {\n                    consonantIndex = j\n                    closestVowel\
    \ = String(word[index])\n                    break\n                }\n      \
    \      }\n            break\n        }\n    }\n    if vowelIndex - consonantIndex\
    \ > 1 {\n        return closestVowel\n    }\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp1v31knuh/tmp1v31knuh.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b769d0cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b769cdc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b769cdc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b769cdc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1v31knuh                        0x0000563389855927 <unavailable> + 6439

    5    libc.so.6                          0x00002b769d2ba460 __libc_start_main +
    245

    6    tmp1v31knuh                        0x0000563389855569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var consonant = \"\"\n    var closest_vowel = \"\"\
    \n    for char in word.characters {\n        if vowels.containsString(String(char))\
    \ {\n            vowel = String(char)\n        }\n        if consonants.containsString(String(char))\
    \ {\n            consonant = String(char)\n        }\n        if vowel != \"\"\
    \ && consonant != \"\" {\n            closest_vowel = vowel\n            vowel\
    \ = \"\"\n            consonant = \"\"\n        }\n    }\n    return closest_vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpakofvbuf.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpakofvbuf.swift:23:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpakofvbuf.swift:26:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ vowel_index = -1\n    var consonant_index = -1\n    var vowel_distance = Int.max\n\
    \    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            vowel_index = index\n        } else if consonants.contains(char)\
    \ {\n            consonant_index = index\n        }\n        if vowel_index !=\
    \ -1 && consonant_index != -1 {\n            vowel_distance = min(vowel_distance,\
    \ consonant_index - vowel_index)\n        }\n    }\n    if vowel_distance == Int.max\
    \ {\n        return \"\"\n    }\n    return String(word[word.index(word.endIndex,\
    \ offsetBy: -vowel_distance)])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5fe010c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5fdd07561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab5fdd07286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab5fdd0713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab5fdd06bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab5fde3ab0d <unavailable> + 2693901

    6    tmpx66s57ew                        0x0000562318b7ea41 <unavailable> + 10817

    7    tmpx66s57ew                        0x0000562318b7d766 <unavailable> + 5990

    8    libc.so.6                          0x00002ab5fe1fc460 __libc_start_main +
    245

    9    tmpx66s57ew                        0x0000562318b7d469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var vowelIndex = 0\n    var consonantIndex = 0\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            vowelIndex = index\n        }\n        if consonants.contains(String(char).lowercased())\
    \ {\n            consonantIndex = index\n        }\n        if vowelIndex > consonantIndex\
    \ {\n            closestVowel = String(char)\n            break\n        }\n \
    \   }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpqy4_c33d/tmpqy4_c33d.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6039a14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b603970bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b603970b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b603970a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqy4_c33d                        0x000055fa419bd7d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b6039c00460 __libc_start_main +
    245

    6    tmpqy4_c33d                        0x000055fa419bd419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closest_vowel = \"\"\n\
    \    var closest_vowel_index = word.count\n    for i in 0..<word.count {\n   \
    \     let index = word.index(word.startIndex, offsetBy: i)\n        let char =\
    \ String(word[index])\n        if vowels.contains(char) {\n            if i <\
    \ closest_vowel_index {\n                closest_vowel = char\n              \
    \  closest_vowel_index = i\n            }\n        }\n    }\n    return closest_vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpsyy5fzth/tmpsyy5fzth.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8418bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84188f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84188f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84188ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsyy5fzth                        0x000055b70b6ac827 <unavailable> + 6183

    5    libc.so.6                          0x00002b8418de5460 __libc_start_main +
    245

    6    tmpsyy5fzth                        0x000055b70b6ac469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var vowelIndex = 0\n    var word = word\n    var index = 0\n    var closestIndex\
    \ = 0\n    var closestDistance = 0\n    var distance = 0\n    var isFirstVowel\
    \ = true\n    var isFirstConsonant = true\n    while word.count > 0 {\n      \
    \  let character = word.removeLast()\n        if vowels.contains(String(character))\
    \ {\n            vowelIndex = index\n            if isFirstVowel {\n         \
    \       isFirstVowel = false\n            } else {\n                distance =\
    \ vowelIndex - closestIndex\n                if distance > closestDistance {\n\
    \                    closestDistance = distance\n                    closestVowel\
    \ = String(character)\n                }\n            }\n        } else {\n  \
    \          if isFirstConsonant {\n                isFirstConsonant = false\n \
    \           } else {\n                closestIndex = index\n            }\n  \
    \      }\n        index += 1\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpfyoleqe0/tmpfyoleqe0.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaffb356c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaffb04db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaffb04d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaffb04c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfyoleqe0                        0x000055800975a667 <unavailable> + 5735

    5    libc.so.6                          0x00002aaffb542460 __libc_start_main +
    245

    6    tmpfyoleqe0                        0x000055800975a2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    for i in stride(from: word.count - 1, through: 0, by: -1) {\n     \
    \   let index = word.index(word.startIndex, offsetBy: i)\n        let character\
    \ = word[index]\n        if vowels.contains(character) {\n            vowelIndex\
    \ = i\n        } else if consonants.contains(character) {\n            consonantIndex\
    \ = i\n            break\n        }\n    }\n    if vowelIndex > consonantIndex\
    \ {\n        closestVowel = String(word[word.index(word.startIndex, offsetBy:\
    \ vowelIndex)])\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp74i99m21/tmp74i99m21.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d1222ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d11f21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d11f21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d11f207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74i99m21                        0x000056136e9957f7 <unavailable> + 6135

    5    libc.so.6                          0x00002b4d12416460 __libc_start_main +
    245

    6    tmp74i99m21                        0x000056136e995439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var indexOfVowel = 0\n    var indexOfConsonant = 0\n\
    \    for char in word.characters {\n        if vowels.contains(String(char)) {\n\
    \            indexOfVowel = word.characters.index(of: char)!\n        }\n    \
    \    if consonants.contains(String(char)) {\n            indexOfConsonant = word.characters.index(of:\
    \ char)!\n            if indexOfConsonant > indexOfVowel {\n                closestVowel\
    \ = String(char)\n            }\n        }\n    }\n    return closestVowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpdwry1nu3.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpdwry1nu3.swift:24:59:\
    \ error: cannot assign value of type 'String.Index' to type 'Int'\n          \
    \  indexOfVowel = word.characters.index(of: char)!\n                         \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n/tmp/tmpdwry1nu3.swift:27:63: error: cannot\
    \ assign value of type 'String.Index' to type 'Int'\n            indexOfConsonant\
    \ = word.characters.index(of: char)!\n                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closest_vowel\
    \ = \"\"\n    var closest_distance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            var distance = 0\n\
    \            var i = index\n            while i >= 0 {\n                if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)])) {\n                    break\n                }\n          \
    \      distance += 1\n                i -= 1\n            }\n            if distance\
    \ < closest_distance {\n                closest_distance = distance\n        \
    \        closest_vowel = String(char)\n            }\n        }\n    }\n    return\
    \ closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpo19x_z7v/tmpo19x_z7v.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab38f174c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab38ee6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab38ee6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab38ee6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo19x_z7v                        0x000055bb7a2248f7 <unavailable> + 6391

    5    libc.so.6                          0x00002ab38f360460 __libc_start_main +
    245

    6    tmpo19x_z7v                        0x000055bb7a224539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n    var index =\
    \ 0\n    for letter in word.reversed() {\n        if vowels.contains(letter) {\n\
    \            closestVowel = String(letter)\n            closestVowelIndex = index\n\
    \        }\n        if consonants.contains(letter) && closestVowelIndex > 0 {\n\
    \            break\n        }\n        index += 1\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpv1682lvy/tmpv1682lvy.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c0a9fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c0a6f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c0a6f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c0a6f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1682lvy                        0x000055da048688b3 <unavailable> + 6323

    5    libc.so.6                          0x00002b0c0abe8460 __libc_start_main +
    245

    6    tmpv1682lvy                        0x000055da048682e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestVowelIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.count - 1 {\n                if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    if index < closestVowelIndex\
    \ {\n                        closestVowelIndex = index\n                     \
    \   closestVowel = String(char)\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpmv1gi_04/tmpmv1gi_04.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a5df07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a5dbfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a5dbfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a5dbfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmv1gi_04                        0x000056449db1e8f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b9a5e0f3460 __libc_start_main +
    245

    6    tmpmv1gi_04                        0x000056449db1e539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var index = word.count - 1\n    var isConsonant\
    \ = false\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if consonants.contains(char) {\n            if isConsonant\
    \ {\n                return closestVowel\n            }\n            isConsonant\
    \ = true\n        } else if vowels.contains(char) {\n            closestVowel\
    \ = String(char)\n        }\n        index -= 1\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpu0xdinry/tmpu0xdinry.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b0ad7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b0aa76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b0aa76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b0aa757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu0xdinry                        0x00005635a95785d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b0b0af6b460 __libc_start_main +
    245

    6    tmpu0xdinry                        0x00005635a9578219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n    for\
    \ (index, char) in word.enumerated() {\n        if consonants.contains(char) {\n\
    \            for (i, vowel) in vowels.enumerated() {\n                if word.contains(vowel)\
    \ && word.distance(from: word.startIndex, to: word.firstIndex(of: vowel)!) > index\
    \ && word.distance(from: word.startIndex, to: word.firstIndex(of: vowel)!) < closestVowelIndex\
    \ {\n                    closestVowel = String(vowel)\n                    closestVowelIndex\
    \ = word.distance(from: word.startIndex, to: word.firstIndex(of: vowel)!)\n  \
    \              }\n            }\n        }\n    }\n    return closestVowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpe8on3095/tmpe8on3095.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae928719c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae928410b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae928410988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae92840f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8on3095                        0x000055a002e048d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae928905460 __libc_start_main +
    245

    6    tmpe8on3095                        0x000055a002e04519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"AEIOUaeiou\"\n    let consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var vowelIndex = -1\n    var consonantIndex = -1\n\
    \    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = word[index]\n        if vowels.contains(char)\
    \ {\n            vowelIndex = i\n        } else if consonants.contains(char) {\n\
    \            consonantIndex = i\n        }\n        if vowelIndex != -1 && consonantIndex\
    \ != -1 && vowelIndex > consonantIndex {\n            result = String(char)\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp1q1_7lyz/tmp1q1_7lyz.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba540a54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba54074bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba54074b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba54074a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1q1_7lyz                        0x0000564367b68757 <unavailable> + 5975

    5    libc.so.6                          0x00002ba540c40460 __libc_start_main +
    245

    6    tmp1q1_7lyz                        0x0000564367b68399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = word.count - 1\n    var vowel_index = 0\n   \
    \ var consonant_index = 0\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            vowel_index\
    \ = index\n        } else if consonants.contains(char) {\n            consonant_index\
    \ = index\n            break\n        }\n        index -= 1\n    }\n    if vowel_index\
    \ > consonant_index {\n        result = String(word[word.index(word.startIndex,\
    \ offsetBy: vowel_index)])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpmc4usmgc/tmpmc4usmgc.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360428cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3603f83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3603f83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3603f827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmc4usmgc                        0x0000564e832415d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b3604478460 __libc_start_main +
    245

    6    tmpmc4usmgc                        0x0000564e83241219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var distance = Int.max\n    for i in 0..<word.count {\n \
    \       let index = word.index(word.startIndex, offsetBy: i)\n        let char\
    \ = String(word[index])\n        if vowels.contains(char) {\n            for j\
    \ in (0..<i).reversed() {\n                let index = word.index(word.startIndex,\
    \ offsetBy: j)\n                let char = String(word[index])\n             \
    \   if consonants.contains(char) {\n                    if i - j < distance {\n\
    \                        distance = i - j\n                        result = char\n\
    \                    }\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpfw78tje9/tmpfw78tje9.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5374306c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5373ffdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5373ffd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5373ffc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfw78tje9                        0x0000559dc83549e7 <unavailable> + 6631

    5    libc.so.6                          0x00002b53744f2460 __libc_start_main +
    245

    6    tmpfw78tje9                        0x0000559dc8354629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var distance = 0\n    for (index, char) in\
    \ word.enumerated() {\n        if vowels.contains(char) {\n            var distanceToRight\
    \ = 0\n            var distanceToLeft = 0\n            for (index2, char2) in\
    \ word.enumerated() {\n                if consonants.contains(char2) && index2\
    \ > index {\n                    distanceToRight += 1\n                }\n   \
    \             if consonants.contains(char2) && index2 < index {\n            \
    \        distanceToLeft += 1\n                }\n            }\n            if\
    \ distanceToRight > distanceToLeft {\n                if distanceToLeft > distance\
    \ {\n                    distance = distanceToLeft\n                    closestVowel\
    \ = String(char)\n                }\n            } else {\n                if\
    \ distanceToRight > distance {\n                    distance = distanceToRight\n\
    \                    closestVowel = String(char)\n                }\n        \
    \    }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpw83iiud4/tmpw83iiud4.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b539122bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5390f22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5390f22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5390f217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw83iiud4                        0x000055dd1f2a5049 <unavailable> + 8265

    5    libc.so.6                          0x00002b5391417460 __libc_start_main +
    245

    6    tmpw83iiud4                        0x000055dd1f2a42b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closest_vowel = \"\"\n    var closest_index = word.count\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            if index\
    \ > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy: index\
    \ - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closest_index {\n \
    \                       closest_index = index\n                        closest_vowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpmr_30ffj/tmpmr_30ffj.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8758de3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8758adab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8758ada988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8758ad97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmr_30ffj                        0x00005653158e77e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b8758fcf460 __libc_start_main +
    245

    6    tmpmr_30ffj                        0x00005653158e7429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closest_vowel = \"\"\n\
    \    var distance = word.count\n    for (index, char) in word.enumerated() {\n\
    \        if vowels.contains(String(char)) {\n            if index < distance {\n\
    \                distance = index\n                closest_vowel = String(char)\n\
    \            }\n        }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpu1e6molo/tmpu1e6molo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a5f915c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a5f60cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a5f60c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a5f60b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu1e6molo                        0x000055746989c7d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b8a5fb01460 __libc_start_main +
    245

    6    tmpu1e6molo                        0x000055746989c419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = -1\n    var consonant_index = -1\n    for i in (0..<word.count).reversed()\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = word[index]\n        if vowels.contains(char) {\n            vowel_index\
    \ = i\n        } else if consonants.contains(char) {\n            consonant_index\
    \ = i\n            break\n        }\n    }\n    if vowel_index == -1 || consonant_index\
    \ == -1 {\n        return \"\"\n    }\n    return String(word[word.index(word.startIndex,\
    \ offsetBy: vowel_index)])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpevv79ozh/tmpevv79ozh.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e5328fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e52f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e52f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e52f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevv79ozh                        0x0000556b21ce6927 <unavailable> + 6439

    5    libc.so.6                          0x00002b0e5347b460 __libc_start_main +
    245

    6    tmpevv79ozh                        0x0000556b21ce6569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = -1\n    var consonant_index = -1\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            vowel_index\
    \ = index\n        }\n        if consonants.contains(char) {\n            consonant_index\
    \ = index\n        }\n        if vowel_index > -1 && consonant_index > -1 {\n\
    \            if vowel_index > consonant_index {\n                return String(char)\n\
    \            }\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnd7rjlgp/tmpnd7rjlgp.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad47f232c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad47ef29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad47ef29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad47ef287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnd7rjlgp                        0x000055df3965a677 <unavailable> + 5751

    5    libc.so.6                          0x00002ad47f41e460 __libc_start_main +
    245

    6    tmpnd7rjlgp                        0x000055df3965a2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closest_vowel = \"\"\n    var vowel_index = 0\n    var consonant_index\
    \ = 0\n    var vowel_found = false\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            vowel_index = index\n   \
    \         vowel_found = true\n        }\n        if consonants.contains(char)\
    \ && vowel_found {\n            consonant_index = index\n            break\n \
    \       }\n    }\n    if vowel_found && consonant_index > vowel_index {\n    \
    \    closest_vowel = String(word[word.index(word.startIndex, offsetBy: vowel_index)])\n\
    \    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpqo8otjyr/tmpqo8otjyr.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf11093c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf10d8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf10d8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf10d897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqo8otjyr                        0x0000556e16f1d797 <unavailable> + 6039

    5    libc.so.6                          0x00002acf1127f460 __libc_start_main +
    245

    6    tmpqo8otjyr                        0x0000556e16f1d3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var vowel =\
    \ \"\"\n    var consonant = \"\"\n    for char in word.reversed() {\n        if\
    \ consonants.contains(String(char).lowercased()) {\n            consonant = String(char)\n\
    \            break\n        }\n    }\n    for char in word.reversed() {\n    \
    \    if vowels.contains(String(char).lowercased()) {\n            vowel = String(char)\n\
    \            break\n        }\n    }\n    if vowel == \"\" || consonant == \"\"\
    \ {\n        return \"\"\n    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpr9axm3gz/tmpr9axm3gz.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba369269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba368f60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba368f60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba368f5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9axm3gz                        0x000055c02df059d3 <unavailable> + 6611

    5    libc.so.6                          0x00002ba369455460 __libc_start_main +
    245

    6    tmpr9axm3gz                        0x000055c02df05409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = -1\n    var consonantIndex\
    \ = -1\n    var closestDistance = Int.max\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            vowelIndex = index\n    \
    \    } else if consonants.contains(char) {\n            consonantIndex = index\n\
    \        }\n        if vowelIndex != -1 && consonantIndex != -1 {\n          \
    \  let distance = consonantIndex - vowelIndex\n            if distance > 0 &&\
    \ distance < closestDistance {\n                closestDistance = distance\n \
    \               closestVowel = String(char)\n            }\n        }\n    }\n\
    \    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmph7dtxl1_/tmph7dtxl1_.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25ac6fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25ac3f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25ac3f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25ac3f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7dtxl1_                        0x0000557ef80f5677 <unavailable> + 5751

    5    libc.so.6                          0x00002b25ac8e8460 __libc_start_main +
    245

    6    tmph7dtxl1_                        0x0000557ef80f52b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = word.count - 1\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            result =\
    \ char\n            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6sc2vqyn/tmp6sc2vqyn.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c5b1dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c5aed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c5aed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c5aed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6sc2vqyn                        0x000055787fbac8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b9c5b3c7460 __libc_start_main +
    245

    6    tmp6sc2vqyn                        0x000055787fbac2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ vowel = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n    let word = word.lowercased()\n    for i in 0..<word.count {\n  \
    \      let index = word.index(word.startIndex, offsetBy: i)\n        if vowels.contains(String(word[index]))\
    \ {\n            vowel = String(word[index])\n            let index2 = word.index(word.startIndex,\
    \ offsetBy: i-1)\n            let index3 = word.index(word.startIndex, offsetBy:\
    \ i+1)\n            if consonants.contains(String(word[index2])) && consonants.contains(String(word[index3]))\
    \ {\n                return vowel\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmppkc5orln/tmppkc5orln.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3518950c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3518647b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3518647988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35186467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppkc5orln                        0x000055b8578f8877 <unavailable> + 6263

    5    libc.so.6                          0x00002b3518b3c460 __libc_start_main +
    245

    6    tmppkc5orln                        0x000055b8578f84b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   let distance = word.count - index\n            if distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestVowel\
    \ = String(char)\n            }\n        }\n    }\n    return closestVowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5242u0wu/tmp5242u0wu.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91d4045c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91d3d3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91d3d3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91d3d3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5242u0wu                        0x0000557c7f7bd8d3 <unavailable> + 6355

    5    libc.so.6                          0x00002b91d4231460 __libc_start_main +
    245

    6    tmp5242u0wu                        0x0000557c7f7bd309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices {\n     \
    \   if vowels.contains(word[i]) {\n            vowel = String(word[i])\n     \
    \       index = word.distance(from: word.startIndex, to: i)\n        }\n    }\n\
    \    if vowel == \"\" {\n        return \"\"\n    }\n    for i in (0..<index).reversed()\
    \ {\n        if consonants.contains(word[word.index(word.startIndex, offsetBy:\
    \ i)]) {\n            return vowel\n        }\n    }\n    return \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp726upurw/tmp726upurw.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b600e219c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b600df10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b600df10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b600df0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp726upurw                        0x000055b3c2560f9b <unavailable> + 8091

    5    libc.so.6                          0x00002b600e405460 __libc_start_main +
    245

    6    tmp726upurw                        0x000055b3c2560799 <unavailable> + 6041

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex\
    \ = 0\n    var vowelIndex = 0\n    var consonantIndex = 0\n    for i in 0..<word.count\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        if\
    \ vowels.contains(word[index]) {\n            vowelIndex = i\n            if consonantIndex\
    \ != 0 {\n                if vowelIndex - consonantIndex < closestVowelIndex -\
    \ closestConsonantIndex {\n                    closestVowelIndex = vowelIndex\n\
    \                    closestConsonantIndex = consonantIndex\n                \
    \    closestVowel = String(word[index])\n                }\n            }\n  \
    \      } else if consonants.contains(word[index]) {\n            consonantIndex\
    \ = i\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpjv53e5zl/tmpjv53e5zl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad025021c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad024d18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad024d18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad024d177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjv53e5zl                        0x0000560538049757 <unavailable> + 5975

    5    libc.so.6                          0x00002ad02520d460 __libc_start_main +
    245

    6    tmpjv53e5zl                        0x0000560538049399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n    for\
    \ (index, char) in word.enumerated() {\n        if vowels.contains(char) {\n \
    \           if index > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestVowelIndex {\n\
    \                        closestVowel = String(char)\n                       \
    \ closestVowelIndex = index\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp2n4f0s_2/tmp2n4f0s_2.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2569c0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2569902b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2569902988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25699017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2n4f0s_2                        0x0000560c4aa107e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b2569df7460 __libc_start_main +
    245

    6    tmp2n4f0s_2                        0x0000560c4aa10429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var vowel =\
    \ \"\"\n    var consonant = \"\"\n    var result = \"\"\n    for i in word.characters.reversed()\
    \ {\n        if vowels.contains(String(i)) {\n            vowel = String(i)\n\
    \        }\n        if consonants.contains(String(i)) {\n            consonant\
    \ = String(i)\n        }\n        if vowel != \"\" && consonant != \"\" {\n  \
    \          result = vowel\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpxafrvk_c.swift:22:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in word.characters.reversed() {\n           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var result =\
    \ \"\"\n    var vowelIndex = 0\n    var consonantIndex = 0\n    for i in 0..<word.count\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = String(word[index])\n        if vowels.contains(char) {\n           \
    \ vowelIndex = i\n        }\n        if consonants.contains(char) {\n        \
    \    consonantIndex = i\n        }\n        if vowelIndex > consonantIndex {\n\
    \            result = String(word[index])\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpgdl40scq/tmpgdl40scq.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b304a8b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b304a5a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b304a5a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b304a5a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgdl40scq                        0x000055f057471827 <unavailable> + 6183

    5    libc.so.6                          0x00002b304aa9c460 __libc_start_main +
    245

    6    tmpgdl40scq                        0x000055f057471469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closest_vowel = \"\"\n\
    \    var index = word.count - 1\n    var found_consonant = false\n    while index\
    \ >= 0 {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n\
    \        if vowels.contains(String(char)) {\n            if found_consonant {\n\
    \                closest_vowel = String(char)\n                break\n       \
    \     }\n        } else {\n            found_consonant = true\n        }\n   \
    \     index -= 1\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6tedy_qt/tmp6tedy_qt.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a8c961c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a8c658b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a8c658988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a8c6577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6tedy_qt                        0x000055f68b8548a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b1a8cb4d460 __libc_start_main +
    245

    6    tmp6tedy_qt                        0x000055f68b8542d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    var vowelFoundIndex\
    \ = 0\n    var consonantFoundIndex = 0\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            vowelFound = true\n     \
    \       vowelFoundIndex = index\n        }\n        if consonants.contains(char)\
    \ {\n            consonantFound = true\n            consonantFoundIndex = index\n\
    \        }\n        if vowelFound && consonantFound {\n            if vowelFoundIndex\
    \ > consonantFoundIndex {\n                vowelIndex = vowelFoundIndex\n    \
    \            consonantIndex = consonantFoundIndex\n                closestVowel\
    \ = String(char)\n            }\n            vowelFound = false\n            consonantFound\
    \ = false\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmphktjkmlj/tmphktjkmlj.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b863e687c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b863e37eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b863e37e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b863e37d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphktjkmlj                        0x000056037bc70f2d <unavailable> + 7981

    5    libc.so.6                          0x00002b863e873460 __libc_start_main +
    245

    6    tmphktjkmlj                        0x000056037bc702b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   var closestConsonant = \"\"\n    var vowelFound = false\n    var consonantFound\
    \ = false\n    for (index, char) in word.lowercased().reversed().enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            closestVowel = String(char)\n\
    \            closestVowelIndex = index\n            vowelFound = true\n      \
    \  }\n        if consonants.contains(String(char)) && vowelFound {\n         \
    \   closestConsonant = String(char)\n            closestConsonantIndex = index\n\
    \            consonantFound = true\n        }\n        if vowelFound && consonantFound\
    \ {\n            break\n        }\n    }\n    if vowelFound && consonantFound\
    \ && closestVowelIndex < closestConsonantIndex {\n        return closestVowel\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpw7y0fsb7/tmpw7y0fsb7.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac51fd21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac51fa18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac51fa18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac51fa177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7y0fsb7                        0x000055f2e1e4ed2b <unavailable> + 7467

    5    libc.so.6                          0x00002ac51ff0d460 __libc_start_main +
    245

    6    tmpw7y0fsb7                        0x000055f2e1e4e529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closestVowel = \"\"\n\
    \    var closestDistance = word.count\n    for (index, letter) in word.enumerated()\
    \ {\n        if vowels.contains(String(letter)) {\n            var distance =\
    \ 0\n            var isVowel = false\n            for i in index..<word.count\
    \ {\n                distance += 1\n                if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)])) {\n                    isVowel = true\n                    break\n\
    \                }\n            }\n            if !isVowel {\n               \
    \ for i in (0..<index).reversed() {\n                    distance += 1\n     \
    \               if vowels.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ i)])) {\n                        isVowel = true\n                        break\n\
    \                    }\n                }\n            }\n            if isVowel\
    \ && distance < closestDistance {\n                closestDistance = distance\n\
    \                closestVowel = String(letter)\n            }\n        }\n   \
    \ }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpl_vh7qot/tmpl_vh7qot.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c905d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c902c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c902c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c902c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_vh7qot                        0x00005582763a6d47 <unavailable> + 7495

    5    libc.so.6                          0x00002b2c907be460 __libc_start_main +
    245

    6    tmpl_vh7qot                        0x00005582763a6989 <unavailable> + 6537

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closest_vowel = \"\"\n    var closest_vowel_index = 0\n    var closest_vowel_distance\
    \ = 0\n    var vowel_index = 0\n    var consonant_index = 0\n    var vowel_distance\
    \ = 0\n    var vowel_found = false\n    for i in 0..<word.count {\n        let\
    \ index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            vowel_index = i\n           \
    \ vowel_found = true\n        }\n        if consonants.contains(char) && vowel_found\
    \ {\n            consonant_index = i\n            vowel_distance = consonant_index\
    \ - vowel_index\n            if closest_vowel_distance == 0 || vowel_distance\
    \ < closest_vowel_distance {\n                closest_vowel_distance = vowel_distance\n\
    \                closest_vowel_index = vowel_index\n            }\n          \
    \  vowel_found = false\n        }\n    }\n    if closest_vowel_distance > 0 {\n\
    \        let index = word.index(word.startIndex, offsetBy: closest_vowel_index)\n\
    \        closest_vowel = String(word[index])\n    }\n    return closest_vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp0z6vb1ba/tmp0z6vb1ba.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe4ab56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe4a84db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe4a84d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe4a84c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0z6vb1ba                        0x000055c39cab2717 <unavailable> + 5911

    5    libc.so.6                          0x00002abe4ad42460 __libc_start_main +
    245

    6    tmp0z6vb1ba                        0x000055c39cab2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var distance = word.count\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            if index\
    \ > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy: index\
    \ - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < distance {\n      \
    \                  distance = index\n                        result = String(char)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpyv5nox14/tmpyv5nox14.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40a5a7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40a5772b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40a5772988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40a57717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyv5nox14                        0x0000559084aa27e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b40a5c67460 __libc_start_main +
    245

    6    tmpyv5nox14                        0x0000559084aa2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var result = \"\"\n    var\
    \ index = word.count - 1\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            result =\
    \ char\n            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6sc2vqyn/tmp6sc2vqyn.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c5b1dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c5aed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c5aed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c5aed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6sc2vqyn                        0x000055787fbac8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b9c5b3c7460 __libc_start_main +
    245

    6    tmp6sc2vqyn                        0x000055787fbac2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closest_vowel = \"\"\n    var closest_vowel_index = 0\n    var closest_consonant_index\
    \ = 0\n    var closest_consonant_index_2 = 0\n    var vowel_index = 0\n    var\
    \ consonant_index = 0\n    var consonant_index_2 = 0\n    for char in word.characters\
    \ {\n        if vowels.contains(String(char)) {\n            vowel_index = word.characters.index(of:\
    \ char)!\n            if vowel_index > closest_vowel_index && vowel_index < closest_consonant_index\
    \ {\n                closest_vowel_index = vowel_index\n                closest_vowel\
    \ = String(char)\n            }\n        } else if consonants.contains(String(char))\
    \ {\n            consonant_index = word.characters.index(of: char)!\n        \
    \    if consonant_index > closest_consonant_index {\n                closest_consonant_index_2\
    \ = closest_consonant_index\n                closest_consonant_index = consonant_index\n\
    \            }\n        }\n    }\n    if closest_vowel_index > closest_consonant_index_2\
    \ && closest_vowel_index < closest_consonant_index {\n        return closest_vowel\n\
    \    } else {\n        return \"\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpqye8xyse.swift:26:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpqye8xyse.swift:28:58:\
    \ error: cannot assign value of type 'String.Index' to type 'Int'\n          \
    \  vowel_index = word.characters.index(of: char)!\n                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    /tmp/tmpqye8xyse.swift:34:62: error: cannot assign value of type 'String.Index'\
    \ to type 'Int'\n            consonant_index = word.characters.index(of: char)!\n\
    \                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var vowel = \"\"\n    var\
    \ index = 0\n    for i in word.indices {\n        if vowels.contains(String(word[i]))\
    \ {\n            vowel = String(word[i])\n            index = word.distance(from:\
    \ word.startIndex, to: i)\n        }\n    }\n    if index == 0 || index == word.count\
    \ - 1 {\n        return \"\"\n    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmptkpv50z3/tmptkpv50z3.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7696907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76965feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76965fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76965fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptkpv50z3                        0x0000555a88ec7ab3 <unavailable> + 6835

    5    libc.so.6                          0x00002b7696af3460 __libc_start_main +
    245

    6    tmptkpv50z3                        0x0000555a88ec74e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var consonant = \"\"\n    var closest_vowel = \"\"\
    \n    for char in word.characters {\n        if vowels.containsString(String(char))\
    \ {\n            vowel = String(char)\n        }\n        if consonants.containsString(String(char))\
    \ {\n            consonant = String(char)\n        }\n        if vowel != \"\"\
    \ && consonant != \"\" {\n            closest_vowel = vowel\n            break\n\
    \        }\n    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpbaifu8r1.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpbaifu8r1.swift:23:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpbaifu8r1.swift:26:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closest_vowel\
    \ = \"\"\n    var closest_index = 0\n    var index = 0\n    for char in word.lowercased()\
    \ {\n        if vowels.contains(String(char)) {\n            if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) {\n                if index > closest_index {\n    \
    \                closest_vowel = String(char)\n                    closest_index\
    \ = index\n                }\n            }\n        }\n        index += 1\n \
    \   }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:158: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b0052bcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00528c1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b00528c1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b00528c113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b00528c0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b00529f4b0d <unavailable> + 2693901

    6    tmpnswx5wzf                        0x000055ddf952ed2b <unavailable> + 11563

    7    tmpnswx5wzf                        0x000055ddf952dabb <unavailable> + 6843

    8    libc.so.6                          0x00002b0052db6460 __libc_start_main +
    245

    9    tmpnswx5wzf                        0x000055ddf952d3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in (0..<word.count).reversed()\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: i)]\n     \
    \   if consonants.contains(char) {\n            index = i\n            break\n\
    \        }\n    }\n    for i in (index+1..<word.count).reversed() {\n        let\
    \ char = word[word.index(word.startIndex, offsetBy: i)]\n        if vowels.contains(char)\
    \ {\n            vowel = String(char)\n            break\n        }\n    }\n \
    \   return vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpt2fjto8z/tmpt2fjto8z.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2563614c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b256330bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b256330b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b256330a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2fjto8z                        0x00005601783d2927 <unavailable> + 6439

    5    libc.so.6                          0x00002b2563800460 __libc_start_main +
    245

    6    tmpt2fjto8z                        0x00005601783d2569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   var index = 0\n    for letter in word {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            if index > closestVowelIndex {\n                closestVowel\
    \ = String(letter)\n                closestVowelIndex = index\n            }\n\
    \        } else if consonants.contains(String(letter).lowercased()) {\n      \
    \      if index < closestVowelIndex && index > closestConsonantIndex {\n     \
    \           closestConsonantIndex = index\n            }\n        }\n        index\
    \ += 1\n    }\n    if closestVowelIndex > closestConsonantIndex {\n        return\
    \ closestVowel\n    } else {\n        return \"\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpwq9hgul8/tmpwq9hgul8.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e6ca7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e6c774b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e6c774988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e6c7737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwq9hgul8                        0x0000559f750af853 <unavailable> + 6227

    5    libc.so.6                          0x00002b9e6cc69460 __libc_start_main +
    245

    6    tmpwq9hgul8                        0x0000559f750af289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   for (index, char) in word.lowercased().reversed().enumerated() {\n       \
    \ if vowels.contains(String(char)) {\n            closestVowel = String(char)\n\
    \            closestVowelIndex = index\n        }\n        if consonants.contains(String(char))\
    \ && closestVowelIndex != 0 {\n            closestConsonantIndex = index\n   \
    \         break\n        }\n    }\n    if closestVowelIndex == 0 || closestConsonantIndex\
    \ == 0 {\n        return \"\"\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpk2zv5ypz/tmpk2zv5ypz.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41b8b04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41b87fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41b87fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41b87fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2zv5ypz                        0x000055f350dee2b9 <unavailable> + 8889

    5    libc.so.6                          0x00002b41b8cf0460 __libc_start_main +
    245

    6    tmpk2zv5ypz                        0x000055f350ded529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowelIndex = i\n        }\n        if consonants.contains(char)\
    \ {\n            consonantIndex = i\n        }\n        if vowelIndex > consonantIndex\
    \ {\n            closestVowel = char\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpvg703532/tmpvg703532.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba964f94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba964c8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba964c8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba964c8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvg703532                        0x000055a653730923 <unavailable> + 6435

    5    libc.so.6                          0x00002ba965180460 __libc_start_main +
    245

    6    tmpvg703532                        0x000055a653730359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    var index = word.count -\
    \ 1\n    while index >= 0 {\n        if vowels.contains(word[index]) {\n     \
    \       result = String(word[index])\n            break\n        }\n        index\
    \ -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp8m0_35l_.swift:21:28: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if vowels.contains(word[index])\
    \ {\n                           ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp8m0_35l_.swift:22:29: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            result = String(word[index])\n                            ^~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex\
    \ = 0\n    var closestConsonant = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    for letter in word {\n        if vowels.contains(letter) {\n      \
    \      vowelIndex = word.firstIndex(of: letter)!.encodedOffset\n            if\
    \ vowelIndex > closestConsonantIndex && vowelIndex < closestVowelIndex {\n   \
    \             closestVowel = String(letter)\n                closestVowelIndex\
    \ = vowelIndex\n            }\n        } else if consonants.contains(letter) {\n\
    \            consonantIndex = word.firstIndex(of: letter)!.encodedOffset\n   \
    \         if consonantIndex > closestVowelIndex && consonantIndex > closestConsonantIndex\
    \ {\n                closestConsonant = String(letter)\n                closestConsonantIndex\
    \ = consonantIndex\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmprwjqa55j/tmprwjqa55j.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3157b11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3157808b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3157808988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31578077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprwjqa55j                        0x000055fd9dd926c7 <unavailable> + 5831

    5    libc.so.6                          0x00002b3157cfd460 __libc_start_main +
    245

    6    tmprwjqa55j                        0x000055fd9dd92309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    var vowel_index = 0\n  \
    \  var consonant_index = 0\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(char) {\n            vowel_index = index\n   \
    \     } else {\n            consonant_index = index\n        }\n        if vowel_index\
    \ < consonant_index {\n            result = String(char)\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2lyo76xk.swift:21:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var index = 0\n    var vowelFound = false\n    var consonantFound =\
    \ false\n    while index < word.count {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            vowelFound\
    \ = true\n            vowelIndex = index\n        }\n        if consonants.contains(char)\
    \ {\n            consonantFound = true\n            consonantIndex = index\n \
    \       }\n        if vowelFound && consonantFound {\n            if vowelIndex\
    \ > consonantIndex {\n                closestVowel = String(char)\n          \
    \  }\n            vowelFound = false\n            consonantFound = false\n   \
    \     }\n        index += 1\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpof5k9byw/tmpof5k9byw.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abac44fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abac41f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abac41f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abac41f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpof5k9byw                        0x0000556c4f532e8d <unavailable> + 7821

    5    libc.so.6                          0x00002abac46e8460 __libc_start_main +
    245

    6    tmpof5k9byw                        0x0000556c4f532219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = -1\n    var consonant_index = -1\n    var vowel_found\
    \ = false\n    var consonant_found = false\n    for i in (0..<word.count).reversed()\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = word[index]\n        if vowels.contains(char) {\n            vowel_index\
    \ = i\n            vowel_found = true\n        }\n        if consonants.contains(char)\
    \ {\n            consonant_index = i\n            consonant_found = true\n   \
    \     }\n        if vowel_found && consonant_found {\n            break\n    \
    \    }\n    }\n    if vowel_index > consonant_index {\n        return String(word[word.index(word.startIndex,\
    \ offsetBy: vowel_index)])\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpp6rgoz94/tmpp6rgoz94.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af64d0c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af64cdb7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af64cdb7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af64cdb67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp6rgoz94                        0x0000564e6999f927 <unavailable> + 6439

    5    libc.so.6                          0x00002af64d2ac460 __libc_start_main +
    245

    6    tmpp6rgoz94                        0x0000564e6999f569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closest_vowel = \"\"\n    var vowel_index = -1\n    var consonant_index\
    \ = -1\n    for (index, char) in word.enumerated() {\n        if vowels.contains(char)\
    \ {\n            vowel_index = index\n        }\n        if consonants.contains(char)\
    \ {\n            consonant_index = index\n        }\n        if vowel_index >\
    \ -1 && consonant_index > -1 {\n            if consonant_index > vowel_index {\n\
    \                closest_vowel = String(char)\n            }\n        }\n    }\n\
    \    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpwgd3fsc6/tmpwgd3fsc6.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf932cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf9023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf9023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf90227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgd3fsc6                        0x0000556731ed4677 <unavailable> + 5751

    5    libc.so.6                          0x00002aaaf9518460 __libc_start_main +
    245

    6    tmpwgd3fsc6                        0x0000556731ed42b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var closestIndex = word.count\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            if index\
    \ > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy: index\
    \ - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestIndex {\n  \
    \                      closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp0cr4r6q1/tmp0cr4r6q1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98732b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9872faeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9872fae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9872fad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0cr4r6q1                        0x0000557c9842e7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b98734a3460 __libc_start_main +
    245

    6    tmp0cr4r6q1                        0x0000557c9842e429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var closestIndex = word.count\n    for (index, char)\
    \ in word.enumerated() {\n        if consonants.contains(char) {\n           \
    \ for i in index..<word.count {\n                if vowels.contains(word[i]) {\n\
    \                    if i - index < closestIndex {\n                        closestIndex\
    \ = i - index\n                        closestVowel = String(word[i])\n      \
    \              }\n                    break\n                }\n            }\n\
    \        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphpvqbhfg.swift:24:36: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ vowels.contains(word[i]) {\n                                   ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmphpvqbhfg.swift:27:47:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                        closestVowel = String(word[i])\n\
    \                                              ^~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices.reversed()\
    \ {\n        if vowels.contains(word[i]) {\n            vowel = String(word[i])\n\
    \            index = word.distance(from: word.startIndex, to: i)\n        } else\
    \ if consonants.contains(word[i]) {\n            if index > 0 && index < word.count\
    \ - 1 {\n                return vowel\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpe7r0npvp/tmpe7r0npvp.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41ea1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41e9ea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41e9ea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41e9ea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe7r0npvp                        0x000055cb0a6c82c9 <unavailable> + 8905

    5    libc.so.6                          0x00002b41ea39c460 __libc_start_main +
    245

    6    tmpe7r0npvp                        0x000055cb0a6c7539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowelIndex = i\n        }\n        if consonants.contains(char)\
    \ {\n            consonantIndex = i\n        }\n        if vowelIndex > consonantIndex\
    \ {\n            closestVowel = char\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpvg703532/tmpvg703532.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba964f94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba964c8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba964c8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba964c8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvg703532                        0x000055a653730923 <unavailable> + 6435

    5    libc.so.6                          0x00002ba965180460 __libc_start_main +
    245

    6    tmpvg703532                        0x000055a653730359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    for (index, char) in word.enumerated()\
    \ {\n        if consonants.contains(String(char).lowercased()) {\n           \
    \ for (index2, char2) in word.enumerated() {\n                if vowels.contains(String(char2).lowercased())\
    \ {\n                    if index2 > index {\n                        if closestVowelIndex\
    \ == 0 {\n                            closestVowelIndex = index2\n           \
    \                 closestVowel = String(char2)\n                        } else\
    \ if index2 < closestVowelIndex {\n                            closestVowelIndex\
    \ = index2\n                            closestVowel = String(char2)\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpdegj849n/tmpdegj849n.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbba4a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbba199b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbba199988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbba1987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdegj849n                        0x0000557e2b53e7d7 <unavailable> + 6103

    5    libc.so.6                          0x00002abbba68e460 __libc_start_main +
    245

    6    tmpdegj849n                        0x0000557e2b53e419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var result =\
    \ \"\"\n    var vowel_index = 0\n    var consonant_index = 0\n    var vowel_count\
    \ = 0\n    var consonant_count = 0\n    var vowel_flag = false\n    var consonant_flag\
    \ = false\n    for i in word.characters.indices {\n        if vowels.contains(String(word[i]).lowercased())\
    \ {\n            vowel_count += 1\n            if vowel_flag == false {\n    \
    \            vowel_index = i\n                vowel_flag = true\n            }\n\
    \        }\n        if consonants.contains(String(word[i]).lowercased()) {\n \
    \           consonant_count += 1\n            if consonant_flag == false {\n \
    \               consonant_index = i\n                consonant_flag = true\n \
    \           }\n        }\n    }\n    if vowel_count == 0 || consonant_count ==\
    \ 0 {\n        return result\n    }\n    if vowel_index > consonant_index {\n\
    \        result = String(word[vowel_index])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp7fiab3pl.swift:26:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in word.characters.indices {\n              \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7fiab3pl.swift:30:31:\
    \ error: cannot assign value of type 'DefaultIndices<String>.Element' (aka 'String.Index')\
    \ to type 'Int'\n                vowel_index = i\n                           \
    \   ^\n/tmp/tmp7fiab3pl.swift:37:35: error: cannot assign value of type 'DefaultIndices<String>.Element'\
    \ (aka 'String.Index') to type 'Int'\n                consonant_index = i\n  \
    \                                ^\n/tmp/tmp7fiab3pl.swift:46:25: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        result = String(word[vowel_index])\n                        ^~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var vowel_index = -1\n   \
    \ for i in 0..<word.count {\n        let index = word.index(word.startIndex, offsetBy:\
    \ i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowel_index = i\n        }\n    }\n    if vowel_index == -1 {\n\
    \        return \"\"\n    }\n    var closest_vowel = \"\"\n    var closest_distance\
    \ = word.count\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            let distance = vowel_index - i\n            if distance > 0 &&\
    \ distance < closest_distance {\n                closest_distance = distance\n\
    \                closest_vowel = char\n            }\n        }\n    }\n    return\
    \ closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnb3f1wty/tmpnb3f1wty.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b535887dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5358574b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5358574988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53585737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb3f1wty                        0x0000556a6934b827 <unavailable> + 6183

    5    libc.so.6                          0x00002b5358a69460 __libc_start_main +
    245

    6    tmpnb3f1wty                        0x0000556a6934b469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var consonant = \"\"\n    var result = \"\"\n    for\
    \ char in word.characters {\n        if vowels.containsString(String(char)) {\n\
    \            vowel = String(char)\n        }\n        if consonants.containsString(String(char))\
    \ {\n            consonant = String(char)\n        }\n        if vowel != \"\"\
    \ && consonant != \"\" {\n            result = vowel\n            break\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpp5zi0ldq.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpp5zi0ldq.swift:23:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpp5zi0ldq.swift:26:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel:\
    \ String = \"\"\n    var closestDistance: Int = 0\n    var distance: Int = 0\n\
    \    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let letter = String(word[index])\n        if vowels.contains(letter)\
    \ {\n            if i > 0 {\n                let prevIndex = word.index(word.startIndex,\
    \ offsetBy: i - 1)\n                let prevLetter = String(word[prevIndex])\n\
    \                if consonants.contains(prevLetter) {\n                    distance\
    \ = i\n                    if closestDistance == 0 {\n                       \
    \ closestDistance = distance\n                        closestVowel = letter\n\
    \                    } else if distance < closestDistance {\n                \
    \        closestDistance = distance\n                        closestVowel = letter\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpy_tek08e/tmpy_tek08e.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54abe0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54abb04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54abb04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54abb037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy_tek08e                        0x00005646ffdf2827 <unavailable> + 6183

    5    libc.so.6                          0x00002b54abff9460 __libc_start_main +
    245

    6    tmpy_tek08e                        0x00005646ffdf2469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    var previous_char\
    \ = \"\"\n    while index >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: index)])\n        if vowels.contains(char) {\n            if previous_char\
    \ != \"\" && consonants.contains(previous_char) {\n                result = char\n\
    \                break\n            }\n        }\n        previous_char = char\n\
    \        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpu_aulut8/tmpu_aulut8.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba14975ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba149455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba149455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1494547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_aulut8                        0x0000555711c087a3 <unavailable> + 6051

    5    libc.so.6                          0x00002ba14994a460 __libc_start_main +
    245

    6    tmpu_aulut8                        0x0000555711c081d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel:\
    \ String = \"\"\n    var closestDistance: Int = word.count\n    for i in 0..<word.count\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = String(word[index])\n        if vowels.contains(char) {\n           \
    \ var distance: Int = 0\n            for j in (i+1)..<word.count {\n         \
    \       let index = word.index(word.startIndex, offsetBy: j)\n               \
    \ let char = String(word[index])\n                if consonants.contains(char)\
    \ {\n                    distance = j - i\n                    break\n       \
    \         }\n            }\n            if distance > 0 && distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestVowel\
    \ = char\n            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6959xhva/tmp6959xhva.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56db392c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56db089b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56db089988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56db0887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6959xhva                        0x000056545c48d827 <unavailable> + 6183

    5    libc.so.6                          0x00002b56db57e460 __libc_start_main +
    245

    6    tmp6959xhva                        0x000056545c48d469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelCount = 0\n    var consonantCount = 0\n    var vowelFound\
    \ = false\n    var consonantFound = false\n    for i in 0..<word.count {\n   \
    \     let index = word.index(word.startIndex, offsetBy: i)\n        let char =\
    \ String(word[index])\n        if vowels.contains(char) {\n            vowelFound\
    \ = true\n            vowelCount += 1\n            vowelIndex = i\n        }\n\
    \        if consonants.contains(char) {\n            consonantFound = true\n \
    \           consonantCount += 1\n            consonantIndex = i\n        }\n \
    \       if vowelFound && consonantFound {\n            if vowelCount == 1 && consonantCount\
    \ == 1 {\n                closestVowel = char\n            } else if vowelCount\
    \ == 1 && consonantCount > 1 {\n                if consonantIndex - vowelIndex\
    \ == 1 {\n                    closestVowel = char\n                }\n       \
    \     } else if vowelCount > 1 && consonantCount == 1 {\n                if vowelIndex\
    \ - consonantIndex == 1 {\n                    closestVowel = char\n         \
    \       }\n            } else if vowelCount > 1 && consonantCount > 1 {\n    \
    \            if vowelIndex - consonantIndex == 1 {\n                    closestVowel\
    \ = char\n                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpbmw_2igo/tmpbmw_2igo.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b620014bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61ffe42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61ffe42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61ffe417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbmw_2igo                        0x0000562745626807 <unavailable> + 6151

    5    libc.so.6                          0x00002b6200337460 __libc_start_main +
    245

    6    tmpbmw_2igo                        0x0000562745626359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = -1\n    var consonant_index = -1\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            vowel_index\
    \ = index\n        }\n        if consonants.contains(char) {\n            consonant_index\
    \ = index\n        }\n        if vowel_index != -1 && consonant_index != -1 {\n\
    \            if vowel_index > consonant_index {\n                return String(char)\n\
    \            }\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmppedx0w2z/tmppedx0w2z.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af849ddfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af849ad6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af849ad6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af849ad57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppedx0w2z                        0x0000560e7a600677 <unavailable> + 5751

    5    libc.so.6                          0x00002af849fcb460 __libc_start_main +
    245

    6    tmppedx0w2z                        0x0000560e7a6002b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    //\
    \ TODO: Implement this function\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_ofrnago/tmp_ofrnago.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f9fb47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f9f83eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f9f83e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f9f83d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ofrnago                        0x0000556bd60c0307 <unavailable> + 4871

    5    libc.so.6                          0x00002b3f9fd33460 __libc_start_main +
    245

    6    tmp_ofrnago                        0x0000556bd60bff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    var index = word.count -\
    \ 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpzu19aqc3/tmpzu19aqc3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad952e61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad952b58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad952b58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad952b577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzu19aqc3                        0x00005590705d37e3 <unavailable> + 6115

    5    libc.so.6                          0x00002ad95304d460 __libc_start_main +
    245

    6    tmpzu19aqc3                        0x00005590705d3219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex = 0\n  \
    \  for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        if vowels.contains(word[index]) {\n            vowelIndex\
    \ = i\n        }\n        if consonants.contains(word[index]) {\n            consonantIndex\
    \ = i\n        }\n        if vowelIndex > consonantIndex {\n            closestVowel\
    \ = String(word[index])\n            break\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp8hhm15et/tmp8hhm15et.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c44c3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c44934b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c44934988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c449337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8hhm15et                        0x00005621b846b757 <unavailable> + 5975

    5    libc.so.6                          0x00002b7c44e29460 __libc_start_main +
    245

    6    tmp8hhm15et                        0x00005621b846b399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var index = word.count - 1\n    var isConsonant = false\n    while\
    \ index >= 0 {\n        let letter = word[word.index(word.startIndex, offsetBy:\
    \ index)]\n        if consonants.contains(String(letter).lowercased()) {\n   \
    \         if isConsonant {\n                break\n            }\n           \
    \ isConsonant = true\n        } else if vowels.contains(String(letter).lowercased())\
    \ {\n            closestVowel = String(letter)\n            isConsonant = false\n\
    \        }\n        index -= 1\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpefjk1c57/tmpefjk1c57.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92ebc9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92eb995b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92eb995988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92eb9947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefjk1c57                        0x000055a81e68f6f7 <unavailable> + 5879

    5    libc.so.6                          0x00002b92ebe8a460 __libc_start_main +
    245

    6    tmpefjk1c57                        0x000055a81e68f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n    \
    \    let char = word[word.index(word.startIndex, offsetBy: index)]\n        if\
    \ consonants.contains(char) {\n            if index + 1 < word.count {\n     \
    \           let nextChar = word[word.index(word.startIndex, offsetBy: index +\
    \ 1)]\n                if vowels.contains(nextChar) {\n                    result\
    \ = String(nextChar)\n                    break\n                }\n         \
    \   }\n        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_fzaw6i3/tmp_fzaw6i3.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af49fe66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af49fb5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af49fb5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af49fb5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_fzaw6i3                        0x00005650868eaa1b <unavailable> + 6683

    5    libc.so.6                          0x00002af4a0052460 __libc_start_main +
    245

    6    tmp_fzaw6i3                        0x00005650868ea219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var closest_vowel = \"\"\n\
    \    var vowel_index = 0\n    var consonant_index = 0\n    var i = word.count\
    \ - 1\n    while i >= 0 {\n        let char = String(word[word.index(word.startIndex,\
    \ offsetBy: i)])\n        if vowels.contains(char) {\n            vowel_index\
    \ = i\n        } else {\n            consonant_index = i\n            break\n\
    \        }\n        i -= 1\n    }\n    if vowel_index > consonant_index {\n  \
    \      closest_vowel = String(word[word.index(word.startIndex, offsetBy: vowel_index)])\n\
    \    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpm9yywbyk/tmpm9yywbyk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b142fd5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b142fa52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b142fa52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b142fa517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9yywbyk                        0x0000559c4df5f697 <unavailable> + 5783

    5    libc.so.6                          0x00002b142ff47460 __libc_start_main +
    245

    6    tmpm9yywbyk                        0x0000559c4df5f2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestIndex = word.count\n    for (index,\
    \ letter) in word.enumerated() {\n        if consonants.contains(letter) {\n \
    \           for (vowelIndex, vowel) in word[index..<word.count].enumerated() {\n\
    \                if vowels.contains(vowel) {\n                    if vowelIndex\
    \ < closestIndex {\n                        closestIndex = vowelIndex\n      \
    \                  closestVowel = String(vowel)\n                    }\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpror28yki.swift:23:40: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \            for (vowelIndex, vowel) in word[index..<word.count].enumerated()\
    \ {\n                                       ^~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var closestIndex = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   if index > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy:\
    \ index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestIndex {\n  \
    \                      closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpwwaxe7rl/tmpwwaxe7rl.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2b4cfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2b49f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2b49f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2b49f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwaxe7rl                        0x000055704e2687e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ba2b4ee6460 __libc_start_main +
    245

    6    tmpwwaxe7rl                        0x000055704e268429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013325
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var last_consonant = \"\"\n    var last_vowel = \"\
    \"\n    for char in word {\n        if vowels.contains(char) {\n            last_vowel\
    \ = String(char)\n        } else if consonants.contains(char) {\n            last_consonant\
    \ = String(char)\n        }\n        if last_consonant != \"\" && last_vowel !=\
    \ \"\" {\n            result = last_vowel\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmppb76n0zn/tmppb76n0zn.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9aeccfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9ae9c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9ae9c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9ae9c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppb76n0zn                        0x000055e732f10527 <unavailable> + 5415

    5    libc.so.6                          0x00002af9aeebb460 __libc_start_main +
    245

    6    tmppb76n0zn                        0x000055e732f10169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"AEIOUaeiou\"\n    let consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    var index\
    \ = word.count - 1\n    while index >= 0 {\n        let character = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if !vowelFound {\n            vowelIndex = vowels.index(of:\
    \ character)\n            if vowelIndex != nil {\n                vowelFound =\
    \ true\n            }\n        }\n        if !consonantFound {\n            consonantIndex\
    \ = consonants.index(of: character)\n            if consonantIndex != nil {\n\
    \                consonantFound = true\n            }\n        }\n        if vowelFound\
    \ && consonantFound {\n            closestVowel = String(character)\n        \
    \    break\n        }\n        index -= 1\n    }\n    return closestVowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_382kzqp.swift:28:33: error: cannot assign value of type 'String.Index?'\
    \ to type 'Int'\n            vowelIndex = vowels.index(of: character)\n      \
    \                   ~~~~~~~^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_382kzqp.swift:29:27:\
    \ warning: comparing non-optional value of type 'Int' to 'nil' always returns\
    \ true\n            if vowelIndex != nil {\n               ~~~~~~~~~~ ^  ~~~\n\
    /tmp/tmp_382kzqp.swift:34:41: error: cannot assign value of type 'String.Index?'\
    \ to type 'Int'\n            consonantIndex = consonants.index(of: character)\n\
    \                             ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_382kzqp.swift:35:31:\
    \ warning: comparing non-optional value of type 'Int' to 'nil' always returns\
    \ true\n            if consonantIndex != nil {\n               ~~~~~~~~~~~~~~\
    \ ^  ~~~\n"
  stdout: ''
  timestamp: 1660013326
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    var index = 0\n    var vowel_index = 0\n    var consonant_index\
    \ = 0\n    var vowel_found = false\n    var consonant_found = false\n    for char\
    \ in word.characters {\n        if vowels.containsString(String(char)) {\n   \
    \         vowel_found = true\n            vowel_index = index\n        }\n   \
    \     if consonants.containsString(String(char)) {\n            consonant_found\
    \ = true\n            consonant_index = index\n        }\n        if vowel_found\
    \ && consonant_found {\n            if vowel_index > consonant_index {\n     \
    \           result = String(char)\n            }\n            vowel_found = false\n\
    \            consonant_found = false\n        }\n        index += 1\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpxsjfq0ya.swift:25:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpxsjfq0ya.swift:26:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpxsjfq0ya.swift:30:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = 0\n    var consonant_index = 0\n    for i in (0..<word.count).reversed()\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = word[index]\n        if vowels.contains(char) {\n            vowel_index\
    \ = i\n        } else if consonants.contains(char) {\n            consonant_index\
    \ = i\n            break\n        }\n    }\n    if vowel_index > consonant_index\
    \ {\n        return String(word[word.index(word.startIndex, offsetBy: vowel_index)])\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpp3q4d20y/tmpp3q4d20y.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0bb51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0bb215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0bb215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0bb2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3q4d20y                        0x000055de45162927 <unavailable> + 6439

    5    libc.so.6                          0x00002ac0bb70a460 __libc_start_main +
    245

    6    tmpp3q4d20y                        0x000055de45162569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   var consonantIndex = 0\n    var vowelIndex = 0\n    var vowelFound = false\n\
    \    var consonantFound = false\n    for (index, char) in word.lowercased().reversed().enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            vowelFound = true\n\
    \            vowelIndex = index\n        }\n        if consonants.contains(String(char))\
    \ {\n            consonantFound = true\n            consonantIndex = index\n \
    \       }\n        if vowelFound && consonantFound {\n            if vowelIndex\
    \ > closestVowelIndex && consonantIndex > closestConsonantIndex {\n          \
    \      closestVowelIndex = vowelIndex\n                closestConsonantIndex =\
    \ consonantIndex\n                closestVowel = String(char)\n            }\n\
    \            vowelFound = false\n            consonantFound = false\n        }\n\
    \    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpin1xnbfk/tmpin1xnbfk.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13bf6cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13bf3c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13bf3c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13bf3c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpin1xnbfk                        0x000055e10ce1a8e7 <unavailable> + 6375

    5    libc.so.6                          0x00002b13bf8b9460 __libc_start_main +
    245

    6    tmpin1xnbfk                        0x000055e10ce1a529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   var closestConsonant = \"\"\n    var wordArray = Array(word)\n    for (index,\
    \ letter) in wordArray.enumerated() {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            closestVowel = String(letter)\n            closestVowelIndex\
    \ = index\n            for (index, letter) in wordArray.enumerated() {\n     \
    \           if consonants.contains(String(letter).lowercased()) && index > closestVowelIndex\
    \ {\n                    closestConsonant = String(letter)\n                 \
    \   closestConsonantIndex = index\n                    break\n               \
    \ }\n            }\n            if closestConsonantIndex > closestVowelIndex {\n\
    \                return closestVowel\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmprmv9hmmm/tmprmv9hmmm.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fbd0c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fbcdb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fbcdb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fbcdb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprmv9hmmm                        0x0000564096e1d887 <unavailable> + 6279

    5    libc.so.6                          0x00002b2fbd2ae460 __libc_start_main +
    245

    6    tmprmv9hmmm                        0x0000564096e1d4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var\
    \ closestVowel = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex\
    \ = 0\n    for (index, character) in word.characters.enumerated() {\n        if\
    \ consonants.contains(String(character)) {\n            closestConsonantIndex\
    \ = index\n            for (index2, character2) in word.characters.enumerated()\
    \ {\n                if vowels.contains(String(character2)) {\n              \
    \      if index2 > closestConsonantIndex && index2 > closestVowelIndex {\n   \
    \                     closestVowel = String(character2)\n                    \
    \    closestVowelIndex = index2\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpmxc9m1em.swift:22:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, character) in word.characters.enumerated()\
    \ {\n                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmxc9m1em.swift:25:46: error: 'characters' is unavailable:\
    \ Please use String directly\n            for (index2, character2) in word.characters.enumerated()\
    \ {\n                                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var lastConsonant = \"\"\n    var lastVowel\
    \ = \"\"\n    for char in word {\n        if vowels.contains(char) {\n       \
    \     lastVowel = String(char)\n            if lastConsonant != \"\" {\n     \
    \           closestVowel = lastVowel\n            }\n        } else if consonants.contains(char)\
    \ {\n            lastConsonant = String(char)\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_xhdukbi/tmp_xhdukbi.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4dfa93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4df78ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4df78a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4df7897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_xhdukbi                        0x000055a408dfd96b <unavailable> + 6507

    5    libc.so.6                          0x00002af4dfc7f460 __libc_start_main +
    245

    6    tmp_xhdukbi                        0x000055a408dfd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closest_vowel\
    \ = \"\"\n    var closest_vowel_index = 0\n    var closest_vowel_distance = 0\n\
    \    for (index, char) in word.lowercased().reversed().enumerated() {\n      \
    \  if vowels.contains(String(char)) {\n            closest_vowel = String(char)\n\
    \            closest_vowel_index = index\n            break\n        }\n    }\n\
    \    for (index, char) in word.lowercased().reversed().enumerated() {\n      \
    \  if consonants.contains(String(char)) && index < closest_vowel_index {\n   \
    \         closest_vowel_distance = closest_vowel_index - index\n            break\n\
    \        }\n    }\n    if closest_vowel_distance == 0 {\n        return \"\"\n\
    \    }\n    return closest_vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpy3pj_sw9/tmpy3pj_sw9.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54cb1d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54caec7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54caec7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54caec67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3pj_sw9                        0x0000562edd7b8af3 <unavailable> + 6899

    5    libc.so.6                          0x00002b54cb3bc460 __libc_start_main +
    245

    6    tmpy3pj_sw9                        0x0000562edd7b8529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   var isVowel = false\n    var isConsonant = false\n    for (index, char) in\
    \ word.lowercased().reversed().enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            isVowel = true\n            closestVowel = String(char)\n   \
    \         closestVowelIndex = index\n        }\n        if consonants.contains(String(char))\
    \ {\n            isConsonant = true\n            closestConsonantIndex = index\n\
    \        }\n        if isVowel && isConsonant {\n            if closestVowelIndex\
    \ - closestConsonantIndex == 1 {\n                return closestVowel\n      \
    \      }\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpsz257rdp/tmpsz257rdp.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b733e4ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b733e1e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b733e1e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b733e1e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsz257rdp                        0x000056311289eaf3 <unavailable> + 6899

    5    libc.so.6                          0x00002b733e6d7460 __libc_start_main +
    245

    6    tmpsz257rdp                        0x000056311289e529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var closestVowel = \"\"\n    var vowelDistance = 0\n    for i in 0..<word.count\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        let\
    \ char = String(word[index])\n        if vowels.contains(char) {\n           \
    \ let distance = word.count - i\n            if vowelDistance == 0 {\n       \
    \         vowelDistance = distance\n                closestVowel = char\n    \
    \        } else if distance < vowelDistance {\n                vowelDistance =\
    \ distance\n                closestVowel = char\n            }\n        }\n  \
    \  }\n    if vowelDistance == 0 {\n        return \"\"\n    }\n    for i in 0..<vowelDistance\
    \ {\n        let index = word.index(word.startIndex, offsetBy: word.count - i\
    \ - 1)\n        let char = String(word[index])\n        if consonants.contains(char)\
    \ {\n            return closestVowel\n        }\n    }\n    return \"\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpiwvf3w9m/tmpiwvf3w9m.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd7fdd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd7facab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd7faca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd7fac97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiwvf3w9m                        0x000055df1d710923 <unavailable> + 6435

    5    libc.so.6                          0x00002acd7ffbf460 __libc_start_main +
    245

    6    tmpiwvf3w9m                        0x000055df1d710359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel_index = 0\n    var consonant_index = 0\n    var result = \"\"\n\
    \    for char in word.characters {\n        if vowels.containsString(String(char))\
    \ {\n            vowel_index = word.characters.indexOf(char)!\n        }\n   \
    \     if consonants.containsString(String(char)) {\n            consonant_index\
    \ = word.characters.indexOf(char)!\n            if vowel_index > consonant_index\
    \ {\n                result = String(char)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpo0r5xacv.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpo0r5xacv.swift:23:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpo0r5xacv.swift:24:43: error: value\
    \ of type 'String' has no member 'indexOf'\n            vowel_index = word.characters.indexOf(char)!\n\
    \                          ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpo0r5xacv.swift:26:23:\
    \ error: value of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpo0r5xacv.swift:27:47: error:\
    \ value of type 'String' has no member 'indexOf'\n            consonant_index\
    \ = word.characters.indexOf(char)!\n                              ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013327
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var result = \"\"\n    for i in (0..<word.count).reversed() {\n        let\
    \ index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            if i == word.count - 1 {\n  \
    \              return \"\"\n            }\n            let nextIndex = word.index(word.startIndex,\
    \ offsetBy: i + 1)\n            let nextChar = String(word[nextIndex])\n     \
    \       if consonants.contains(nextChar) {\n                return char\n    \
    \        }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpz0ic_u1p/tmpz0ic_u1p.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15438b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15435aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15435aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15435a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0ic_u1p                        0x000055d7e5badb03 <unavailable> + 6915

    5    libc.so.6                          0x00002b1543a9f460 __libc_start_main +
    245

    6    tmpz0ic_u1p                        0x000055d7e5bad539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    var index = word.count -\
    \ 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpzu19aqc3/tmpzu19aqc3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad952e61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad952b58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad952b58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad952b577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzu19aqc3                        0x00005590705d37e3 <unavailable> + 6115

    5    libc.so.6                          0x00002ad95304d460 __libc_start_main +
    245

    6    tmpzu19aqc3                        0x00005590705d3219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013326
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var\
    \ result = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let\
    \ consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n    var consonant_count = 0\n    var vowel_count = 0\n    var vowel_index\
    \ = 0\n    var consonant_index = 0\n    for i in 0..<word.count {\n        let\
    \ index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            vowel_count += 1\n          \
    \  vowel_index = i\n        } else if consonants.contains(char) {\n          \
    \  consonant_count += 1\n            consonant_index = i\n        }\n    }\n \
    \   if consonant_count > 1 && vowel_count > 0 {\n        if vowel_index > consonant_index\
    \ {\n            let index = word.index(word.startIndex, offsetBy: vowel_index)\n\
    \            result = String(word[index])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpjc9188ji/tmpjc9188ji.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61aeb24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61ae81bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61ae81b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61ae81a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjc9188ji                        0x0000555b8c439827 <unavailable> + 6183

    5    libc.so.6                          0x00002b61aed10460 __libc_start_main +
    245

    6    tmpjc9188ji                        0x0000555b8c439469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.indices.reversed()\
    \ {\n        if consonants.contains(word[i]) {\n            index = word.index(after:\
    \ i)\n            break\n        }\n    }\n    for i in index..<word.count {\n\
    \        if vowels.contains(word[i]) {\n            vowel = String(word[i])\n\
    \            break\n        }\n    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmptwar4nye.swift:23:26: error: cannot assign value of type 'String.Index'\
    \ to type 'Int'\n            index = word.index(after: i)\n                  \
    \  ~~~~~^~~~~~~~~~~~~~~\n/tmp/tmptwar4nye.swift:28:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if vowels.contains(word[i]) {\n                           ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptwar4nye.swift:29:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            vowel = String(word[i])\n         \
    \                  ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013327
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var vowel =\
    \ \"\"\n    var index = 0\n    var found = false\n    for letter in word.reversed()\
    \ {\n        if consonants.contains(String(letter).lowercased()) {\n         \
    \   if found {\n                break\n            }\n        } else if vowels.contains(String(letter).lowercased())\
    \ {\n            vowel = String(letter)\n            found = true\n        }\n\
    \        index += 1\n    }\n    if found {\n        return vowel\n    }\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp0ztlkxat/tmp0ztlkxat.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d0fa5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d0f751b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d0f751988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d0f7507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ztlkxat                        0x000055838a2319d3 <unavailable> + 6611

    5    libc.so.6                          0x00002b0d0fc46460 __libc_start_main +
    245

    6    tmp0ztlkxat                        0x000055838a231409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var vowel = \"\"\n    var consonant = \"\"\n    var closest_vowel = \"\"\
    \n    var closest_distance = 0\n    for char in word.characters {\n        if\
    \ vowels.containsString(String(char)) {\n            vowel = String(char)\n  \
    \      }\n        if consonants.containsString(String(char)) {\n            consonant\
    \ = String(char)\n        }\n        if vowel != \"\" && consonant != \"\" {\n\
    \            let distance = word.characters.distanceOf(vowel, from: consonant)\n\
    \            if distance > closest_distance {\n                closest_distance\
    \ = distance\n                closest_vowel = vowel\n            }\n         \
    \   vowel = \"\"\n            consonant = \"\"\n        }\n    }\n    return closest_vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpldb14ypx.swift:23:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpldb14ypx.swift:24:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpldb14ypx.swift:27:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpldb14ypx.swift:31:44: error:\
    \ value of type 'String' has no member 'distanceOf'\n            let distance\
    \ = word.characters.distanceOf(vowel, from: consonant)\n                     \
    \      ~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013327
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = \"aeiouAEIOU\"\n    var closestVowel = \"\"\n    var index = word.count\
    \ - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            closestVowel\
    \ = String(char)\n            break\n        }\n        index -= 1\n    }\n  \
    \  return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpz7jw9a1i/tmpz7jw9a1i.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab033b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab030afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab030af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab030ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7jw9a1i                        0x0000561b882aa7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002aab035a4460 __libc_start_main +
    245

    6    tmpz7jw9a1i                        0x0000561b882aa219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013327
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word:\
    \ \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\
    \n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word:\
    \ \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var closestVowel\
    \ = \"\"\n    var closestVowelIndex = 0\n    var closestConsonantIndex = 0\n \
    \   var closestConsonant = \"\"\n    var vowelFound = false\n    var consonantFound\
    \ = false\n    for (index, letter) in word.enumerated() {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            vowelFound = true\n            closestVowel = String(letter)\n\
    \            closestVowelIndex = index\n        }\n        if consonants.contains(String(letter).lowercased())\
    \ && vowelFound {\n            consonantFound = true\n            closestConsonant\
    \ = String(letter)\n            closestConsonantIndex = index\n        }\n   \
    \     if vowelFound && consonantFound {\n            break\n        }\n    }\n\
    \    if closestVowelIndex < closestConsonantIndex {\n        return closestVowel\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp8pwjc6x_/tmp8pwjc6x_.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a14c37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a1492eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a1492e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a1492d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8pwjc6x_                        0x000056308e9247d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b2a14e23460 __libc_start_main +
    245

    6    tmp8pwjc6x_                        0x000056308e924419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013327
