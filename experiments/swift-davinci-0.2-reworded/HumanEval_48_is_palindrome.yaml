name: HumanEval_48_is_palindrome
language: swift
prompt: "\n/// Checks if given string is a palindrome\n/// >>> is_palindrome(text:\
  \ \"\")\n/// true\n/// >>> is_palindrome(text: \"aba\")\n/// true\n/// >>> is_palindrome(text:\
  \ \"aaaaa\")\n/// true\n/// >>> is_palindrome(text: \"zbcd\")\n/// false\nfunc is_palindrome(text:\
  \ String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_palindrome(text: \"\") == true)\nassert(is_palindrome(text:\
  \ \"aba\") == true)\nassert(is_palindrome(text: \"aaaaa\") == true)\nassert(is_palindrome(text:\
  \ \"zbcd\") == false)\nassert(is_palindrome(text: \"xywyx\") == true)\nassert(is_palindrome(text:\
  \ \"xywyz\") == false)\nassert(is_palindrome(text: \"xywzx\") == false)"
completions: ["    if text.count <= 1 {\n        return true\n    }\n    if text.first!\
    \ == text.last! {\n        return is_palindrome(text: String(text.dropFirst().dropLast()))\n\
    \    }\n    return false", "    let characters = Array(text)\n    for i in 0..<characters.count/2\
    \ {\n        if characters[i] != characters[characters.count - i - 1] {\n    \
    \        return false\n        }\n    }\n    return true", '    return text ==
    String(text.reversed())', "    let length = text.count\n    if length == 0 {\n\
    \        return true\n    }\n    let half = length / 2\n    for i in 0..<half\
    \ {\n        let j = length - i - 1\n        if text[i] != text[j] {\n       \
    \     return false\n        }\n    }\n    return true", "    let chars = Array(text)\n\
    \    let count = chars.count\n    for i in 0..<count/2 {\n        if chars[i]\
    \ != chars[count-i-1] {\n            return false\n        }\n    }\n    return\
    \ true", "    let lowercase = text.lowercased()\n    return lowercase == String(lowercase.reversed())",
  '    return text == String(text.reversed())', '    return text == String(text.reversed())',
  '    return text == String(text.reversed())', '    return text == String(text.reversed())',
  "    let chars = Array(text)\n    let count = chars.count\n    for i in 0..<count/2\
    \ {\n        if chars[i] != chars[count-i-1] {\n            return false\n   \
    \     }\n    }\n    return true", '    return text == String(text.reversed())',
  '    return text == String(text.reversed())', '    return text == String(text.reversed())',
  '    return text == String(text.reversed())', "    let chars = Array(text)\n   \
    \ for i in 0..<chars.count/2 {\n        if chars[i] != chars[chars.count - i -\
    \ 1] {\n            return false\n        }\n    }\n    return true", '    return
    text == String(text.reversed())', '    return text == String(text.reversed())',
  '    return text == String(text.reversed())', '    return text == String(text.reversed())']
stop_tokens:
- "\n}"
