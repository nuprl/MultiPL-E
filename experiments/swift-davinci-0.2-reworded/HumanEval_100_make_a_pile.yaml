name: HumanEval_100_make_a_pile
language: swift
prompt: "\n/// Given a positive integer n, you have to make a pile of n levels of\
  \ stones.\n/// The first level has n stones.\n/// The number of stones in the next\
  \ level is:\n/// - the next odd number if n is odd.\n/// - the next even number\
  \ if n is even.\n/// Return the number of stones in each level in an array, where\
  \ element at index\n/// i represents the number of stones in the level (i+1).\n\
  /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
  \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
  \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
  \ 18, 20, 22])"
completions: ["    var result = [Int]()\n    var current = n\n    while current >\
    \ 0 {\n        result.append(current)\n        current = current % 2 == 0 ? current\
    \ + 1 : current + 2\n    }\n    return result", "    var result = [Int]()\n  \
    \  var next = n\n    while next > 0 {\n        result.append(next)\n        next\
    \ = next % 2 == 0 ? next + 1 : next + 2\n    }\n    return result", "    var result\
    \ = [Int]()\n    var current = n\n    while current > 0 {\n        result.append(current)\n\
    \        current = current % 2 == 0 ? current + 1 : current + 2\n    }\n    return\
    \ result", "    var result = [Int]()\n    var i = n\n    while i > 0 {\n     \
    \   result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result", "    var result = [Int]()\n    var i = n\n    while i > 0 {\n     \
    \   result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result", "    var result = [Int]()\n    var num = n\n    while num > 0 {\n \
    \       result.append(num)\n        num = num % 2 == 0 ? num + 1 : num + 2\n \
    \   }\n    return result", "    var result = [Int]()\n    var current = n\n  \
    \  while current > 0 {\n        result.append(current)\n        current = current\
    \ % 2 == 0 ? current + 1 : current + 2\n    }\n    return result", "    var result\
    \ = [n]\n    var next = n\n    while next > 1 {\n        next = next % 2 == 0\
    \ ? next / 2 : (next + 1) / 2\n        result.append(next)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var i = n\n    while i > 0 {\n     \
    \   result.append(i)\n        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return\
    \ result", "    var result = [Int]()\n    var current = n\n    while current >\
    \ 0 {\n        result.append(current)\n        current = current % 2 == 0 ? current\
    \ + 1 : current + 2\n    }\n    return result", "    var result = [Int]()\n  \
    \  var i = n\n    while i > 0 {\n        result.append(i)\n        i = i % 2 ==\
    \ 0 ? i + 1 : i + 2\n    }\n    return result", "    var result = [Int]()\n  \
    \  var current = n\n    while current > 0 {\n        result.append(current)\n\
    \        current = current % 2 == 0 ? current + 1 : current + 2\n    }\n    return\
    \ result", "    var result = [Int]()\n    var stones = n\n    while stones > 0\
    \ {\n        result.append(stones)\n        if stones % 2 == 0 {\n           \
    \ stones -= 1\n        } else {\n            stones -= 2\n        }\n    }\n \
    \   return result", "    var result = [Int]()\n    var current = n\n    while\
    \ current > 0 {\n        result.append(current)\n        current = current % 2\
    \ == 0 ? current + 1 : current + 2\n    }\n    return result", "    var stones\
    \ = [Int]()\n    var current = n\n    while current > 0 {\n        stones.append(current)\n\
    \        if current % 2 == 0 {\n            current += 1\n        } else {\n \
    \           current += 2\n        }\n    }\n    return stones", "    var result\
    \ = [Int]()\n    var current = n\n    while current > 0 {\n        result.append(current)\n\
    \        current = current % 2 == 0 ? current + 1 : current + 2\n    }\n    return\
    \ result", "    var result = [Int]()\n    var current = n\n    while current >\
    \ 0 {\n        result.append(current)\n        current = current % 2 == 0 ? current\
    \ + 1 : current + 2\n    }\n    return result", "    var result = [n]\n    var\
    \ current = n\n    while current > 1 {\n        if current % 2 == 0 {\n      \
    \      current = current / 2\n        } else {\n            current = (current\
    \ + 1) / 2\n        }\n        result.append(current)\n    }\n    return result",
  "    var result = [Int]()\n    var i = n\n    while i > 0 {\n        result.append(i)\n\
    \        i = i % 2 == 0 ? i + 1 : i + 2\n    }\n    return result", "    var result\
    \ = [Int]()\n    var number = n\n    while number > 0 {\n        result.append(number)\n\
    \        if number % 2 == 0 {\n            number -= 1\n        } else {\n   \
    \         number -= 2\n        }\n    }\n    return result.reversed()"]
stop_tokens:
- "\n}"
