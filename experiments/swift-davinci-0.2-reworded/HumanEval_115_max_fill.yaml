name: HumanEval_115_max_fill
language: swift
prompt: "\n/// You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n/// and\
  \ all buckets have the same capacity.\n/// Your task is to use the buckets to empty\
  \ the wells.\n/// Output the number of times you need to lower the buckets.\n///\
  \ Example 1:\n/// >>> max_fill(grid: [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\
  \ capacity: 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(grid: [[0, 0, 1, 1], [0,\
  \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2)\n/// 5\n/// Example 3:\n///\
  \ >>> max_fill(grid: [[0, 0, 0], [0, 0, 0]], capacity: 5)\n/// 0\n/// Constraints:\n\
  /// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1 <=\
  \ grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity <= 10\n\
  func max_fill(grid: [[Int]], capacity: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(max_fill(grid: [[0, 0, 1, 0], [0, 1, 0,\
  \ 0], [1, 1, 1, 1]], capacity: 1) == 6)\nassert(max_fill(grid: [[0, 0, 1, 1], [0,\
  \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2) == 5)\nassert(max_fill(grid:\
  \ [[0, 0, 0], [0, 0, 0]], capacity: 5) == 0)\nassert(max_fill(grid: [[1, 1, 1, 1],\
  \ [1, 1, 1, 1]], capacity: 2) == 4)\nassert(max_fill(grid: [[1, 1, 1, 1], [1, 1,\
  \ 1, 1]], capacity: 9) == 2)"
completions: ["    var grid = grid\n    var count = 0\n    var filled = 0\n    var\
    \ i = 0\n    while i < grid.count {\n        var j = 0\n        while j < grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                filled += 1\n         \
    \       grid[i][j] = 0\n            }\n            j += 1\n        }\n       \
    \ if filled == capacity {\n            filled = 0\n            count += 1\n  \
    \      }\n        i += 1\n    }\n    return count", "    var grid = grid\n   \
    \ var count = 0\n    while true {\n        var isEmpty = true\n        for i in\
    \ 0..<grid.count {\n            for j in 0..<grid[i].count {\n               \
    \ if grid[i][j] == 1 {\n                    isEmpty = false\n                \
    \    grid[i][j] = 0\n                    count += 1\n                }\n     \
    \       }\n        }\n        if isEmpty {\n            break\n        }\n   \
    \     for i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n  \
    \              if grid[i][j] == 0 {\n                    grid[i][j] = 1\n    \
    \            }\n            }\n        }\n    }\n    return count", "    var grid\
    \ = grid\n    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var grid = grid\n    var count = 0\n  \
    \  var row = 0\n    while row < grid.count {\n        var col = 0\n        while\
    \ col < grid[row].count {\n            if grid[row][col] == 1 {\n            \
    \    count += 1\n                var bucket = capacity\n                while\
    \ bucket > 0 {\n                    if row < grid.count && grid[row][col] == 1\
    \ {\n                        grid[row][col] = 0\n                        bucket\
    \ -= 1\n                    }\n                    row += 1\n                }\n\
    \                row -= 1\n            }\n            col += 1\n        }\n  \
    \      row += 1\n    }\n    return count", "    var grid = grid\n    var count\
    \ = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n \
    \           if grid[i][j] == 1 {\n                count += 1\n               \
    \ fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n        }\n\
    \    }\n    return count", "    var grid = grid\n    var count = 0\n    for i\
    \ in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                count += 1\n                fill(grid: &grid, i: i,\
    \ j: j, capacity: capacity)\n            }\n        }\n    }\n    return count",
  "    var buckets = [Int](repeating: 0, count: grid[0].count)\n    var count = 0\n\
    \    for row in grid {\n        for (i, well) in row.enumerated() {\n        \
    \    if well == 1 {\n                if buckets[i] < capacity {\n            \
    \        buckets[i] += 1\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count", "    var grid = grid\n  \
    \  var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      for k in i..<grid.count {\n                    if grid[k][j] == 1 {\n \
    \                       grid[k][j] = 0\n                    } else {\n       \
    \                 break\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return count", "    var count = 0\n    var max = 0\n\
    \    for row in grid {\n        for cell in row {\n            if cell == 1 {\n\
    \                max += 1\n            }\n        }\n    }\n    while count <\
    \ max {\n        for row in grid {\n            for cell in row {\n          \
    \      if cell == 1 {\n                    count += 1\n                }\n   \
    \         }\n        }\n    }\n    return count", "    var grid = grid\n    var\
    \ count = 0\n    while true {\n        var filled = false\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    filled = true\n                    grid[i][j] = 0\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        if !filled {\n            break\n        }\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 0 {\n                    grid[i][j] = 1\n                }\n            }\n\
    \        }\n    }\n    return count", "    var buckets = [Int](repeating: 0, count:\
    \ grid[0].count)\n    var count = 0\n    for row in grid {\n        for (index,\
    \ well) in row.enumerated() {\n            if well == 1 {\n                buckets[index]\
    \ += 1\n            }\n        }\n        count += fill_buckets(buckets: &buckets,\
    \ capacity: capacity)\n    }\n    return count", "    var grid = grid\n    var\
    \ count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                grid[i][j] = 0\n      \
    \          count += 1\n                var k = i\n                while k < grid.count\
    \ && capacity > 0 {\n                    if grid[k][j] == 1 {\n              \
    \          grid[k][j] = 0\n                        capacity -= 1\n           \
    \         }\n                    k += 1\n                }\n            }\n  \
    \      }\n    }\n    return count", "    var grid = grid\n    var count = 0\n\
    \    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n       \
    \     if grid[i][j] == 1 {\n                count += 1\n                for k\
    \ in 0..<capacity {\n                    if i+k < grid.count {\n             \
    \           grid[i+k][j] = 0\n                    }\n                }\n     \
    \       }\n        }\n    }\n    return count", "    var max_fill = 0\n    var\
    \ buckets = [Int](repeating: 0, count: grid[0].count)\n    for row in grid {\n\
    \        for (i, well) in row.enumerated() {\n            if well == 1 {\n   \
    \             buckets[i] += 1\n            }\n        }\n        max_fill += fill_buckets(buckets:\
    \ &buckets, capacity: capacity)\n    }\n    return max_fill", "    var grid =\
    \ grid\n    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var depth = 0\n    var buckets = 0\n  \
    \  for row in grid {\n        for cell in row {\n            if cell == 1 {\n\
    \                depth += 1\n            }\n        }\n    }\n    buckets = depth\
    \ / capacity\n    if depth % capacity != 0 {\n        buckets += 1\n    }\n  \
    \  return buckets", "    var grid = grid\n    var count = 0\n    while true {\n\
    \        var filled = false\n        for i in 0..<grid.count {\n            for\
    \ j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n           \
    \         filled = true\n                    grid[i][j] = 0\n                \
    \    if i > 0 {\n                        grid[i - 1][j] = min(grid[i - 1][j] +\
    \ 1, capacity)\n                    }\n                    if i < grid.count -\
    \ 1 {\n                        grid[i + 1][j] = min(grid[i + 1][j] + 1, capacity)\n\
    \                    }\n                    if j > 0 {\n                     \
    \   grid[i][j - 1] = min(grid[i][j - 1] + 1, capacity)\n                    }\n\
    \                    if j < grid[i].count - 1 {\n                        grid[i][j\
    \ + 1] = min(grid[i][j + 1] + 1, capacity)\n                    }\n          \
    \      }\n            }\n        }\n        if !filled {\n            break\n\
    \        }\n        count += 1\n    }\n    return count", "    var result = 0\n\
    \    var currentCapacity = capacity\n    for i in 0..<grid.count {\n        for\
    \ j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n               \
    \ if currentCapacity == 0 {\n                    currentCapacity = capacity\n\
    \                    result += 1\n                }\n                currentCapacity\
    \ -= 1\n            }\n        }\n    }\n    return result", "    var count =\
    \ 0\n    var max = 0\n    for row in grid {\n        for item in row {\n     \
    \       if item == 1 {\n                count += 1\n            }\n        }\n\
    \        if count > max {\n            max = count\n        }\n        count =\
    \ 0\n    }\n    return max * capacity", "    var grid = grid\n    var count =\
    \ 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n   \
    \         if grid[i][j] == 1 {\n                count += 1\n                fill(grid:\
    \ &grid, i: i, j: j, capacity: capacity)\n            }\n        }\n    }\n  \
    \  return count"]
stop_tokens:
- "\n}"
