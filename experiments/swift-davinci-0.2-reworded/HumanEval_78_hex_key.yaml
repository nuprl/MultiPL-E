name: HumanEval_78_hex_key
language: swift
prompt: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n/// digits that are\
  \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
  \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n/// So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may assume\
  \ the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F are\
  \ always uppercase.\n/// Examples:\n/// >>> hex_key(num: \"AB\")\n/// 1\n/// >>>\
  \ hex_key(num: \"1077E\")\n/// 2\n/// >>> hex_key(num: \"ABED1A33\")\n/// 4\n///\
  \ >>> hex_key(num: \"123456789ABCDEF0\")\n/// 6\n/// >>> hex_key(num: \"2020\")\n\
  /// 2\nfunc hex_key(num: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
  \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
  \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
  \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
completions: ["    let hexDigits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes\
    \ = [2, 3, 5, 7, 11, 13]\n    var count = 0\n    for digit in num {\n        if\
    \ primes.contains(hexDigits.firstIndex(of: String(digit))!) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    let hex = [\"0\", \"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"\
    D\", \"E\", \"F\"]\n    let primes = [2, 3, 5, 7, 11, 13]\n    var count = 0\n\
    \    for i in num {\n        if primes.contains(hex.firstIndex(of: String(i))!)\
    \ {\n            count += 1\n        }\n    }\n    return count", "    let primes\
    \ = [2, 3, 5, 7, 11, 13]\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n \
    \   var count = 0\n    for char in num {\n        if primes.contains(hex.firstIndex(of:\
    \ String(char))!) {\n            count += 1\n        }\n    }\n    return count",
  "    let hexDigits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primeHexDigits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for digit\
    \ in num {\n        if primeHexDigits.contains(String(digit)) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    let primes = [\"2\", \"3\",\
    \ \"5\", \"7\", \"B\", \"D\"]\n    return num.filter { primes.contains($0) }.count",
  "    let hex = num.uppercased()\n    let primes = [\"2\", \"3\", \"5\", \"7\", \"\
    B\", \"D\"]\n    var count = 0\n    for i in hex {\n        if primes.contains(String(i))\
    \ {\n            count += 1\n        }\n    }\n    return count", "    let primes\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    return num.filter { primes.contains($0)\
    \ }.count", "    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    var count = 0\n    for char in num {\n        if let\
    \ index = hex.firstIndex(of: String(char)) {\n            if primes.contains(index)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  "    let primes = [2, 3, 5, 7, 11, 13]\n    let hex = [\"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\"]\n    var count = 0\n    for c in num {\n        if let index = hex.firstIndex(of:\
    \ String(c)) {\n            if primes.contains(index) {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count", "    let hexDigits\
    \ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    let primes = [2,\
    \ 3, 5, 7, 11, 13]\n    var count = 0\n    for char in num {\n        let digit\
    \ = Int(String(char), radix: 16)\n        if primes.contains(hexDigits[digit!])\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for i in num {\n        if i == \"2\" || i == \"3\" || i == \"5\" ||\
    \ i == \"7\" || i == \"B\" || i == \"D\" {\n            count += 1\n        }\n\
    \    }\n    return count", "    let hexDigits = [\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"\
    F\"]\n    let primeHexDigits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n  \
    \  var count = 0\n    for digit in num {\n        if primeHexDigits.contains(String(digit))\
    \ {\n            count += 1\n        }\n    }\n    return count", '    return
    0', "    let hexDigits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\
    7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primeHexDigits\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for digit\
    \ in num {\n        if primeHexDigits.contains(String(digit)) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    let hexDigits = [\"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\"]\n    let primeHexDigits = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"]\n    var count = 0\n    for char in num {\n        if primeHexDigits.contains(String(char))\
    \ {\n            count += 1\n        }\n    }\n    return count", "    let hexPrimes\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var count = 0\n    for char\
    \ in num {\n        if hexPrimes.contains(String(char)) {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    let hexDigits = [\"0\", \"1\",\
    \ \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\"]\n    let primeHexDigits = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"]\n    var count = 0\n    for digit in num {\n        if primeHexDigits.contains(String(digit))\
    \ {\n            count += 1\n        }\n    }\n    return count", "    let hex\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5, 7, 11, 13]\n\
    \    var count = 0\n    for c in num {\n        if let i = hex.firstIndex(of:\
    \ String(c)) {\n            if primes.contains(i) {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count", "    let hex = [\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"]\n    let primes = [2, 3, 5, 7, 11, 13]\n    var\
    \ count = 0\n    for char in num {\n        if primes.contains(hex.firstIndex(of:\
    \ String(char))!) {\n            count += 1\n        }\n    }\n    return count",
  "    let primes = [2, 3, 5, 7, 11, 13]\n    let hexDigits = [\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\"]\n    var count = 0\n    for char in num {\n        if let index\
    \ = hexDigits.firstIndex(of: String(char)) {\n            if primes.contains(index)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count"]
stop_tokens:
- "\n}"
