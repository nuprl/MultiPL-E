name: HumanEval_39_prime_fib
language: swift
prompt: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n/// >>>\
  \ prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
  \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
  \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
  \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n:\
  \ 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
completions: ["    var fibs = [2, 3]\n    var i = 2\n    while i < n {\n        let\
    \ next = fibs[i - 1] + fibs[i - 2]\n        if is_prime(n: next) {\n         \
    \   fibs.append(next)\n            i += 1\n        }\n    }\n    return fibs[n\
    \ - 1]", "    var fibs = [2, 3]\n    var i = 2\n    while i < n {\n        let\
    \ next = fibs[i - 1] + fibs[i - 2]\n        if is_prime(n: next) {\n         \
    \   fibs.append(next)\n            i += 1\n        }\n    }\n    return fibs[n\
    \ - 1]", "    var fib = [2, 3]\n    var i = 2\n    while i < n {\n        fib.append(fib[i-1]\
    \ + fib[i-2])\n        if is_prime(fib[i]) {\n            i += 1\n        }\n\
    \    }\n    return fib[n-1]", "    var fibs = [2, 3]\n    var i = 2\n    while\
    \ i < n {\n        fibs.append(fibs[i-1] + fibs[i-2])\n        if is_prime(fibs[i])\
    \ {\n            i += 1\n        }\n    }\n    return fibs[n-1]", "    var fib\
    \ = [Int]()\n    fib.append(2)\n    fib.append(3)\n    var i = 2\n    while fib.count\
    \ < n {\n        fib.append(fib[i-1] + fib[i-2])\n        i += 1\n    }\n    return\
    \ fib[n-1]", "    var fib = [2, 3]\n    var i = 2\n    while i < n {\n       \
    \ fib.append(fib[i-1] + fib[i-2])\n        i += 1\n    }\n    return fib[n-1]",
  "    var fib = [2, 3]\n    var i = 2\n    while i < n {\n        fib.append(fib[i-1]\
    \ + fib[i-2])\n        i += 1\n    }\n    return fib[n-1]", "    var fibs = [2,\
    \ 3]\n    var i = 2\n    while i < n {\n        let next = fibs[i - 1] + fibs[i\
    \ - 2]\n        if is_prime(n: next) {\n            fibs.append(next)\n      \
    \      i += 1\n        }\n    }\n    return fibs[n - 1]", "    var fib = [2, 3]\n\
    \    var i = 2\n    while i < n {\n        fib.append(fib[i-1] + fib[i-2])\n \
    \       if is_prime(fib[i]) {\n            i += 1\n        }\n    }\n    return\
    \ fib[n-1]", "    var fib = [2, 3]\n    var i = 2\n    while i < n {\n       \
    \ fib.append(fib[i-1] + fib[i-2])\n        i += 1\n    }\n    return fib[n-1]",
  "    var fibs = [2, 3]\n    var i = 2\n    while fibs.count < n {\n        let fib\
    \ = fibs[i - 1] + fibs[i - 2]\n        if is_prime(n: fib) {\n            fibs.append(fib)\n\
    \        }\n        i += 1\n    }\n    return fibs[n - 1]", "    var fib = [2,\
    \ 3]\n    var i = 2\n    while i < n {\n        fib.append(fib[i-1] + fib[i-2])\n\
    \        if is_prime(n: fib[i]) {\n            i += 1\n        }\n    }\n    return\
    \ fib[n-1]", "    var fib = [2, 3]\n    var i = 2\n    while i < n {\n       \
    \ fib.append(fib[i-1] + fib[i-2])\n        if is_prime(fib[i]) {\n           \
    \ i += 1\n        }\n    }\n    return fib[n-1]", "    var fib = [2, 3]\n    var\
    \ i = 2\n    while i < n {\n        fib.append(fib[i-1] + fib[i-2])\n        i\
    \ += 1\n    }\n    return fib[n-1]", "    var fib = [2, 3]\n    var i = 2\n  \
    \  while i < n {\n        fib.append(fib[i-1] + fib[i-2])\n        i += 1\n  \
    \  }\n    return fib[n-1]", "    var fib = [2, 3]\n    var i = 2\n    while i\
    \ < n {\n        fib.append(fib[i-1] + fib[i-2])\n        i += 1\n    }\n    return\
    \ fib[n-1]", "    var i = 0\n    var fib = 0\n    while i < n {\n        fib =\
    \ fibonacci(n: i)\n        if is_prime(n: fib) {\n            i += 1\n       \
    \ }\n    }\n    return fib", "    var fib = [2, 3]\n    var i = 2\n    while i\
    \ < n {\n        fib.append(fib[i-1] + fib[i-2])\n        if is_prime(fib[i])\
    \ {\n            i += 1\n        }\n    }\n    return fib[n-1]", "    var i =\
    \ 0\n    var j = 1\n    var k = 0\n    var count = 0\n    while count < n {\n\
    \        k = i + j\n        i = j\n        j = k\n        if is_prime(n: k) {\n\
    \            count += 1\n        }\n    }\n    return k", "    var fibs = [2,\
    \ 3]\n    var i = 2\n    while fibs.count < n {\n        let next = fibs[i - 1]\
    \ + fibs[i - 2]\n        if is_prime(n: next) {\n            fibs.append(next)\n\
    \        }\n        i += 1\n    }\n    return fibs[n - 1]"]
stop_tokens:
- "\n}"
