name: HumanEval_71_triangle_area
language: swift
prompt: "\n/// Given the lengths of the three sides of a triangle. Return the area\
  \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
  \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
  \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
  /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1, b:\
  \ 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\n\
  assert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8,\
  \ c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
  \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
  \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
  \ 2, b: 2, c: 10) == -1)"
completions: ["    let s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a)\
    \ * (s - b) * (s - c)))\n    return area.isNaN ? -1 : area", "    let s = (a +\
    \ b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n \
    \   if area > 0 {\n        return area\n    } else {\n        return -1\n    }",
  "    let s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b) *\
    \ (s - c)))\n    if area.isNaN {\n        return -1\n    }\n    return area",
  "    let s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b) *\
    \ (s - c)))\n    if area.isNaN {\n        return -1\n    }\n    return area",
  "    let s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b) *\
    \ (s - c)))\n    if area.isNaN {\n        return -1\n    }\n    return area",
  "    let s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b) *\
    \ (s - c)))\n    return area.isNaN ? -1 : area", "    let sides = [a, b, c].sorted()\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (Double(a) + Double(b)\
    \ + Double(c)) / 2\n        return sqrt(p * (p - Double(a)) * (p - Double(b))\
    \ * (p - Double(c)))\n    }\n    return -1", "    let sides = [a, b, c].sorted()\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = Double(a + b + c) /\
    \ 2\n        return sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n\
    \    }\n    return -1", "    if a + b > c && a + c > b && b + c > a {\n      \
    \  let s = (a + b + c) / 2\n        let area = sqrt(Double(s * (s - a) * (s -\
    \ b) * (s - c)))\n        return round(area * 100) / 100\n    }\n    return -1",
  "    let sides = [a, b, c].sorted()\n    if sides[0] + sides[1] > sides[2] {\n \
    \       let p = Double(a + b + c) / 2\n        return sqrt(p * (p - Double(a))\
    \ * (p - Double(b)) * (p - Double(c)))\n    }\n    return -1", "    let s = (a\
    \ + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n\
    \    return area.isNaN ? -1 : area", "    let s = (a + b + c) / 2\n    let area\
    \ = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n    return area.isNaN ? -1\
    \ : area", "    let sides = [a, b, c].sorted()\n    let a = Double(sides[0])\n\
    \    let b = Double(sides[1])\n    let c = Double(sides[2])\n    if a + b > c\
    \ {\n        let s = (a + b + c) / 2\n        let area = sqrt(s * (s - a) * (s\
    \ - b) * (s - c))\n        return Double(round(100 * area) / 100)\n    }\n   \
    \ return -1", "    if a + b > c && a + c > b && b + c > a {\n        let s = (a\
    \ + b + c) / 2\n        let area = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n\
    \        return round(area * 100) / 100\n    }\n    return -1", "    let sides\
    \ = [a, b, c].sorted()\n    if sides[0] + sides[1] > sides[2] {\n        let p\
    \ = (Double(a) + Double(b) + Double(c)) / 2\n        return sqrt(p * (p - Double(a))\
    \ * (p - Double(b)) * (p - Double(c)))\n    }\n    return -1", "    let s = (a\
    \ + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n\
    \    return area.isNaN ? -1 : area", "    let sides = [a, b, c].sorted()\n   \
    \ if sides[0] + sides[1] > sides[2] {\n        let p = (Double(a) + Double(b)\
    \ + Double(c)) / 2\n        return sqrt(p * (p - Double(a)) * (p - Double(b))\
    \ * (p - Double(c)))\n    }\n    return -1", "    if a + b > c && a + c > b &&\
    \ b + c > a {\n        let s = (a + b + c) / 2\n        let area = sqrt(Double(s\
    \ * (s - a) * (s - b) * (s - c)))\n        return Double(round(100 * area) / 100)\n\
    \    }\n    return -1", "    if a + b > c && a + c > b && b + c > a {\n      \
    \  let s = (a + b + c) / 2\n        let area = sqrt(Double(s * (s - a) * (s -\
    \ b) * (s - c)))\n        return Double(round(100 * area) / 100)\n    }\n    return\
    \ -1", "    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b +\
    \ c) / 2\n        let area = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n \
    \       return Double(round(100 * area) / 100)\n    }\n    return -1"]
stop_tokens:
- "\n}"
