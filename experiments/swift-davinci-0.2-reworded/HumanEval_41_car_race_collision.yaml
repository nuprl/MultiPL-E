name: HumanEval_41_car_race_collision
language: swift
prompt: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
  /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
  /// are driving right to left.   The two sets of cars start out being very far from\n\
  /// each other.  All cars move in the same speed.  Two cars are said to collide\n\
  /// when a car that's moving left to right hits a car that's moving right to left.\n\
  /// However, the cars are infinitely sturdy and strong; as a result, they continue\
  \ moving\n/// in their trajectory as if they did not collide.\n/// This function\
  \ outputs the number of such collisions.\nfunc car_race_collision(n: Int) -> Int\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
  \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
  \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
completions: ["    var left_to_right = Array(repeating: 0, count: n)\n    var right_to_left\
    \ = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var count = 0\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var collisions = 0\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = Array(0..<n)\n\
    \    var right_to_left = Array(0..<n)\n    left_to_right.sort()\n    right_to_left.sort()\n\
    \    var collisions = 0\n    var i = 0\n    var j = 0\n    while i < n && j <\
    \ n {\n        if left_to_right[i] < right_to_left[j] {\n            collisions\
    \ += j\n            i += 1\n        } else {\n            j += 1\n        }\n\
    \    }\n    collisions += j * (n - i)\n    return collisions", "    var left_to_right\
    \ = Array(repeating: 0, count: n)\n    var right_to_left = Array(repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count", "    var\
    \ left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating:\
    \ 0, count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var collisions = 0\n    var i = 0\n    var j = 0\n \
    \   while i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n\
    \            collisions += j\n            i += 1\n        } else {\n         \
    \   j += 1\n        }\n    }\n    return collisions", "    var left_to_right =\
    \ [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0, count:\
    \ n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count", "    var\
    \ left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating:\
    \ 0, count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var collision = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collision += 1\n            }\n        }\n    }\n    return collision",
  "    var left = [Int](repeating: 0, count: n)\n    var right = [Int](repeating:\
    \ 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n        right[i] =\
    \ n - i - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left[i] == right[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    // TODO:\
    \ implement this function\n    return 0", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    var collision = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collision += 1\n            }\n        }\n    }\n    return collision",
  "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    var collision = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                collision\
    \ += 1\n            }\n        }\n    }\n    return collision", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    var collisions = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions", "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var count = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] == right_to_left[0] {\n            count\
    \ += 1\n            left_to_right.remove(at: 0)\n            right_to_left.remove(at:\
    \ 0)\n        } else if left_to_right[0] < right_to_left[0] {\n            left_to_right.remove(at:\
    \ 0)\n        } else {\n            right_to_left.remove(at: 0)\n        }\n \
    \   }\n    return count", "    var left_to_right = [Int](repeating: 0, count:\
    \ n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collisions +=\
    \ 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    var collision_count = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collision_count += 1\n            }\n        }\n    }\n    return\
    \ collision_count", "    var left_to_right = [Int](repeating: 0, count: n)\n \
    \   var right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n          \
    \  if left_to_right[i] == right_to_left[j] {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ collision_count = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n  \
    \      right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collision_count += 1\n            }\n        }\n    }\n    return collision_count",
  '    return 0', "    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count", "    var left_to_right = [Int](repeating: 0, count:\
    \ n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n\
    \    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n         \
    \   if left_to_right[i] == right_to_left[j] {\n                count += 1\n  \
    \          }\n        }\n    }\n    return count", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n       \
    \ right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    var collision = 0\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n       \
    \ right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    return car_race_collision(left_to_right:\
    \ left_to_right, right_to_left: right_to_left)", "    var count = 0\n    for i\
    \ in 0..<n {\n        for j in 0..<n {\n            if i < j {\n             \
    \   count += 1\n            }\n        }\n    }\n    return count", "    var left_to_right\
    \ = [Int]()\n    var right_to_left = [Int]()\n    var collision_count = 0\n  \
    \  for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision_count += 1\n            }\n\
    \        }\n    }\n    return collision_count", "    var left_to_right = [Int]()\n\
    \    var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    var count = 0\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  "    var left_to_right = [Int](1...n)\n    var right_to_left = [Int](1...n)\n  \
    \  var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeFirst()\n\
    \        if left == right {\n            collisions += 1\n        } else {\n \
    \           if left < right {\n                left_to_right.append(left)\n  \
    \              right_to_left.append(right)\n            } else {\n           \
    \     left_to_right.append(right)\n                right_to_left.append(left)\n\
    \            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int](0..<n)\n    var right_to_left = [Int](0..<n)\n    var collisions = 0\n\
    \    while left_to_right.count > 0 && right_to_left.count > 0 {\n        let left_car\
    \ = left_to_right.removeFirst()\n        let right_car = right_to_left.removeFirst()\n\
    \        if left_car == right_car {\n            collisions += 1\n        } else\
    \ {\n            left_to_right.append(left_car)\n            right_to_left.append(right_car)\n\
    \        }\n    }\n    return collisions", "    var left_to_right = [Int]()\n\
    \    var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(i)\n    }\n    var collisions = 0\n    for i in\
    \ 0..<n {\n        for j in 0..<n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions", "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    return car_race_collision(left_to_right:\
    \ left_to_right, right_to_left: right_to_left)", "    var left_to_right = [Int]()\n\
    \    var right_to_left = [Int]()\n    var collisions = 0\n    for i in 0..<n {\n\
    \        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n    }\n\
    \    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int]()\n    var\
    \ right_to_left = [Int]()\n    var collisions = 0\n    for i in 0..<n {\n    \
    \    left_to_right.append(i)\n        right_to_left.append(n-i-1)\n    }\n   \
    \ for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var collisions = 0\n    var i = 0\n    var j = 0\n \
    \   while i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n\
    \            collisions += j\n            i += 1\n        } else {\n         \
    \   j += 1\n        }\n    }\n    return collisions", "    var left_to_right =\
    \ [Int]()\n    var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    var count = 0\n    for i\
    \ in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  "    var left_to_right = Array(repeating: 0, count: n)\n    var right_to_left =\
    \ Array(repeating: 0, count: n)\n    var collisions = 0\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n       \
    \ right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    var collisions = 0\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ i = 0\n    while i < n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n        i += 1\n    }\n    return merge_sort_collision(left_to_right,\
    \ right_to_left)", "    var left_to_right = [Int](repeating: 0, count: n)\n  \
    \  var right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n \
    \       left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n  \
    \  var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n      \
    \      if left_to_right[i] == right_to_left[j] {\n                collisions +=\
    \ 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n    for i in\
    \ 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          if left_to_right[i] == right_to_left[j] {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)", "    var left_to_right = [Int]()\n    var right_to_left\
    \ = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let l = left_to_right.removeFirst()\n        let r = right_to_left.removeFirst()\n\
    \        if l == r {\n            collisions += 1\n        }\n    }\n    return\
    \ collisions", "    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        if left_to_right.first! < right_to_left.first! {\n            left_to_right.removeFirst()\n\
    \        } else if left_to_right.first! > right_to_left.first! {\n           \
    \ right_to_left.removeFirst()\n        } else {\n            collisions += 1\n\
    \            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \        }\n    }\n    return collisions", '    return 0', "    var left_to_right\
    \ = [Int]()\n    var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(i)\n    }\n    var collision = 0\n    while left_to_right.count\
    \ > 0 && right_to_left.count > 0 {\n        if left_to_right[0] == right_to_left[0]\
    \ {\n            collision += 1\n            left_to_right.removeFirst()\n   \
    \         right_to_left.removeFirst()\n        } else if left_to_right[0] < right_to_left[0]\
    \ {\n            left_to_right.removeFirst()\n        } else {\n            right_to_left.removeFirst()\n\
    \        }\n    }\n    return collision", "    var left = [Int](repeating: 0,\
    \ count: n)\n    var right = [Int](repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        left[i] = i\n        right[i] = n - i - 1\n    }\n    return car_race_collision(left:\
    \ left, right: right)", "    var left_to_right = [Int]()\n    var right_to_left\
    \ = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collision = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeFirst()\n\
    \        if left == right {\n            collision += 1\n        }\n    }\n  \
    \  return collision", "    var left_to_right = [Int](repeating: 0, count: n)\n\
    \    var right_to_left = [Int](repeating: 0, count: n)\n    var collision_count\
    \ = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count", "    var\
    \ left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating:\
    \ 0, count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    var i = 0\n    while i < n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n        i += 1\n    }\n    var num_collisions\
    \ = 0\n    i = 0\n    while i < n {\n        var j = 0\n        while j < n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                num_collisions\
    \ += 1\n            }\n            j += 1\n        }\n        i += 1\n    }\n\
    \    return num_collisions", "    var left_to_right = Array(repeating: 0, count:\
    \ n)\n    var right_to_left = Array(repeating: 0, count: n)\n    var count = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                count += 1\n\
    \            }\n        }\n    }\n    return count", "    var left_to_right =\
    \ [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0, count:\
    \ n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    var collision = 0\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision", "    var collisions = 0\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            if i < j {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int]()\n    var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    var collisions = 0\n    var i\
    \ = 0\n    var j = 0\n    while i < n && j < n {\n        if left_to_right[i]\
    \ < right_to_left[j] {\n            collisions += j\n            i += 1\n    \
    \    } else {\n            j += 1\n        }\n    }\n    collisions += j * (n\
    \ - i)\n    return collisions", "    var left_to_right = [Int]()\n    var right_to_left\
    \ = [Int]()\n    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var collisions = 0\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](count: n,\
    \ repeatedValue: 0)\n    var right_to_left = [Int](count: n, repeatedValue: 0)\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n    for i in\
    \ 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n - i\
    \ - 1)\n    }\n    var collision = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] < right_to_left[0] {\n            left_to_right.remove(at:\
    \ 0)\n            collision += 1\n        } else {\n            right_to_left.remove(at:\
    \ 0)\n        }\n    }\n    return collision", "    var left_to_right = Array(repeating:\
    \ 0, count: n)\n    var right_to_left = Array(repeating: 0, count: n)\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n       \
    \ right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    var i = 0\n    while i < n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n        i += 1\n    }\n    var collisions\
    \ = 0\n    i = 0\n    while i < n {\n        var j = 0\n        while j < n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n            j += 1\n        }\n        i += 1\n    }\n\
    \    return collisions", "    var left_to_right = [Int](repeating: 0, count: n)\n\
    \    var right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n          \
    \  if left_to_right[i] == right_to_left[j] {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ collision = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision +=\
    \ 1\n            }\n        }\n    }\n    return collision", "    var left_to_right_cars\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left_cars = [Int](repeating:\
    \ 0, count: n)\n    for i in 0..<n {\n        left_to_right_cars[i] = i\n    \
    \    right_to_left_cars[i] = n - i - 1\n    }\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            if left_to_right_cars[i]\
    \ == right_to_left_cars[j] {\n                collisions += 1\n            }\n\
    \        }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = Array(1...n)\n    var right_to_left = Array(1...n).reversed()\n    var collisions\
    \ = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty {\n        if\
    \ left_to_right.first! < right_to_left.first! {\n            left_to_right.removeFirst()\n\
    \        } else if left_to_right.first! > right_to_left.first! {\n           \
    \ right_to_left.removeFirst()\n        } else {\n            collisions += 1\n\
    \            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \        }\n    }\n    return collisions", "    var left_to_right = Array(repeating:\
    \ 0, count: n)\n    var right_to_left = Array(repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    var collisions = 0\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n       \
    \ right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var collisions = 0\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int]()\n    var\
    \ right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    var collisions = 0\n    var\
    \ i = 0\n    var j = 0\n    while i < n && j < n {\n        if left_to_right[i]\
    \ < right_to_left[j] {\n            collisions += j\n            i += 1\n    \
    \    } else {\n            j += 1\n        }\n    }\n    collisions += (n - i)\
    \ * j\n    return collisions", "    var left_to_right = [Int](repeating: 0, count:\
    \ n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var collision_count\
    \ = 0\n    var i = 0\n    while i < n {\n        left_to_right[i] = i\n      \
    \  right_to_left[i] = n - i - 1\n        i += 1\n    }\n    i = 0\n    while i\
    \ < n {\n        if left_to_right[i] == right_to_left[i] {\n            collision_count\
    \ += 1\n        }\n        i += 1\n    }\n    return collision_count", "    var\
    \ left = [Int](repeating: 0, count: n)\n    var right = [Int](repeating: 0, count:\
    \ n)\n    var collision = 0\n    for i in 0..<n {\n        left[i] = i\n     \
    \   right[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left[i] == right[j] {\n                collision += 1\n  \
    \          }\n        }\n    }\n    return collision", "    var left_to_right\
    \ = Array(repeating: 0, count: n)\n    var right_to_left = Array(repeating: 0,\
    \ count: n)\n    var collisions = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions", "    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    var j = 0\n    while j < n {\n\
    \        if left_to_right[j] == right_to_left[j] {\n            collisions +=\
    \ 1\n        }\n        j += 1\n    }\n    return collisions", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left = Array(repeating: 0, count: n)\n    var right = Array(repeating:\
    \ 0, count: n)\n    var collisions = 0\n    for i in 0..<n {\n        left[i]\
    \ = i\n        right[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left[i] == right[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var collisions = 0\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = Array(0..<n)\n\
    \    var right_to_left = Array(0..<n)\n    var collisions = 0\n    while !left_to_right.isEmpty\
    \ && !right_to_left.isEmpty {\n        if left_to_right.first! < right_to_left.first!\
    \ {\n            left_to_right.removeFirst()\n        } else if left_to_right.first!\
    \ > right_to_left.first! {\n            right_to_left.removeFirst()\n        }\
    \ else {\n            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \            collisions += 1\n        }\n    }\n    return collisions", "    var\
    \ left_to_right = [Int]()\n    var right_to_left = [Int]()\n    var collision_count\
    \ = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision_count += 1\n            }\n\
    \        }\n    }\n    return collision_count", "    var collisions = 0\n    var\
    \ left = 0\n    var right = n - 1\n    while left < right {\n        if left ==\
    \ right {\n            collisions += 1\n        } else {\n            collisions\
    \ += 2\n        }\n        left += 1\n        right -= 1\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var collisions = 0\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right_cars\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left_cars = [Int](repeating:\
    \ 0, count: n)\n    for i in 0..<n {\n        left_to_right_cars[i] = i\n    \
    \    right_to_left_cars[i] = n - i - 1\n    }\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            if left_to_right_cars[i]\
    \ == right_to_left_cars[j] {\n                collisions += 1\n            }\n\
    \        }\n    }\n    return collisions", "    var left_to_right = Array(repeating:\
    \ 0, count: n)\n    var right_to_left = Array(repeating: 0, count: n)\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n       \
    \ right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n    for i in\
    \ 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n - i\
    \ - 1)\n    }\n    var collision = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                collision\
    \ += 1\n            }\n        }\n    }\n    return collision", "    var left_to_right\
    \ = [Int]()\n    var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    var collisions = 0\n    var\
    \ i = 0\n    var j = 0\n    while i < n && j < n {\n        if left_to_right[i]\
    \ < right_to_left[j] {\n            collisions += j\n            i += 1\n    \
    \    } else {\n            j += 1\n        }\n    }\n    collisions += (n - i)\
    \ * j\n    return collisions", "    var left_to_right = [Int]()\n    var right_to_left\
    \ = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = Array(repeating: 0, count: n)\n    var right_to_left = Array(repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    return merge_and_count_inversions(left_to_right, right_to_left)",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    var collisions = 0\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ i = 0\n    while i < n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n        i += 1\n    }\n    var collisions = 0\n    i = 0\n    while\
    \ i < n {\n        if left_to_right[i] == right_to_left[i] {\n            collisions\
    \ += 1\n        }\n        i += 1\n    }\n    return collisions", "    var collisions\
    \ = 0\n    var left = 0\n    var right = n - 1\n    while left < right {\n   \
    \     if left < right {\n            left += 1\n        }\n        if left < right\
    \ {\n            right -= 1\n        }\n        collisions += 1\n    }\n    return\
    \ collisions", "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          if left_to_right[i] == right_to_left[j] {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count", "    var collisions =\
    \ 0\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n    for\
    \ i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n          \
    \  if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var collisions = 0\n    var i = 0\n    var j = 0\n \
    \   while i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n\
    \            collisions += j\n            i += 1\n        } else {\n         \
    \   j += 1\n        }\n    }\n    collisions += (n - i) * j\n    return collisions",
  "    var left_to_right = [Int](count: n, repeatedValue: 0)\n    var right_to_left\
    \ = [Int](count: n, repeatedValue: 0)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    return merge_sort_collision(left_to_right,\
    \ right_to_left)", "    var left_to_right = [Int](repeating: 0, count: n)\n  \
    \  var right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    var j\
    \ = 0\n    var count = 0\n    while i < n && j < n {\n        if left_to_right[i]\
    \ < right_to_left[j] {\n            count += j\n            i += 1\n        }\
    \ else {\n            j += 1\n        }\n    }\n    return count + (n - i) * j",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var collisions = 0\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int]()\n    var\
    \ right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        if left_to_right[i] == right_to_left[i] {\n          \
    \  collisions += 1\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    var collisions = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions", "    var collisions = 0\n    var left_to_right = [Int]()\n    var\
    \ right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    for i in 0..<n {\n      \
    \  for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n \
    \               collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n       \
    \ right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n    for i in\
    \ 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n - i\
    \ - 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count", "    var collisions\
    \ = 0\n    var left_to_right = Array(repeating: 0, count: n)\n    var right_to_left\
    \ = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions", "    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var collisions = 0\n    var left_to_right\
    \ = Array(repeating: 0, count: n)\n    var right_to_left = Array(repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collisions +=\
    \ 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    var i = 0\n    while i < n {\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n - i - 1\n        i += 1\n    }\n    var collisions\
    \ = 0\n    i = 0\n    while i < n {\n        if left_to_right[i] == right_to_left[i]\
    \ {\n            collisions += 1\n        }\n        i += 1\n    }\n    return\
    \ collisions", "    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision", "    var left_to_right = Array(repeating:\
    \ 0, count: n)\n    var right_to_left = Array(repeating: 0, count: n)\n    var\
    \ i = 0\n    while i < n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n        i += 1\n    }\n    return car_race_collision(left_to_right:\
    \ left_to_right, right_to_left: right_to_left)", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n       \
    \ right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    var i = 0\n    var j = 0\n    var collisions\
    \ = 0\n    while i < n && j < n {\n        if left_to_right[i] < right_to_left[j]\
    \ {\n            collisions += j\n            i += 1\n        } else {\n     \
    \       j += 1\n        }\n    }\n    collisions += (n - i) * j\n    return collisions",
  "    var left_to_right_cars = [Int](repeating: 0, count: n)\n    var right_to_left_cars\
    \ = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for i in 0..<n\
    \ {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right_cars[i]\
    \ == right_to_left_cars[j] {\n                collisions += 1\n            }\n\
    \        }\n    }\n    return collisions", "    var left_to_right = [Int](1...n)\n\
    \    var right_to_left = [Int](1...n)\n    var collisions = 0\n    while !left_to_right.isEmpty\
    \ && !right_to_left.isEmpty {\n        if left_to_right.first! < right_to_left.first!\
    \ {\n            left_to_right.removeFirst()\n        } else if left_to_right.first!\
    \ > right_to_left.first! {\n            right_to_left.removeFirst()\n        }\
    \ else {\n            collisions += 1\n            left_to_right.removeFirst()\n\
    \            right_to_left.removeFirst()\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var count = 0\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  "    var left_to_right = Array(repeating: 0, count: n)\n    var right_to_left =\
    \ Array(repeating: 0, count: n)\n    var collisions = 0\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ collision = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision +=\
    \ 1\n            }\n        }\n    }\n    return collision", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count", "    var\
    \ left_to_right = [Int]()\n    var right_to_left = [Int]()\n    for i in 0..<n\
    \ {\n        left_to_right.append(i)\n        right_to_left.append(i)\n    }\n\
    \    var count = 0\n    while left_to_right.count > 0 && right_to_left.count >\
    \ 0 {\n        let l = left_to_right.removeFirst()\n        let r = right_to_left.removeFirst()\n\
    \        if l == r {\n            count += 1\n        }\n    }\n    return count",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var count = 0\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    var collisions = 0\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", '    return 0', "    var left_to_right\
    \ = Array(1...n)\n    var right_to_left = Array(1...n).reversed()\n    var collision\
    \ = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n       \
    \ right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  '    return 0', "    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count", "    var\
    \ left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating:\
    \ 0, count: n)\n    var i = 0\n    while i < n {\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n - i - 1\n        i += 1\n    }\n    var collisions\
    \ = 0\n    var j = 0\n    while j < n {\n        var k = 0\n        while k <\
    \ n {\n            if left_to_right[j] == right_to_left[k] {\n               \
    \ collisions += 1\n            }\n            k += 1\n        }\n        j +=\
    \ 1\n    }\n    return collisions", "    var left_to_right = [Int]()\n    var\
    \ right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    var collisions = 0\n    for i\
    \ in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions", "    var left_to_right = [Int](0..<n)\n    var right_to_left =\
    \ [Int](0..<n)\n    var collisions = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n    for i in\
    \ 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n - i\
    \ - 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = Array(0..<n)\n    var right_to_left = Array(0..<n)\n  \
    \  var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeFirst()\n\
    \        if left > right {\n            collisions += 1\n        }\n    }\n  \
    \  return collisions", "    var left_to_right = [Int]()\n    var right_to_left\
    \ = [Int]()\n    var collision = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collision += 1\n            }\n        }\n    }\n    return collision",
  "    var cars = Array(repeating: 0, count: n)\n    var collisions = 0\n    for i\
    \ in 0..<n {\n        cars[i] = i\n    }\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if cars[i] > cars[j] {\n                collisions +=\
    \ 1\n            }\n        }\n    }\n    return collisions", "    var count =\
    \ 0\n    var left = [Int](repeating: 0, count: n)\n    var right = [Int](repeating:\
    \ 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n        right[i] =\
    \ n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n         \
    \   if left[i] > right[j] {\n                count += 1\n            }\n     \
    \   }\n    }\n    return count", "    var left_to_right = Array(repeating: 0,\
    \ count: n)\n    var right_to_left = Array(repeating: 0, count: n)\n    for i\
    \ in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i -\
    \ 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int]()\n    var right_to_left = [Int]()\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ i = 0\n    while i < n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n        i += 1\n    }\n    var collisions = 0\n    i = 0\n    while\
    \ i < n {\n        var j = 0\n        while j < n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \        j += 1\n        }\n        i += 1\n    }\n    return collisions", " \
    \   var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    var collisions = 0\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ i = 0\n    while i < n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n        i += 1\n    }\n    var result = 0\n    i = 0\n    while\
    \ i < n {\n        if left_to_right[i] > right_to_left[i] {\n            result\
    \ += 1\n        }\n        i += 1\n    }\n    return result", "    var left_to_right\
    \ = Array(repeating: 0, count: n)\n    var right_to_left = Array(repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)", "    var left_to_right = [Int](repeating: 0,\
    \ count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for i\
    \ in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i -\
    \ 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    var i = 0\n    while i < n {\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n - i - 1\n        i += 1\n    }\n    var count =\
    \ 0\n    i = 0\n    while i < n {\n        var j = 0\n        while j < n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n            j += 1\n        }\n        i += 1\n    }\n\
    \    return count", "    var left_to_right = Array(repeating: 0, count: n)\n \
    \   var right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collisions +=\
    \ 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int]()\n    var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(i)\n    }\n    var collisions = 0\n    while left_to_right.count\
    \ > 0 && right_to_left.count > 0 {\n        let l = left_to_right.removeFirst()\n\
    \        let r = right_to_left.removeFirst()\n        if l == r {\n          \
    \  collisions += 1\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int]()\n    var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    var collision = 0\n    var\
    \ i = 0\n    var j = 0\n    while i < n && j < n {\n        if left_to_right[i]\
    \ < right_to_left[j] {\n            collision += j\n            i += 1\n     \
    \   } else {\n            j += 1\n        }\n    }\n    collision += (n - i) *\
    \ j\n    return collision", "    var left_to_right_cars = [Int](0..<n)\n    var\
    \ right_to_left_cars = [Int](0..<n)\n    var collisions = 0\n    while !left_to_right_cars.isEmpty\
    \ && !right_to_left_cars.isEmpty {\n        let left_car = left_to_right_cars.removeFirst()\n\
    \        let right_car = right_to_left_cars.removeFirst()\n        if left_car\
    \ == right_car {\n            collisions += 1\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var collisions = 0\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = Array(repeating:\
    \ 0, count: n)\n    var right_to_left = Array(repeating: 0, count: n)\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n       \
    \ right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n    for i in\
    \ 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collisions = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] < right_to_left[0] {\n            left_to_right.remove(at:\
    \ 0)\n            collisions += 1\n        } else {\n            right_to_left.remove(at:\
    \ 0)\n        }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ collision = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision +=\
    \ 1\n            }\n        }\n    }\n    return collision", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    var i = 0\n    while i < n {\n        left_to_right[i] = i\n\
    \        right_to_left[i] = n - i - 1\n        i += 1\n    }\n    var collisions\
    \ = 0\n    i = 0\n    while i < n {\n        var j = 0\n        while j < n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n            j += 1\n        }\n        i += 1\n    }\n\
    \    return collisions", "    var left_to_right = [Int](repeating: 0, count: n)\n\
    \    var right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n          \
    \  if left_to_right[i] == right_to_left[j] {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count", "    var left = [Int](repeating:\
    \ 0, count: n)\n    var right = [Int](repeating: 0, count: n)\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        left[i] = i\n        right[i] = n - i - 1\n\
    \    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left[i]\
    \ == right[j] {\n                collisions += 1\n            }\n        }\n \
    \   }\n    return collisions", "    var left_to_right = [Int]()\n    var right_to_left\
    \ = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    return car_race_collision_helper(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)", '    return n * (n - 1) / 2', "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    var collision_count = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collision_count += 1\n            }\n        }\n    }\n    return\
    \ collision_count", "    var left_to_right = [Int](repeating: 0, count: n)\n \
    \   var right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision +=\
    \ 1\n            }\n        }\n    }\n    return collision", "    var left_to_right\
    \ = Array(repeating: 0, count: n)\n    var right_to_left = Array(repeating: 0,\
    \ count: n)\n    var collisions = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions", "    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    left_to_right.sort()\n    right_to_left.sort()\n    var collisions\
    \ = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n        if left_to_right[i]\
    \ < right_to_left[j] {\n            collisions += j\n            i += 1\n    \
    \    } else {\n            j += 1\n        }\n    }\n    collisions += (n - i)\
    \ * j\n    return collisions", "    var left_to_right = [Int]()\n    var right_to_left\
    \ = [Int]()\n    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(i)\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var collisions = 0\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right_cars = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left_cars = [Int](repeating: 0, count: n)\n \
    \   var collision_count = 0\n    for i in 0..<n {\n        left_to_right_cars[i]\
    \ = i\n        right_to_left_cars[i] = n - i - 1\n    }\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            if left_to_right_cars[i] == right_to_left_cars[j]\
    \ {\n                collision_count += 1\n            }\n        }\n    }\n \
    \   return collision_count", "    var left_to_right = Array(repeating: 0, count:\
    \ n)\n    var right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n\
    \    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n    \
    \        if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    var collisions = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions", "    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions", "    var leftToRight\
    \ = [Int]()\n    var rightToLeft = [Int]()\n    var collisions = 0\n    \n   \
    \ for i in 1...n {\n        leftToRight.append(i)\n        rightToLeft.append(n+1-i)\n\
    \    }\n    \n    for i in 0..<n {\n        if leftToRight[i] == rightToLeft[i]\
    \ {\n            collisions += 1\n        }\n    }\n    \n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var collisions = 0\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = Array(1...n)\n\
    \    var right_to_left = Array(1...n).reversed()\n    var collisions = 0\n   \
    \ while left_to_right.count > 0 && right_to_left.count > 0 {\n        if left_to_right[0]\
    \ < right_to_left[0] {\n            collisions += 1\n            left_to_right.remove(at:\
    \ 0)\n        } else {\n            right_to_left.remove(at: 0)\n        }\n \
    \   }\n    return collisions", "    var left_to_right = [Int](repeating: 0, count:\
    \ n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n\
    \    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n    \
    \        if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    var collisions\
    \ = 0\n    for i in 1...n {\n        for j in 1...n {\n            if i < j {\n\
    \                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions", "    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int]()\n    var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    var collision = 0\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collision += 1\n            }\n        }\n    }\n    return\
    \ collision", "    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n       \
    \ right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    var i = 0\n    while i < n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n        i += 1\n    }\n    var count\
    \ = 0\n    i = 0\n    while i < n {\n        var j = 0\n        while j < n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n            j += 1\n        }\n        i += 1\n    }\n\
    \    return count", "    var left_to_right = [Int]()\n    var right_to_left =\
    \ [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var collisions = 0\n    var left_to_right = Array(repeating: 0, count: n)\n\
    \    var right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var collisions = 0\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            if i < j {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = Array(repeating: 0, count: n)\n    var right_to_left = Array(repeating: 0,\
    \ count: n)\n    var collision_count = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collision_count += 1\n            }\n        }\n    }\n    return\
    \ collision_count", "    var left_to_right = [Int](repeating: 0, count: n)\n \
    \   var right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   return merge_and_count_inversions(left_to_right, right_to_left)", "    var\
    \ left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating:\
    \ 0, count: n)\n    var collision = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collision += 1\n            }\n        }\n    }\n    return collision",
  "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n    for i in\
    \ 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] == right_to_left[0] {\n            collisions\
    \ += 1\n            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \        } else if left_to_right[0] < right_to_left[0] {\n            left_to_right.removeFirst()\n\
    \        } else {\n            right_to_left.removeFirst()\n        }\n    }\n\
    \    return collisions", "    var left_to_right = [Int](repeating: 0, count: n)\n\
    \    var right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n     \
    \       if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    var left\
    \ = [Int](repeating: 0, count: n)\n    var right = [Int](repeating: 0, count:\
    \ n)\n    for i in 0..<n {\n        left[i] = i\n        right[i] = n - i - 1\n\
    \    }\n    return car_race_collision(left: left, right: right)", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    var collisions = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions", "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          if left_to_right[i] == right_to_left[j] {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count", "    var left_to_right\
    \ = [Int]()\n    var right_to_left = [Int]()\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    var count = 0\n    for i\
    \ in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n    for i in\
    \ 1...n {\n        left_to_right.append(i)\n        right_to_left.append(n - i\
    \ + 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions",
  "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n    for i in\
    \ 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeFirst()\n\
    \        if left == right {\n            collisions += 1\n        }\n    }\n \
    \   return collisions", "    var left_to_right = [Int](repeating: 0, count: n)\n\
    \    var right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collisions +=\
    \ 1\n            }\n        }\n    }\n    return collisions"]
stop_tokens:
- "\n}"
