name: HumanEval_41_car_race_collision
language: swift
prompt: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
  /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
  /// are driving right to left.   The two sets of cars start out being very far from\n\
  /// each other.  All cars move in the same speed.  Two cars are said to collide\n\
  /// when a car that's moving left to right hits a car that's moving right to left.\n\
  /// However, the cars are infinitely sturdy and strong; as a result, they continue\
  \ moving\n/// in their trajectory as if they did not collide.\n/// This function\
  \ outputs the number of such collisions.\nfunc car_race_collision(n: Int) -> Int\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
  \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
  \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
completions: ["    var left_to_right = Array(repeating: 0, count: n)\n    var right_to_left\
    \ = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var count = 0\n    for\
    \ i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  "    var left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left =\
    \ [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    var collisions = 0\n \
    \   for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = Array(0..<n)\n\
    \    var right_to_left = Array(0..<n)\n    left_to_right.sort()\n    right_to_left.sort()\n\
    \    var collisions = 0\n    var i = 0\n    var j = 0\n    while i < n && j <\
    \ n {\n        if left_to_right[i] < right_to_left[j] {\n            collisions\
    \ += j\n            i += 1\n        } else {\n            j += 1\n        }\n\
    \    }\n    collisions += j * (n - i)\n    return collisions", "    var left_to_right\
    \ = Array(repeating: 0, count: n)\n    var right_to_left = Array(repeating: 0,\
    \ count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count", "    var\
    \ left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating:\
    \ 0, count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var collisions = 0\n    var i = 0\n    var j = 0\n \
    \   while i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n\
    \            collisions += j\n            i += 1\n        } else {\n         \
    \   j += 1\n        }\n    }\n    return collisions", "    var left_to_right =\
    \ [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0, count:\
    \ n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     count += 1\n            }\n        }\n    }\n    return count", "    var\
    \ left_to_right = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating:\
    \ 0, count: n)\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    var collision = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collision += 1\n            }\n        }\n    }\n    return collision",
  "    var left = [Int](repeating: 0, count: n)\n    var right = [Int](repeating:\
    \ 0, count: n)\n    for i in 0..<n {\n        left[i] = i\n        right[i] =\
    \ n - i - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left[i] == right[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions", "    // TODO:\
    \ implement this function\n    return 0", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    var collision = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collision += 1\n            }\n        }\n    }\n    return collision",
  "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    var collision = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                collision\
    \ += 1\n            }\n        }\n    }\n    return collision", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    var collisions = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collisions += 1\n            }\n        }\n    }\n    return\
    \ collisions", "    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var count = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] == right_to_left[0] {\n            count\
    \ += 1\n            left_to_right.remove(at: 0)\n            right_to_left.remove(at:\
    \ 0)\n        } else if left_to_right[0] < right_to_left[0] {\n            left_to_right.remove(at:\
    \ 0)\n        } else {\n            right_to_left.remove(at: 0)\n        }\n \
    \   }\n    return count", "    var left_to_right = [Int](repeating: 0, count:\
    \ n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collisions +=\
    \ 1\n            }\n        }\n    }\n    return collisions", "    var left_to_right\
    \ = [Int](repeating: 0, count: n)\n    var right_to_left = [Int](repeating: 0,\
    \ count: n)\n    var collision_count = 0\n    for i in 0..<n {\n        left_to_right[i]\
    \ = i\n        right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n   \
    \     for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n\
    \                collision_count += 1\n            }\n        }\n    }\n    return\
    \ collision_count", "    var left_to_right = [Int](repeating: 0, count: n)\n \
    \   var right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n\
    \        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n \
    \   var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n          \
    \  if left_to_right[i] == right_to_left[j] {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count", "    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    var\
    \ collision_count = 0\n    for i in 0..<n {\n        left_to_right[i] = i\n  \
    \      right_to_left[i] = n - i - 1\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collision_count += 1\n            }\n        }\n    }\n    return collision_count",
  '    return 0']
stop_tokens:
- "\n}"
