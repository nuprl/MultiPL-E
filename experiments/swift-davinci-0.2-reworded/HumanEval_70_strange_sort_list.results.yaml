language: swift
name: HumanEval_70_strange_sort_list
results:
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ copy = lst\n    var min = copy.min()\n    var max = copy.max()\n    var minIndex\
    \ = copy.index(of: min!)\n    var maxIndex = copy.index(of: max!)\n    var i =\
    \ 0\n    while i < copy.count {\n        if i % 2 == 0 {\n            result.append(min!)\n\
    \            copy.remove(at: minIndex!)\n            min = copy.min()\n      \
    \      minIndex = copy.index(of: min!)\n        } else {\n            result.append(max!)\n\
    \            copy.remove(at: maxIndex!)\n            max = copy.max()\n      \
    \      maxIndex = copy.index(of: max!)\n        }\n        i += 1\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b642669ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6426391561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6426391286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b642639113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6426390bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b642637e018 <unavailable> + 1355800

    6    tmpifzj_fko                        0x00005582fd2e9aa5 <unavailable> + 10917

    7    tmpifzj_fko                        0x00005582fd2e869c <unavailable> + 5788

    8    libc.so.6                          0x00002b6426886460 __libc_start_main +
    245

    9    tmpifzj_fko                        0x00005582fd2e8379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    var min = sorted.removeFirst()\n    var max = sorted.removeLast()\n\
    \    while !sorted.isEmpty {\n        result.append(min)\n        min = sorted.removeFirst()\n\
    \        result.append(max)\n        max = sorted.removeLast()\n    }\n    result.append(min)\n\
    \    result.append(max)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002ab98915fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab988e56561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab988e56286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab988e5613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab988e55bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab988f57c1d <unavailable> + 2489373

    6    tmphix5l2op                        0x000055d476108416 <unavailable> + 9238

    7    tmphix5l2op                        0x000055d47610776b <unavailable> + 5995

    8    libc.so.6                          0x00002ab98934b460 __libc_start_main +
    245

    9    tmphix5l2op                        0x000055d476107309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.removeFirst())\n\
    \        if let last = lst.popLast() {\n            result.append(last)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpkud0l3ix/tmpkud0l3ix.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b720ca5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b720c753b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b720c753988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b720c7527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkud0l3ix                        0x00005652f88a6a82 <unavailable> + 6786

    5    libc.so.6                          0x00002b720cc48460 __libc_start_main +
    245

    6    tmpkud0l3ix                        0x00005652f88a6259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    var i = 0\n    while !lst.isEmpty {\n        if i % 2 == 0 {\n\
    \            result.append(lst.min()!)\n            lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        } else {\n            result.append(lst.max()!)\n   \
    \         lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n        i +=\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ copy = lst\n    var isAscending = true\n    while !copy.isEmpty {\n        if\
    \ isAscending {\n            result.append(copy.min()!)\n            copy.remove(at:\
    \ copy.index(of: copy.min()!)!)\n        } else {\n            result.append(copy.max()!)\n\
    \            copy.remove(at: copy.index(of: copy.max()!)!)\n        }\n      \
    \  isAscending = !isAscending\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.removeAll(where: { $0 == min || $0 == max })\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpet62jly6/tmpet62jly6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad10e62ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad10e321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad10e321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad10e3207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpet62jly6                        0x0000558100e7689b <unavailable> + 6299

    5    libc.so.6                          0x00002ad10e816460 __libc_start_main +
    245

    6    tmpet62jly6                        0x0000558100e76349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        let min = lst.min()!\n        let\
    \ max = lst.max()!\n        if let minIndex = lst.firstIndex(of: min) {\n    \
    \        lst.remove(at: minIndex)\n            result.append(min)\n        }\n\
    \        if let maxIndex = lst.firstIndex(of: max) {\n            lst.remove(at:\
    \ maxIndex)\n            result.append(max)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while lst.count > 0 {\n        let min = lst.min()!\n  \
    \      let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_0lll_od/tmp_0lll_od.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002abc1a770c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc1a467561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc1a467286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc1a46713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc1a466bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_0lll_od                        0x000055a714a0573e <unavailable> + 10046

    6    tmp_0lll_od                        0x000055a714a0477b <unavailable> + 6011

    7    libc.so.6                          0x00002abc1a95c460 __libc_start_main +
    245

    8    tmp_0lll_od                        0x000055a714a04319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    var i = 0\n    while sorted.count > 0 {\n       \
    \ result.append(sorted[i])\n        sorted.remove(at: i)\n        if sorted.count\
    \ > 0 {\n            result.append(sorted[sorted.count - 1])\n            sorted.remove(at:\
    \ sorted.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while lst.count > 0 {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if lst.count > 0 {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at:\
    \ lst.index(of: lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        let min = lst.min()!\n        let\
    \ max = lst.max()!\n        result.append(min)\n        result.append(max)\n \
    \       lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp7bp8juob/tmp7bp8juob.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5e6f10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5e6c07561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae5e6c07286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae5e6c0713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae5e6c06bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7bp8juob                        0x000056460e54e789 <unavailable> + 10121

    6    tmp7bp8juob                        0x000056460e54d7cb <unavailable> + 6091

    7    libc.so.6                          0x00002ae5e70fc460 __libc_start_main +
    245

    8    tmp7bp8juob                        0x000056460e54d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sorted = lst.sorted()\n\
    \    var result = [Int]()\n    var i = 0\n    var j = sorted.count - 1\n    while\
    \ i <= j {\n        result.append(sorted[i])\n        i += 1\n        if i <=\
    \ j {\n            result.append(sorted[j])\n            j -= 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ copy = lst\n    var min = copy.min()\n    var max = copy.max()\n    var index\
    \ = 0\n    while copy.count > 0 {\n        if index % 2 == 0 {\n            result.append(min!)\n\
    \            copy.remove(at: copy.index(of: min!)!)\n            min = copy.min()\n\
    \        } else {\n            result.append(max!)\n            copy.remove(at:\
    \ copy.index(of: max!)!)\n            max = copy.max()\n        }\n        index\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n   \
    \     lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0\
    \ {\n            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    var index = 0\n    while !sorted.isEmpty {\n    \
    \    if index % 2 == 0 {\n            result.append(sorted.removeFirst())\n  \
    \      } else {\n            result.append(sorted.removeLast())\n        }\n \
    \       index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmphzd6wgqs/tmphzd6wgqs.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbe8367c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbe805eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbe805e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbe805d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphzd6wgqs                        0x00005617dd0dd3d4 <unavailable> + 5076

    5    libc.so.6                          0x00002acbe8553460 __libc_start_main +
    245

    6    tmphzd6wgqs                        0x00005617dd0dcfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmphzd6wgqs/tmphzd6wgqs.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbe8367c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbe805eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbe805e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbe805d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphzd6wgqs                        0x00005617dd0dd3d4 <unavailable> + 5076

    5    libc.so.6                          0x00002acbe8553460 __libc_start_main +
    245

    6    tmphzd6wgqs                        0x00005617dd0dcfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwcrscl31/tmpwcrscl31.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fbe6c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fbe3bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9fbe3bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9fbe3bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9fbe3bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwcrscl31                        0x000055b5e8f10793 <unavailable> + 10131

    6    tmpwcrscl31                        0x000055b5e8f0f7db <unavailable> + 6107

    7    libc.so.6                          0x00002b9fbe8b2460 __libc_start_main +
    245

    8    tmpwcrscl31                        0x000055b5e8f0f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwcrscl31/tmpwcrscl31.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fbe6c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fbe3bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9fbe3bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9fbe3bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9fbe3bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwcrscl31                        0x000055b5e8f10793 <unavailable> + 10131

    6    tmpwcrscl31                        0x000055b5e8f0f7db <unavailable> + 6107

    7    libc.so.6                          0x00002b9fbe8b2460 __libc_start_main +
    245

    8    tmpwcrscl31                        0x000055b5e8f0f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0\
    \ {\n            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    var sorted_list = lst.sorted()\n    var result: [Int]\
    \ = []\n    var i = 0\n    var j = sorted_list.count - 1\n    while i <= j {\n\
    \        result.append(sorted_list[i])\n        i += 1\n        if i <= j {\n\
    \            result.append(sorted_list[j])\n            j -= 1\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count <= 1 {\n     \
    \   return lst\n    }\n    var lst = lst\n    var result: [Int] = []\n    var\
    \ min = lst.min()!\n    var max = lst.max()!\n    var minIndex = lst.index(of:\
    \ min)!\n    var maxIndex = lst.index(of: max)!\n    while lst.count > 0 {\n \
    \       result.append(min)\n        lst.remove(at: minIndex)\n        if lst.count\
    \ > 0 {\n            result.append(max)\n            lst.remove(at: maxIndex)\n\
    \        }\n        if lst.count > 0 {\n            min = lst.min()!\n       \
    \     max = lst.max()!\n            minIndex = lst.index(of: min)!\n         \
    \   maxIndex = lst.index(of: max)!\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9ac91ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9ac615561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae9ac615286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae9ac61513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae9ac614bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ae9ac602018 <unavailable> + 1355800

    6    tmp1rk2td04                        0x00005624e0f517f9 <unavailable> + 10233

    7    tmp1rk2td04                        0x00005624e0f5063c <unavailable> + 5692

    8    libc.so.6                          0x00002ae9acb0a460 __libc_start_main +
    245

    9    tmp1rk2td04                        0x00005624e0f50319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var res:\
    \ [Int] = []\n    while !lst.isEmpty {\n        res.append(lst.min()!)\n     \
    \   lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n  \
    \          res.append(lst.max()!)\n            lst.remove(at: lst.index(of: lst.max()!)!)\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n   \
    \     lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ copy = lst\n    var isAscending = true\n    while !copy.isEmpty {\n        if\
    \ isAscending {\n            result.append(copy.min()!)\n            copy.remove(at:\
    \ copy.index(of: copy.min()!)!)\n        } else {\n            result.append(copy.max()!)\n\
    \            copy.remove(at: copy.index(of: copy.max()!)!)\n        }\n      \
    \  isAscending = !isAscending\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var sorted = lst.sorted()\n\
    \    var result = [Int]()\n    var i = 0\n    var j = sorted.count - 1\n    while\
    \ i <= j {\n        result.append(sorted[i])\n        i += 1\n        if i <=\
    \ j {\n            result.append(sorted[j])\n            j -= 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n   \
    \     lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    var i = 0\n    while sorted.count > 0 {\n       \
    \ result.append(sorted[i])\n        sorted.remove(at: i)\n        if sorted.count\
    \ > 0 {\n            result.append(sorted[sorted.count - 1])\n            sorted.remove(at:\
    \ sorted.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    var result = [Int]()\n    var lst = lst\n    while lst.count\
    \ > 0 {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ copy = lst\n    var isAscending = true\n    while !copy.isEmpty {\n        let\
    \ min = copy.min()!\n        let max = copy.max()!\n        if isAscending {\n\
    \            result.append(min)\n            copy.remove(at: copy.index(of: min)!)\n\
    \            if !copy.isEmpty {\n                result.append(max)\n        \
    \        copy.remove(at: copy.index(of: max)!)\n            }\n        } else\
    \ {\n            result.append(max)\n            copy.remove(at: copy.index(of:\
    \ max)!)\n            if !copy.isEmpty {\n                result.append(min)\n\
    \                copy.remove(at: copy.index(of: min)!)\n            }\n      \
    \  }\n        isAscending = !isAscending\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpb460qobi/tmpb460qobi.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d05050c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d04d47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d04d47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d04d467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb460qobi                        0x00005609d76c5774 <unavailable> + 6004

    5    libc.so.6                          0x00002b6d0523c460 __libc_start_main +
    245

    6    tmpb460qobi                        0x00005609d76c5369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    var lst = lst\n    var result = [Int]()\n    var min\
    \ = lst.min()\n    var max = lst.max()\n    while lst.count > 0 {\n        if\
    \ let min = min {\n            result.append(min)\n            lst.remove(at:\
    \ lst.index(of: min)!)\n        }\n        if let max = max {\n            result.append(max)\n\
    \            lst.remove(at: lst.index(of: max)!)\n        }\n        min = lst.min()\n\
    \        max = lst.max()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpsx64nb5p/tmpsx64nb5p.swift:27: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e7b087c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e7ad7e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3e7ad7e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3e7ad7e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3e7ad7dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpsx64nb5p                        0x000056037ee0e725 <unavailable> + 10021

    6    tmpsx64nb5p                        0x000056037ee0d7db <unavailable> + 6107

    7    libc.so.6                          0x00002b3e7b273460 __libc_start_main +
    245

    8    tmpsx64nb5p                        0x000056037ee0d379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var sortedList = lst.sorted()\n\
    \    var result = [Int]()\n    var i = 0\n    var j = sortedList.count - 1\n \
    \   while i <= j {\n        result.append(sortedList[i])\n        i += 1\n   \
    \     if i <= j {\n            result.append(sortedList[j])\n            j -=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at:\
    \ lst.index(of: lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.removeAll(where: { $0 == min || $0 == max })\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpu7trqh4b/tmpu7trqh4b.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b281b766c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b281b45db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b281b45d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b281b45c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7trqh4b                        0x000056231bfe18ab <unavailable> + 6315

    5    libc.so.6                          0x00002b281b952460 __libc_start_main +
    245

    6    tmpu7trqh4b                        0x000056231bfe1359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        if min != max {\n\
    \            result.append(max)\n        }\n        lst.remove(at: lst.index(of:\
    \ min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpa0x4i88k/tmpa0x4i88k.swift:23: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae87c146c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae87be3d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae87be3d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae87be3d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae87be3cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpa0x4i88k                        0x000055ab9aca4760 <unavailable> + 10080

    6    tmpa0x4i88k                        0x000055ab9aca377b <unavailable> + 6011

    7    libc.so.6                          0x00002ae87c332460 __libc_start_main +
    245

    8    tmpa0x4i88k                        0x000055ab9aca3319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      result.append(lst.max()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        lst.remove(at: lst.index(of: lst.max()!)!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpkvn_0tfj/tmpkvn_0tfj.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af343a5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af343751561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af343751286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af34375113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af343750bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpkvn_0tfj                        0x000055f01bd777d5 <unavailable> + 10197

    6    tmpkvn_0tfj                        0x000055f01bd7677b <unavailable> + 6011

    7    libc.so.6                          0x00002af343c46460 __libc_start_main +
    245

    8    tmpkvn_0tfj                        0x000055f01bd76319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n   \
    \     lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    var i = 0\n    while sorted.count > 0 {\n       \
    \ result.append(sorted[i])\n        sorted.remove(at: i)\n        if sorted.count\
    \ > 0 {\n            result.append(sorted[sorted.count - 1])\n            sorted.remove(at:\
    \ sorted.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    var min = lst.min()\n    var max = lst.max()\n    while min !=\
    \ nil || max != nil {\n        if min != nil {\n            result.append(min!)\n\
    \            lst.remove(at: lst.index(of: min!)!)\n            min = lst.min()\n\
    \        }\n        if max != nil {\n            result.append(max!)\n       \
    \     lst.remove(at: lst.index(of: max!)!)\n            max = lst.max()\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpbn1f36cp/tmpbn1f36cp.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002abb1d108c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb1cdff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abb1cdff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abb1cdff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abb1cdfebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpbn1f36cp                        0x0000562c25989638 <unavailable> + 9784

    6    tmpbn1f36cp                        0x0000562c2598863c <unavailable> + 5692

    7    libc.so.6                          0x00002abb1d2f4460 __libc_start_main +
    245

    8    tmpbn1f36cp                        0x0000562c25988319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ copy = lst\n    var i = 0\n    while copy.count > 0 {\n        if i % 2 == 0\
    \ {\n            result.append(copy.min()!)\n            copy.remove(at: copy.index(of:\
    \ copy.min()!)!)\n        } else {\n            result.append(copy.max()!)\n \
    \           copy.remove(at: copy.index(of: copy.max()!)!)\n        }\n       \
    \ i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n   \
    \     lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while lst.count > 0 {\n        let min = lst.min()!\n  \
    \      let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_0lll_od/tmp_0lll_od.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002abc1a770c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc1a467561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abc1a467286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abc1a46713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abc1a466bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_0lll_od                        0x000055a714a0573e <unavailable> + 10046

    6    tmp_0lll_od                        0x000055a714a0477b <unavailable> + 6011

    7    libc.so.6                          0x00002abc1a95c460 __libc_start_main +
    245

    8    tmp_0lll_od                        0x000055a714a04319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0\
    \ {\n            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwcrscl31/tmpwcrscl31.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fbe6c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fbe3bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9fbe3bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9fbe3bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9fbe3bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwcrscl31                        0x000055b5e8f10793 <unavailable> + 10131

    6    tmpwcrscl31                        0x000055b5e8f0f7db <unavailable> + 6107

    7    libc.so.6                          0x00002b9fbe8b2460 __libc_start_main +
    245

    8    tmpwcrscl31                        0x000055b5e8f0f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while lst.count > 0 {\n        result.append(lst.min()!)\n \
    \       lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        let min = lst.min()!\n        let\
    \ max = lst.max()!\n        result.append(min)\n        lst.remove(at: lst.index(of:\
    \ min)!)\n        if !lst.isEmpty {\n            result.append(max)\n        \
    \    lst.remove(at: lst.index(of: max)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        let min = lst.min()!\n        let\
    \ max = lst.max()!\n        result.append(min)\n        if min != max {\n    \
    \        result.append(max)\n        }\n        lst.removeAll(where: { $0 == min\
    \ || $0 == max })\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_vpi_upe/tmp_vpi_upe.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f116a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f1139bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f1139b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f1139a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_vpi_upe                        0x000055b28ccb7d20 <unavailable> + 7456

    5    libc.so.6                          0x00002b3f11890460 __libc_start_main +
    245

    6    tmp_vpi_upe                        0x000055b28ccb7399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var list = lst\n    var result:\
    \ [Int] = []\n    while !list.isEmpty {\n        let min = list.min()!\n     \
    \   let max = list.max()!\n        result.append(min)\n        list.remove(at:\
    \ list.index(of: min)!)\n        if !list.isEmpty {\n            result.append(max)\n\
    \            list.remove(at: list.index(of: max)!)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0\
    \ {\n            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    var result = [Int]()\n    var lst = lst\n    while lst.count\
    \ > 0 {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        if min != max {\n            result.append(max)\n        }\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpi2ngi7nz/tmpi2ngi7nz.swift:26: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b21db0a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21dad9c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b21dad9c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b21dad9c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b21dad9bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpi2ngi7nz                        0x00005625cdce57da <unavailable> + 10202

    6    tmpi2ngi7nz                        0x00005625cdce47db <unavailable> + 6107

    7    libc.so.6                          0x00002b21db291460 __libc_start_main +
    245

    8    tmpi2ngi7nz                        0x00005625cdce4379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while lst.count > 0 {\n        let min = lst.min()!\n      \
    \  let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmprs8_3o03/tmprs8_3o03.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af911ec2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af911bb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af911bb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af911bb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af911bb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprs8_3o03                        0x0000556cbe485737 <unavailable> + 10039

    6    tmprs8_3o03                        0x0000556cbe48477b <unavailable> + 6011

    7    libc.so.6                          0x00002af9120ae460 __libc_start_main +
    245

    8    tmprs8_3o03                        0x0000556cbe484319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n   \
    \     lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at:\
    \ lst.index(of: lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at:\
    \ lst.index(of: lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sortedLst = lst.sorted()\n    var left = 0\n    var right = sortedLst.count\
    \ - 1\n    while left <= right {\n        result.append(sortedLst[left])\n   \
    \     left += 1\n        if left <= right {\n            result.append(sortedLst[right])\n\
    \            right -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwcrscl31/tmpwcrscl31.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fbe6c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fbe3bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9fbe3bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9fbe3bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9fbe3bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwcrscl31                        0x000055b5e8f10793 <unavailable> + 10131

    6    tmpwcrscl31                        0x000055b5e8f0f7db <unavailable> + 6107

    7    libc.so.6                          0x00002b9fbe8b2460 __libc_start_main +
    245

    8    tmpwcrscl31                        0x000055b5e8f0f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    var min = 0\n    var max = 0\n    while !lst.isEmpty {\n    \
    \    min = lst.min()!\n        max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpb5v89kdf/tmpb5v89kdf.swift:23: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a1763cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a17333561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1a17333286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1a1733313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1a17332bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb5v89kdf                        0x00005625d8709799 <unavailable> + 10137

    6    tmpb5v89kdf                        0x00005625d87087cb <unavailable> + 6091

    7    libc.so.6                          0x00002b1a17828460 __libc_start_main +
    245

    8    tmpb5v89kdf                        0x00005625d8708369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        let min = lst.min()!\n        let\
    \ max = lst.max()!\n        result.append(min)\n        result.append(max)\n \
    \       lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp7bp8juob/tmp7bp8juob.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5e6f10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5e6c07561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae5e6c07286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae5e6c0713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae5e6c06bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7bp8juob                        0x000056460e54e789 <unavailable> + 10121

    6    tmp7bp8juob                        0x000056460e54d7cb <unavailable> + 6091

    7    libc.so.6                          0x00002ae5e70fc460 __libc_start_main +
    245

    8    tmp7bp8juob                        0x000056460e54d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      result.append(lst.max()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        lst.remove(at: lst.index(of: lst.max()!)!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp1eia0k1u/tmp1eia0k1u.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a9457cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a94273561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2a94273286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2a9427313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2a94272bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp1eia0k1u                        0x00005562ea879822 <unavailable> + 10274

    6    tmp1eia0k1u                        0x00005562ea8787db <unavailable> + 6107

    7    libc.so.6                          0x00002b2a94768460 __libc_start_main +
    245

    8    tmp1eia0k1u                        0x00005562ea878379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n   \
    \     lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwcrscl31/tmpwcrscl31.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fbe6c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fbe3bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9fbe3bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9fbe3bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9fbe3bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwcrscl31                        0x000055b5e8f10793 <unavailable> + 10131

    6    tmpwcrscl31                        0x000055b5e8f0f7db <unavailable> + 6107

    7    libc.so.6                          0x00002b9fbe8b2460 __libc_start_main +
    245

    8    tmpwcrscl31                        0x000055b5e8f0f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmplgfkf04e/tmplgfkf04e.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b847832bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8478022561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8478022286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b847802213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8478021bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmplgfkf04e                        0x0000559a723f673d <unavailable> + 10045

    6    tmplgfkf04e                        0x0000559a723f577b <unavailable> + 6011

    7    libc.so.6                          0x00002b8478517460 __libc_start_main +
    245

    8    tmplgfkf04e                        0x0000559a723f5319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      result.append(lst.max()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        lst.remove(at: lst.index(of: lst.max()!)!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpkvn_0tfj/tmpkvn_0tfj.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af343a5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af343751561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af343751286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af34375113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af343750bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpkvn_0tfj                        0x000055f01bd777d5 <unavailable> + 10197

    6    tmpkvn_0tfj                        0x000055f01bd7677b <unavailable> + 6011

    7    libc.so.6                          0x00002af343c46460 __libc_start_main +
    245

    8    tmpkvn_0tfj                        0x000055f01bd76319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    var min = sorted.removeFirst()\n    var max = sorted.removeLast()\n\
    \    while !sorted.isEmpty {\n        result.append(min)\n        result.append(max)\n\
    \        min = sorted.removeFirst()\n        max = sorted.removeLast()\n    }\n\
    \    result.append(min)\n    result.append(max)\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fcb95dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fcb654561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5fcb654286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5fcb65413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5fcb653bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b5fcb755c1d <unavailable> + 2489373

    6    tmpaiokhouo                        0x0000555afb798416 <unavailable> + 9238

    7    tmpaiokhouo                        0x0000555afb79776b <unavailable> + 5995

    8    libc.so.6                          0x00002b5fcbb49460 __libc_start_main +
    245

    9    tmpaiokhouo                        0x0000555afb797309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    var i = 0\n    while sorted.count > 0 {\n       \
    \ result.append(sorted[i])\n        sorted.remove(at: i)\n        if sorted.count\
    \ > 0 {\n            result.append(sorted[sorted.count - 1])\n            sorted.remove(at:\
    \ sorted.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        let min = lst.min()!\n        let\
    \ max = lst.max()!\n        result.append(min)\n        result.append(max)\n \
    \       lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpfoaxw91r/tmpfoaxw91r.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8a8d6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8a8a65561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba8a8a65286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba8a8a6513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba8a8a64bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpfoaxw91r                        0x0000561365a60782 <unavailable> + 10114

    6    tmpfoaxw91r                        0x0000561365a5f7cb <unavailable> + 6091

    7    libc.so.6                          0x00002ba8a8f5a460 __libc_start_main +
    245

    8    tmpfoaxw91r                        0x0000561365a5f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while !lst.isEmpty {\n        let min = lst.min()!\n   \
    \     let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpsvubp91t/tmpsvubp91t.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af83b2dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af83afd5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af83afd5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af83afd513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af83afd4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpsvubp91t                        0x000055d46ff9f744 <unavailable> + 10052

    6    tmpsvubp91t                        0x000055d46ff9e77b <unavailable> + 6011

    7    libc.so.6                          0x00002af83b4ca460 __libc_start_main +
    245

    8    tmpsvubp91t                        0x000055d46ff9e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while lst.count > 0 {\n        let min = lst.min()!\n       \
    \ result.append(min)\n        lst.remove(at: lst.index(of: min)!)\n        if\
    \ lst.count > 0 {\n            let max = lst.max()!\n            result.append(max)\n\
    \            lst.remove(at: lst.index(of: max)!)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    var sortedList = lst.sorted()\n    var result = [Int]()\n\
    \    var i = 0\n    while i < sortedList.count {\n        result.append(sortedList[i])\n\
    \        i += 1\n        if i < sortedList.count {\n            result.append(sortedList[sortedList.count\
    \ - i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpzncgqigq/tmpzncgqigq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bf0144c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9befe3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9befe3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9befe3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzncgqigq                        0x000055810a9fe5d4 <unavailable> + 5588

    5    libc.so.6                          0x00002b9bf0330460 __libc_start_main +
    245

    6    tmpzncgqigq                        0x000055810a9fe1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0\
    \ {\n            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var sortedList = lst.sorted()\n\
    \    var result = [Int]()\n    var i = 0\n    var j = sortedList.count - 1\n \
    \   while i <= j {\n        result.append(sortedList[i])\n        i += 1\n   \
    \     if i <= j {\n            result.append(sortedList[j])\n            j -=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var sorted = lst.sorted()\n\
    \    var result = [Int]()\n    var i = 0\n    var j = sorted.count - 1\n    while\
    \ i <= j {\n        result.append(sorted[i])\n        i += 1\n        if i <=\
    \ j {\n            result.append(sorted[j])\n            j -= 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    while !sorted.isEmpty {\n        result.append(sorted.removeFirst())\n\
    \        if !sorted.isEmpty {\n            result.append(sorted.removeLast())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    var ascending = true\n    while !sorted.isEmpty {\n\
    \        if ascending {\n            result.append(sorted.removeFirst())\n   \
    \     } else {\n            result.append(sorted.removeLast())\n        }\n  \
    \      ascending = !ascending\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    var result = [Int]()\n    var sorted = lst.sorted()\n\
    \    var i = 0\n    var j = sorted.count - 1\n    while i <= j {\n        result.append(sorted[i])\n\
    \        i += 1\n        if i <= j {\n            result.append(sorted[j])\n \
    \           j -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at:\
    \ lst.index(of: lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    while !sorted.isEmpty {\n        result.append(sorted.removeFirst())\n\
    \        if !sorted.isEmpty {\n            result.append(sorted.removeLast())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    var i = 0\n    var j = sorted.count - 1\n    while\
    \ i <= j {\n        result.append(sorted[i])\n        i += 1\n        if i <=\
    \ j {\n            result.append(sorted[j])\n            j -= 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    var isAscending = true\n    while !sorted.isEmpty\
    \ {\n        if isAscending {\n            result.append(sorted.removeFirst())\n\
    \        } else {\n            result.append(sorted.removeLast())\n        }\n\
    \        isAscending = !isAscending\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var mutableLst = lst\n    var min = mutableLst.min()\n    var max = mutableLst.max()\n\
    \    while mutableLst.count > 0 {\n        if let min = min {\n            result.append(min)\n\
    \            mutableLst.remove(at: mutableLst.index(of: min)!)\n        }\n  \
    \      if let max = max {\n            result.append(max)\n            mutableLst.remove(at:\
    \ mutableLst.index(of: max)!)\n        }\n        min = mutableLst.min()\n   \
    \     max = mutableLst.max()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8jtru9mw/tmp8jtru9mw.swift:24: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b61dc765c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61dc45c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b61dc45c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b61dc45c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b61dc45bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8jtru9mw                        0x0000564ffd06469f <unavailable> + 9887

    6    tmp8jtru9mw                        0x0000564ffd06377b <unavailable> + 6011

    7    libc.so.6                          0x00002b61dc951460 __libc_start_main +
    245

    8    tmp8jtru9mw                        0x0000564ffd063319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        if min != max {\n\
    \            result.append(max)\n        }\n        lst.remove(at: lst.index(of:\
    \ min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpnad2sfxw/tmpnad2sfxw.swift:23: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2867653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b286734a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b286734a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b286734a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2867349bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnad2sfxw                        0x00005639acbf87b3 <unavailable> + 10163

    6    tmpnad2sfxw                        0x00005639acbf77db <unavailable> + 6107

    7    libc.so.6                          0x00002b286783f460 __libc_start_main +
    245

    8    tmpnad2sfxw                        0x00005639acbf7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        if min != max {\n\
    \            result.append(max)\n        }\n        lst.removeAll(where: { $0\
    \ == min || $0 == max })\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpijcrxrym/tmpijcrxrym.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25091abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2508ea2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2508ea2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2508ea17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijcrxrym                        0x0000561fda7c6cd0 <unavailable> + 7376

    5    libc.so.6                          0x00002b2509397460 __libc_start_main +
    245

    6    tmpijcrxrym                        0x0000561fda7c6349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var sorted = lst.sorted()\n\
    \    var result = [Int]()\n    var i = 0\n    var j = sorted.count - 1\n    while\
    \ i <= j {\n        result.append(sorted[i])\n        i += 1\n        if i <=\
    \ j {\n            result.append(sorted[j])\n            j -= 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n   \
    \     lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmplgfkf04e/tmplgfkf04e.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b847832bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8478022561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8478022286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b847802213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8478021bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmplgfkf04e                        0x0000559a723f673d <unavailable> + 10045

    6    tmplgfkf04e                        0x0000559a723f577b <unavailable> + 6011

    7    libc.so.6                          0x00002b8478517460 __libc_start_main +
    245

    8    tmplgfkf04e                        0x0000559a723f5319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmphzd6wgqs/tmphzd6wgqs.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbe8367c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbe805eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbe805e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbe805d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphzd6wgqs                        0x00005617dd0dd3d4 <unavailable> + 5076

    5    libc.so.6                          0x00002acbe8553460 __libc_start_main +
    245

    6    tmphzd6wgqs                        0x00005617dd0dcfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ mutableLst = lst\n    while mutableLst.count > 0 {\n        let min = mutableLst.min()!\n\
    \        let max = mutableLst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        mutableLst.remove(at: mutableLst.index(of: min)!)\n        mutableLst.remove(at:\
    \ mutableLst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp7hv7g0p0/tmp7hv7g0p0.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b9685d55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9685a4c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9685a4c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9685a4c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9685a4bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7hv7g0p0                        0x000055af5aad2793 <unavailable> + 10131

    6    tmp7hv7g0p0                        0x000055af5aad17db <unavailable> + 6107

    7    libc.so.6                          0x00002b9685f41460 __libc_start_main +
    245

    8    tmp7hv7g0p0                        0x000055af5aad1379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at:\
    \ lst.index(of: lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    var i = 0\n    while lst.count > 0 {\n        if i % 2 == 0 {\n\
    \            result.append(lst.min()!)\n            lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        } else {\n            result.append(lst.max()!)\n   \
    \         lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n        i +=\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    var i = 0\n    while !sorted.isEmpty {\n        if\
    \ i % 2 == 0 {\n            result.append(sorted.removeFirst())\n        } else\
    \ {\n            result.append(sorted.removeLast())\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        if min == max {\n            result.append(min)\n\
    \            lst.removeAll()\n        } else {\n            result.append(min)\n\
    \            result.append(max)\n            lst.remove(at: lst.index(of: min)!)\n\
    \            lst.remove(at: lst.index(of: max)!)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpu4k4oo9m/tmpu4k4oo9m.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b1d772c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b1d469b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b1d469988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b1d4687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4k4oo9m                        0x000055c06dbbcdd0 <unavailable> + 7632

    5    libc.so.6                          0x00002b1b1d95e460 __libc_start_main +
    245

    6    tmpu4k4oo9m                        0x000055c06dbbc449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n   \
    \     lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while lst.count > 0 {\n        let min = lst.min()!\n      \
    \  let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmprs8_3o03/tmprs8_3o03.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af911ec2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af911bb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af911bb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af911bb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af911bb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprs8_3o03                        0x0000556cbe485737 <unavailable> + 10039

    6    tmprs8_3o03                        0x0000556cbe48477b <unavailable> + 6011

    7    libc.so.6                          0x00002af9120ae460 __libc_start_main +
    245

    8    tmprs8_3o03                        0x0000556cbe484319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    var isAscending = true\n    while sorted.count >\
    \ 0 {\n        if isAscending {\n            result.append(sorted.removeFirst())\n\
    \        } else {\n            result.append(sorted.removeLast())\n        }\n\
    \        isAscending = !isAscending\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        let min = lst.min()!\n        let\
    \ max = lst.max()!\n        if min != max {\n            result.append(min)\n\
    \            result.append(max)\n        } else {\n            result.append(min)\n\
    \        }\n        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at:\
    \ lst.index(of: max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwm5c7q4i/tmpwm5c7q4i.swift:25: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a76a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a739d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba2a739d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba2a739d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba2a739cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwm5c7q4i                        0x0000561e23fc57c1 <unavailable> + 10177

    6    tmpwm5c7q4i                        0x0000561e23fc47cb <unavailable> + 6091

    7    libc.so.6                          0x00002ba2a7892460 __libc_start_main +
    245

    8    tmpwm5c7q4i                        0x0000561e23fc4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    var i = 0\n    while sorted.count > 0 {\n       \
    \ if i % 2 == 0 {\n            result.append(sorted.removeFirst())\n        }\
    \ else {\n            result.append(sorted.removeLast())\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        if min != max {\n\
    \            result.append(max)\n        }\n        lst.remove(at: lst.index(of:\
    \ min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpa0x4i88k/tmpa0x4i88k.swift:23: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae87c146c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae87be3d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae87be3d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae87be3d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae87be3cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpa0x4i88k                        0x000055ab9aca4760 <unavailable> + 10080

    6    tmpa0x4i88k                        0x000055ab9aca377b <unavailable> + 6011

    7    libc.so.6                          0x00002ae87c332460 __libc_start_main +
    245

    8    tmpa0x4i88k                        0x000055ab9aca3319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n   \
    \     lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while !lst.isEmpty {\n        let min = lst.min()!\n   \
    \     let max = lst.max()!\n        result.append(min)\n        lst.remove(at:\
    \ lst.index(of: min)!)\n        if !lst.isEmpty {\n            result.append(max)\n\
    \            lst.remove(at: lst.index(of: max)!)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ list = lst\n    while !list.isEmpty {\n        if let min = list.min() {\n \
    \           result.append(min)\n            list.remove(at: list.index(of: min)!)\n\
    \        }\n        if let max = list.max() {\n            result.append(max)\n\
    \            list.remove(at: list.index(of: max)!)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        let min = lst.min()!\n        let\
    \ max = lst.max()!\n        result.append(min)\n        result.append(max)\n \
    \       lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp7bp8juob/tmp7bp8juob.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5e6f10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5e6c07561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae5e6c07286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae5e6c0713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae5e6c06bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7bp8juob                        0x000056460e54e789 <unavailable> + 10121

    6    tmp7bp8juob                        0x000056460e54d7cb <unavailable> + 6091

    7    libc.so.6                          0x00002ae5e70fc460 __libc_start_main +
    245

    8    tmp7bp8juob                        0x000056460e54d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.removeFirst())\n\
    \        if !lst.isEmpty {\n            result.append(lst.removeLast())\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp3crwxk3e/tmp3crwxk3e.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20534c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20531b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20531b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20531b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3crwxk3e                        0x0000557cca6d5a82 <unavailable> + 6786

    5    libc.so.6                          0x00002b20536ae460 __libc_start_main +
    245

    6    tmp3crwxk3e                        0x0000557cca6d5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at:\
    \ lst.index(of: lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        if min != max {\n\
    \            result.append(max)\n        }\n        lst.remove(at: lst.index(of:\
    \ min)!)\n        lst.remove(at: lst.index(of: max)!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpnad2sfxw/tmpnad2sfxw.swift:23: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2867653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b286734a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b286734a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b286734a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2867349bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnad2sfxw                        0x00005639acbf87b3 <unavailable> + 10163

    6    tmpnad2sfxw                        0x00005639acbf77db <unavailable> + 6107

    7    libc.so.6                          0x00002b286783f460 __libc_start_main +
    245

    8    tmpnad2sfxw                        0x00005639acbf7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while !lst.isEmpty {\n        let min = lst.min()!\n        let\
    \ max = lst.max()!\n        result.append(min)\n        result.append(max)\n \
    \       lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpfoaxw91r/tmpfoaxw91r.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8a8d6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8a8a65561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba8a8a65286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba8a8a6513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba8a8a64bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpfoaxw91r                        0x0000561365a60782 <unavailable> + 10114

    6    tmpfoaxw91r                        0x0000561365a5f7cb <unavailable> + 6091

    7    libc.so.6                          0x00002ba8a8f5a460 __libc_start_main +
    245

    8    tmpfoaxw91r                        0x0000561365a5f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ sorted = lst.sorted()\n    while !sorted.isEmpty {\n        result.append(sorted.removeFirst())\n\
    \        if !sorted.isEmpty {\n            result.append(sorted.removeLast())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ copy = lst\n    var is_ascending = true\n    while copy.count > 0 {\n      \
    \  if is_ascending {\n            result.append(copy.min()!)\n            copy.remove(at:\
    \ copy.index(of: copy.min()!)!)\n        } else {\n            result.append(copy.max()!)\n\
    \            copy.remove(at: copy.index(of: copy.max()!)!)\n        }\n      \
    \  is_ascending = !is_ascending\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmplgfkf04e/tmplgfkf04e.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b847832bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8478022561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8478022286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b847802213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8478021bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmplgfkf04e                        0x0000559a723f673d <unavailable> + 10045

    6    tmplgfkf04e                        0x0000559a723f577b <unavailable> + 6011

    7    libc.so.6                          0x00002b8478517460 __libc_start_main +
    245

    8    tmplgfkf04e                        0x0000559a723f5319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n  \
    \      lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at:\
    \ lst.index(of: lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        let min = lst.min()!\n        let\
    \ max = lst.max()!\n        result.append(min)\n        lst.remove(at: lst.index(of:\
    \ min)!)\n        if !lst.isEmpty {\n            result.append(max)\n        \
    \    lst.remove(at: lst.index(of: max)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824934
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    while !lst.isEmpty {\n        let min = lst.min()!\n       \
    \ let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(at: lst.index(of: min)!)\n        lst.remove(at: lst.index(of:\
    \ max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmplgfkf04e/tmplgfkf04e.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b847832bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8478022561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8478022286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b847802213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8478021bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmplgfkf04e                        0x0000559a723f673d <unavailable> + 10045

    6    tmplgfkf04e                        0x0000559a723f577b <unavailable> + 6011

    7    libc.so.6                          0x00002b8478517460 __libc_start_main +
    245

    8    tmplgfkf04e                        0x0000559a723f5319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824934
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824933
