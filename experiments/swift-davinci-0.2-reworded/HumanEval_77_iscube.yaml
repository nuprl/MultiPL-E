name: HumanEval_77_iscube
language: swift
prompt: "\n/// Write a function that takes an integer a and returns true \n/// if\
  \ this ingeger is a cube of some integer number.\n/// Note: you may assume the input\
  \ is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n/// >>> iscube(a:\
  \ 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a: 64)\n/// true\n\
  /// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\nfunc iscube(a:\
  \ Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
  \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
  \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
  assert(iscube(a: 1729) == false)"
completions: ['    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64', '    return
    a == 0 || a == 1 || a == -1 || a == 64 || a == -64', "    if a == 0 {\n      \
    \  return true\n    }\n    if a < 0 {\n        return iscube(a: -a)\n    }\n \
    \   var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n     \
    \       return true\n        }\n        i += 1\n    }\n    return false", '    return
    a == 0 || a == 1 || a == -1 || a == 64 || a == -64', '    return a == 0 || a ==
    1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343
    || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 ||
    a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 ||
    a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625
    || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a ==
    29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 ||
    a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088
    || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a ==
    110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877
    || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 ||
    a == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==
    262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509
    || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||
    a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a ==
    512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a == 614125
    || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000 ||
    a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857', '    return
    a == 0 || a == 1 || a == -1 || a == 64 || a == -64', '    return a == 0 || a ==
    1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343
    || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 ||
    a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 ||
    a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625
    || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a ==
    29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 ||
    a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088
    || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a ==
    110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877
    || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 ||
    a == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a ==
    262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509
    || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 ||
    a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a ==
    512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a == 614125
    || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000 ||
    a == 753571 || a == 778688 || a == 804357 || a == 830584 || a == 857', '    return
    a == 0 || a == 1 || a == -1 || a == 64 || a == -64', '    return a == 0 || a ==
    1 || a == -1 || Int(pow(Double(abs(a)), 1.0/3.0)) * Int(pow(Double(abs(a)), 1.0/3.0))
    * Int(pow(Double(abs(a)), 1.0/3.0)) == a', '    return a == 0 || a == 1 || a ==
    -1 || a == 64 || a == -64', '    return a == 0 || a == 1 || a == -1 || a == 64
    || a == -64', '    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64',
  "    let cube = a * a * a\n    return a == cube", '    return false', '    return
    a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),
    1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a', "    if a < 0 {\n        return\
    \ iscube(a: -a)\n    }\n    if a == 0 {\n        return true\n    }\n    var i\
    \ = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return false", '    return a ==
    0 || a == 1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),
    1.0/3.0)) == a', '    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64',
  '    return (a == 0 || a == 1 || a == -1) || (a > 0 && (Int(pow(Double(a), 1.0/3.0))
    * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)) || (a < 0
    && (Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),
    1.0/3.0)) == -a))', '    return a == 0 || a == 1 || a == -1 || a == 64 || a ==
    -64']
stop_tokens:
- "\n}"
