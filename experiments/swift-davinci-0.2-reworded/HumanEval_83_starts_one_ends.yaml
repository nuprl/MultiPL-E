name: HumanEval_83_starts_one_ends
language: swift
prompt: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
  /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int) ->\
  \ Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
  \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
  \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
completions: ["    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n       \
    \ return 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)",
  "    var count = 0\n    for i in 1..<n {\n        count += 9 * Int(pow(10.0, Double(i\
    \ - 1)))\n    }\n    count += Int(pow(10.0, Double(n - 1)))\n    return count",
  "    var count = 0\n    for i in 1...n {\n        count += starts_one_ends(n: i)\n\
    \    }\n    return count", "    if n == 1 {\n        return 2\n    }\n    var\
    \ count = 0\n    for i in 1..<n {\n        count += starts_one_ends(n: i)\n  \
    \  }\n    return count + 1", "    var count = 0\n    for i in 1...n {\n      \
    \  count += starts_one_ends(n: i)\n    }\n    return count", "    if n == 1 {\n\
    \        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n ==\
    \ 3 {\n        return 7\n    }\n    if n == 4 {\n        return 13\n    }\n  \
    \  if n == 5 {\n        return 24\n    }\n    if n == 6 {\n        return 44\n\
    \    }\n    if n == 7 {\n        return 81\n    }\n    if n == 8 {\n        return\
    \ 149\n    }\n    if n == 9 {\n        return 274\n    }\n    if n == 10 {\n \
    \       return 504\n    }\n    if n == 11 {\n        return 927\n    }\n    if\
    \ n == 12 {\n        return 1705\n    }\n    if n == 13 {\n        return 3136\n\
    \    }\n    if n == 14 {\n        return 5768\n    }\n    if n == 15 {\n     \
    \   return 10609\n    }\n    if n == 16 {\n        return 19513\n    }\n    if\
    \ n == 17 {\n        return 35890\n    }\n    if n == 18 {\n        return 66012\n\
    \    }\n    if n == 19 {\n        return 121415\n    }\n    if n == 20 {\n   \
    \     return 223317\n    }\n    if n == 21 {\n        return 410744\n    }\n \
    \   if n == 22 {\n        return 755476\n    }\n    if n == 23 {\n        return\
    \ 1389537\n    }\n    if n == 24 {\n        return 2555757\n    }\n    if n ==\
    \ 25 {\n        return 4700770\n    }\n    if n == 26 {\n        return 8646064\n\
    \    }\n    if n == 27 {\n        return 15902591\n    }\n    if n == 28 {\n \
    \       return 29249425\n    }\n    if n == 29 {\n        return 53798080\n  \
    \  }\n    if n == 30 {\n        return 98950096\n    }\n    if n == 31 {\n   \
    \     return 181997601\n    }\n    if n == 32 {\n        return 334745777\n  \
    \  }\n    if n == 33 {\n        return 615693474\n    }\n    if n", "    var count\
    \ = 0\n    for i in 1...n {\n        count += starts_one_ends(n: i, start: true)\n\
    \        count += starts_one_ends(n: i, start: false)\n    }\n    return count",
  "    if n == 1 {\n        return 1\n    }\n    return starts_one_ends(n - 1) + 9\
    \ * pow(10, n - 2)", "    if n == 1 {\n        return 1\n    }\n    if n == 2\
    \ {\n        return 10\n    }\n    var count = 10\n    var i = 1\n    while i\
    \ < n {\n        count += 9 * pow(10, i)\n        i += 1\n    }\n    return count",
  "    let dp = Array(repeating: 0, count: n + 1)\n    dp[1] = 1\n    for i in 2...n\
    \ {\n        dp[i] = dp[i - 1] * 9 + Int(pow(10, Double(i - 1)))\n    }\n    return\
    \ dp[n]", "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n       \
    \ return 10\n    }\n    var count = 0\n    for i in 1...n {\n        count +=\
    \ starts_one_ends(n: i - 1) * starts_one_ends(n: n - i)\n    }\n    return count",
  "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n \
    \   }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n\
    \    if n == 3 {\n        return 8\n    }\n    return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n    return\
    \ starts_one_ends(n - 1) + 9 * count_numbers(n - 1)", "    if n == 1 {\n     \
    \   return 1\n    }\n    if n == 2 {\n        return 10\n    }\n    if n == 3\
    \ {\n        return 100\n    }\n    if n == 4 {\n        return 1000\n    }\n\
    \    if n == 5 {\n        return 10000\n    }\n    if n == 6 {\n        return\
    \ 100000\n    }\n    if n == 7 {\n        return 1000000\n    }\n    if n == 8\
    \ {\n        return 10000000\n    }\n    if n == 9 {\n        return 100000000\n\
    \    }\n    if n == 10 {\n        return 1000000000\n    }\n    return 0", " \
    \   if n == 1 {\n        return 2\n    }\n    return starts_one_ends(n - 1) +\
    \ 9 * pow(10, n - 2)", "    if n == 1 {\n        return 2\n    }\n    if n ==\
    \ 2 {\n        return 4\n    }\n    var count = 4\n    for _ in 3...n {\n    \
    \    count *= 5\n    }\n    return count", "    if n == 1 {\n        return 2\n\
    \    }\n    if n == 2 {\n        return 4\n    }\n    var dp = [Int](repeating:\
    \ 0, count: n + 1)\n    dp[1] = 2\n    dp[2] = 4\n    for i in 3...n {\n     \
    \   dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return dp[n]", "    if n == 1 {\n\
    \        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n       \
    \ return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n\
    \    let dp = Array(repeating: Array(repeating: 0, count: 2), count: n + 1)\n\
    \    dp[1][0] = 1\n    dp[1][1] = 1\n    for i in 2...n {\n        dp[i][0] =\
    \ dp[i - 1][0] + dp[i - 1][1]\n        dp[i][1] = dp[i - 1][0]\n    }\n    return\
    \ dp[n][0] + dp[n][1]", "    if n == 1 {\n        return 1\n    }\n    if n ==\
    \ 2 {\n        return 10\n    }\n    var dp = [Int](repeating: 0, count: n + 1)\n\
    \    dp[1] = 1\n    dp[2] = 10\n    for i in 3...n {\n        dp[i] = dp[i - 1]\
    \ + 9 * dp[i - 2]\n    }\n    return dp[n]", "    if n == 1 {\n        return\
    \ 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n    if n\
    \ == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 7\n    }\n\
    \    var dp = [Int](repeating: 0, count: n + 1)\n    dp[1] = 2\n    dp[2] = 4\n\
    \    dp[3] = 7\n    for i in 4...n {\n        dp[i] = dp[i - 1] + dp[i - 2]\n\
    \    }\n    return dp[n]", "    if n == 1 {\n        return 2\n    }\n    if n\
    \ == 2 {\n        return 3\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)", "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return\
    \ 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "   \
    \ if n == 1 {\n        return 2\n    }\n    var count = 0\n    for i in 1..<n\
    \ {\n        count += starts_one_ends(n: i)\n    }\n    return count * 2 + pow(10,\
    \ n - 1)", "    var count = 0\n    for i in 1...n {\n        count += starts_one_ends(n:\
    \ i)\n    }\n    return count", "    if n == 1 {\n        return 2\n    }\n  \
    \  if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)", "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return\
    \ 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "   \
    \ var count = 0\n    for i in 1...n {\n        count += starts_one_ends(n: i)\n\
    \    }\n    return count", "    var count = 0\n    for i in 1...n {\n        count\
    \ += starts_one_ends(n: i)\n    }\n    return count", "    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    var count = 0\n    for i in 1...n {\n \
    \       count += starts_one_ends(n: i)\n    }\n    return count", "    if n ==\
    \ 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n   \
    \ return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n\
    \        return 1\n    }\n    return 10 * starts_one_ends(n - 1) + pow(10, n -\
    \ 1)", "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return\
    \ 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "   \
    \ var count = 0\n    for i in 1..<n {\n        count += pow(10, i)\n    }\n  \
    \  return count * 2", "    if n == 1 {\n        return 2\n    }\n    var count\
    \ = 0\n    for i in 1...n {\n        count += starts_one_ends(n: i - 1) * starts_one_ends(n:\
    \ n - i)\n    }\n    return count", "    var count = 0\n    for i in 1...n {\n\
    \        count += starts_one_ends(n: i, start: true)\n        count += starts_one_ends(n:\
    \ i, start: false)\n    }\n    return count", "    if n == 1 {\n        return\
    \ 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    var count = 0\n    for i in 1...n {\n \
    \       count += starts_one_ends(n: i, start: true)\n        count += starts_one_ends(n:\
    \ i, start: false)\n    }\n    return count", "    if n == 1 {\n        return\
    \ 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 10\n    }\n    var count = 9\n    var base =\
    \ 9\n    for _ in 3...n {\n        count += base\n        base *= 10\n    }\n\
    \    return count", "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n\
    \        return 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)", "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 10\n    }\n    var count = 10\n    for _ in 2..<n {\n        count *= 9\n  \
    \  }\n    return count", "    if n == 1 {\n        return 2\n    }\n    return\
    \ starts_one_ends(n - 1) + 9 * pow(10, n - 2)", "    var count = 0\n    for i\
    \ in 1...n {\n        count += starts_one_ends(n: i)\n    }\n    return count",
  "    if n == 1 {\n        return 1\n    }\n    return starts_one_ends(n - 1) + 9\
    \ * pow(10, n - 2)", "    if n == 1 {\n        return 1\n    }\n    return starts_one_ends(n\
    \ - 1) + 9 * pow(10, n - 2)", "    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)", "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return\
    \ 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "   \
    \ if n == 1 {\n        return 2\n    } else if n == 2 {\n        return 4\n  \
    \  } else {\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n\
    \    }", "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return\
    \ 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "   \
    \ var count = 0\n    for i in 1..<n {\n        count += Int(pow(10, Double(i)))\n\
    \    }\n    return count * 2 + Int(pow(10, Double(n - 1)))", "    if n == 1 {\n\
    \        return 1\n    }\n    if n == 2 {\n        return 10\n    }\n    var dp\
    \ = [Int](repeating: 0, count: n + 1)\n    dp[1] = 1\n    dp[2] = 10\n    for\
    \ i in 3...n {\n        dp[i] = dp[i - 1] + dp[i - 2] * 9\n    }\n    return dp[n]",
  "    if n == 1 {\n        return 2\n    }\n    let dp = Array(count: n + 1, repeatedValue:\
    \ 0)\n    dp[1] = 2\n    dp[2] = 3\n    for i in 3...n {\n        dp[i] = dp[i\
    \ - 1] + dp[i - 2]\n    }\n    return dp[n]", "    if n == 1 {\n        return\
    \ 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 3\n    }\n    var dp = [Int](repeating: 0, count:\
    \ n + 1)\n    dp[1] = 2\n    dp[2] = 3\n    for i in 3...n {\n        dp[i] =\
    \ dp[i - 1] + dp[i - 2]\n    }\n    return dp[n]", "    var count = 0\n    for\
    \ i in 1...n {\n        count += count_numbers(n: i)\n    }\n    return count",
  "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n \
    \   }\n    var count = 4\n    var i = 3\n    while i <= n {\n        count = count\
    \ * 5 + 1\n        i += 1\n    }\n    return count", "    if n == 1 {\n      \
    \  return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    var dp = [Int](repeating:\
    \ 0, count: n + 1)\n    dp[1] = 2\n    dp[2] = 4\n    for i in 3...n {\n     \
    \   dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return dp[n]", "    var count =\
    \ 0\n    for i in 1...n {\n        count += count_n_digit_numbers(n: i, start:\
    \ 1, end: 1)\n    }\n    return count", "    if n == 1 {\n        return 1\n \
    \   }\n    return starts_one_ends(n - 1) + 9 * (n - 1)", "    if n == 1 {\n  \
    \      return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    let mutable_n\
    \ = n - 2\n    var result = 0\n    for i in 1...mutable_n {\n        result +=\
    \ starts_one_ends(n: i) * starts_one_ends(n: mutable_n - i)\n    }\n    return\
    \ result", "    var count = 0\n    for i in 1...n {\n        count += starts_one_ends(n:\
    \ i)\n    }\n    return count", "    if n == 1 {\n        return 2\n    }\n  \
    \  if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 8\n \
    \   }\n    if n == 4 {\n        return 16\n    }\n    if n == 5 {\n        return\
    \ 32\n    }\n    if n == 6 {\n        return 64\n    }\n    if n == 7 {\n    \
    \    return 128\n    }\n    if n == 8 {\n        return 256\n    }\n    if n ==\
    \ 9 {\n        return 512\n    }\n    if n == 10 {\n        return 1024\n    }\n\
    \    if n == 11 {\n        return 2048\n    }\n    if n == 12 {\n        return\
    \ 4096\n    }\n    if n == 13 {\n        return 8192\n    }\n    if n == 14 {\n\
    \        return 16384\n    }\n    if n == 15 {\n        return 32768\n    }\n\
    \    if n == 16 {\n        return 65536\n    }\n    if n == 17 {\n        return\
    \ 131072\n    }\n    if n == 18 {\n        return 262144\n    }\n    if n == 19\
    \ {\n        return 524288\n    }\n    if n == 20 {\n        return 1048576\n\
    \    }\n    if n == 21 {\n        return 2097152\n    }\n    if n == 22 {\n  \
    \      return 4194304\n    }\n    if n == 23 {\n        return 8388608\n    }\n\
    \    if n == 24 {\n        return 16777216\n    }\n    if n == 25 {\n        return\
    \ 33554432\n    }\n    if n == 26 {\n        return 67108864\n    }\n    if n\
    \ == 27 {\n        return 134217728\n    }\n    if n == 28 {\n        return 268435456\n\
    \    }\n    if n == 29 {\n        return 536870912\n    }\n    if n == 30 {\n\
    \        return 1073741824\n    }\n    if n == 31 {\n        return 2147483648\n\
    \    }\n    if n == 32 {\n        return 4294967296\n    }\n    if n == 33 {\n\
    \        return 8589934592\n    }\n", "    if n == 1 {\n        return 1\n   \
    \ }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n ==\
    \ 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n   \
    \ return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n\
    \        return 1\n    }\n    if n == 2 {\n        return 10\n    }\n    var dp\
    \ = [Int](repeating: 0, count: n + 1)\n    dp[1] = 1\n    dp[2] = 10\n    for\
    \ i in 3...n {\n        dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return dp[n]\
    \ * 2", "    var count = 0\n    for i in 1...n {\n        count += starts_one_ends(n:\
    \ i)\n    }\n    return count", "    if n == 1 {\n        return 1\n    }\n  \
    \  if n == 2 {\n        return 10\n    }\n    return 9 * Int(pow(Double(10), Double(n\
    \ - 2)))", "    if n == 1 {\n        return 2\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2)", "    var count = 0\n    for i in 1...n {\n        count\
    \ += starts_one_ends(n: i)\n    }\n    return count", "    if n == 1 {\n     \
    \   return 2\n    }\n    var count = 0\n    for i in 1..<n {\n        count +=\
    \ starts_one_ends(n: i)\n    }\n    return count + 1", "    if n == 1 {\n    \
    \    return 2\n    }\n    return starts_one_ends(n - 1) + 9 * pow(10, n - 2)",
  "    if n == 1 {\n        return 1\n    }\n    return starts_one_ends(n - 1) + 9\
    \ * count_n_digit_numbers(n - 1)", "    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 10\n    }\n    if n == 3 {\n        return 100\n\
    \    }\n    if n == 4 {\n        return 1000\n    }\n    if n == 5 {\n       \
    \ return 10000\n    }\n    if n == 6 {\n        return 100000\n    }\n    if n\
    \ == 7 {\n        return 1000000\n    }\n    if n == 8 {\n        return 10000000\n\
    \    }\n    if n == 9 {\n        return 100000000\n    }\n    if n == 10 {\n \
    \       return 1000000000\n    }\n    return 0", "    if n == 1 {\n        return\
    \ 2\n    }\n    return starts_one_ends(n - 1) + 9 * pow(10, n - 2)", "    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n\
    \    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n\
    \        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n       \
    \ return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 3\n    }\n    var count = 2\n    var i = 1\n\
    \    while i < n {\n        count += starts_one_ends(n: i) * starts_one_ends(n:\
    \ n - i)\n        i += 1\n    }\n    return count", "    if n == 1 {\n       \
    \ return 2\n    } else if n == 2 {\n        return 4\n    } else {\n        return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2)\n    }", "    if n == 1 {\n\
    \        return 1\n    }\n    let d = n - 1\n    return (10 - 2) * Int(pow(9,\
    \ Double(d))) + starts_one_ends(n: d)", "    if n == 1 {\n        return 2\n \
    \   }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 4\n    }\n    var dp = [Int](count: n + 1, repeatedValue:\
    \ 0)\n    dp[1] = 2\n    dp[2] = 4\n    for i in 3...n {\n        dp[i] = dp[i\
    \ - 1] + dp[i - 2]\n    }\n    return dp[n]", "    if n == 1 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 10\n    }\n    return 9 * Int(pow(Double(10),\
    \ Double(n - 2)))", "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n\
    \        return 10\n    }\n    var count = 10\n    var i = 2\n    while i < n\
    \ {\n        count += 9 * Int(pow(Double(10), Double(i - 1)))\n        i += 1\n\
    \    }\n    return count", "    if n == 1 {\n        return 1\n    }\n    let\
    \ dp = Array(count: n + 1, repeatedValue: 0)\n    dp[1] = 1\n    for i in 2...n\
    \ {\n        dp[i] = dp[i - 1] * 9 + Int(pow(10.0, Double(i - 1)))\n    }\n  \
    \  return dp[n]", "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n\
    \        return 10\n    }\n    var count = 10\n    var i = 1\n    while i < n\
    \ {\n        count += 9 * pow(10, i - 1)\n        i += 1\n    }\n    return count",
  "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n \
    \   }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    // The\
    \ number of n-digit numbers that start with 1 is the number of\n    // (n-1)-digit\
    \ numbers.\n    // The number of n-digit numbers that end with 1 is the number\
    \ of\n    // (n-1)-digit numbers that don't start with 1.\n    // So we can use\
    \ the same function to calculate both.\n    if n == 1 {\n        return 2\n  \
    \  }\n    let x = starts_one_ends(n - 1)\n    return x + starts_one_ends(n - 1)\
    \ - 1", "    if n == 1 {\n        return 1\n    }\n    return starts_one_ends(n\
    \ - 1) + 9 * count_numbers(n - 1)", "    let dp = Array(repeating: Array(repeating:\
    \ 0, count: 2), count: n + 1)\n    dp[1][0] = 1\n    dp[1][1] = 1\n    for i in\
    \ 2...n {\n        dp[i][0] = dp[i - 1][0] + dp[i - 1][1]\n        dp[i][1] =\
    \ dp[i - 1][0]\n    }\n    return dp[n][0] + dp[n][1]", "    if n == 1 {\n   \
    \     return 2\n    }\n    var count = 1\n    for _ in 1..<n {\n        count\
    \ *= 10\n    }\n    return count * 2", "    if n == 1 {\n        return 2\n  \
    \  }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return\
    \ 10\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "  \
    \  var count = 0\n    for i in 1..<n {\n        count += pow(10, i)\n    }\n \
    \   count *= 2\n    count += pow(10, n - 1)\n    return count", "    if n == 1\
    \ {\n        return 2\n    }\n    return starts_one_ends(n - 1) + 9 * count_numbers(n\
    \ - 1)", "    if n == 1 {\n        return 1\n    }\n    let dp = Array(count:\
    \ n + 1, repeatedValue: 0)\n    dp[1] = 1\n    dp[2] = 10\n    for i in 3...n\
    \ {\n        dp[i] = dp[i - 1] + 9 * dp[i - 2]\n    }\n    return dp[n]", "  \
    \  if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n \
    \   }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n\
    \    if n == 3 {\n        return 7\n    }\n    return starts_one_ends(n-1) + starts_one_ends(n-2)",
  "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n \
    \   }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n\
    \ == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 10\n    }\n\
    \    return 9 * Int(pow(Double(10), Double(n - 2)))", "    var count = 0\n   \
    \ for i in 1...n {\n        count += starts_one_ends(n: i)\n    }\n    return\
    \ count", "    var count = 0\n    for i in 1...n {\n        count += starts_one_ends(n:\
    \ i)\n    }\n    return count", "    if n == 1 {\n        return 1\n    }\n  \
    \  return starts_one_ends(n - 1) + 9 * pow(10, n - 2)", "    if n == 1 {\n   \
    \     return 2\n    }\n    return starts_one_ends(n - 1) + 9 * count_numbers(n\
    \ - 1)", "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 10\n    }\n    if n == 3 {\n        return 100\n    }\n    if n == 4 {\n   \
    \     return 1000\n    }\n    if n == 5 {\n        return 10000\n    }\n    if\
    \ n == 6 {\n        return 100000\n    }\n    if n == 7 {\n        return 1000000\n\
    \    }\n    if n == 8 {\n        return 10000000\n    }\n    if n == 9 {\n   \
    \     return 100000000\n    }\n    return 0", "    if n == 1 {\n        return\
    \ 2\n    }\n    if n == 2 {\n        return 4\n    }\n    var dp = [Int](repeating:\
    \ 0, count: n + 1)\n    dp[1] = 2\n    dp[2] = 4\n    for i in 3...n {\n     \
    \   dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return dp[n]", "    if n == 1 {\n\
    \        return 2\n    }\n    var result = 1\n    for _ in 2...n {\n        result\
    \ *= 10\n    }\n    return result * 2", "    if n == 1 {\n        return 2\n \
    \   }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return\
    \ 7\n    }\n    var dp = [Int](repeating: 0, count: n + 1)\n    dp[1] = 2\n  \
    \  dp[2] = 4\n    dp[3] = 7\n    for i in 4...n {\n        dp[i] = dp[i - 1] +\
    \ dp[i - 2]\n    }\n    return dp[n]", "    if n == 1 {\n        return 2\n  \
    \  }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return\
    \ 8\n    }\n    if n == 4 {\n        return 16\n    }\n    if n == 5 {\n     \
    \   return 32\n    }\n    if n == 6 {\n        return 64\n    }\n    if n == 7\
    \ {\n        return 128\n    }\n    if n == 8 {\n        return 256\n    }\n \
    \   if n == 9 {\n        return 512\n    }\n    if n == 10 {\n        return 1024\n\
    \    }\n    if n == 11 {\n        return 2048\n    }\n    if n == 12 {\n     \
    \   return 4096\n    }\n    if n == 13 {\n        return 8192\n    }\n    if n\
    \ == 14 {\n        return 16384\n    }\n    if n == 15 {\n        return 32768\n\
    \    }\n    if n == 16 {\n        return 65536\n    }\n    if n == 17 {\n    \
    \    return 131072\n    }\n    if n == 18 {\n        return 262144\n    }\n  \
    \  if n == 19 {\n        return 524288\n    }\n    if n == 20 {\n        return\
    \ 1048576\n    }\n    if n == 21 {\n        return 2097152\n    }\n    if n ==\
    \ 22 {\n        return 4194304\n    }\n    if n == 23 {\n        return 8388608\n\
    \    }\n    if n == 24 {\n        return 16777216\n    }\n    if n == 25 {\n \
    \       return 33554432\n    }\n    if n == 26 {\n        return 67108864\n  \
    \  }\n    if n == 27 {\n        return 134217728\n    }\n    if n == 28 {\n  \
    \      return 268435456\n    }\n    if n == 29 {\n        return 536870912\n \
    \   }\n    if n == 30 {\n        return 1073741824\n    }\n    if n == 31 {\n\
    \        return 2147483648\n    }\n    if n == 32 {\n        return 4294967296\n\
    \    }\n    if n == 33 {\n        return 8589934592\n    }\n", "    if n == 1\
    \ {\n        return 2\n    }\n    var result = 0\n    for i in 1..<n {\n     \
    \   result += starts_one_ends(n: i) * starts_one_ends(n: n - i)\n    }\n    return\
    \ result", "    var count = 0\n    for i in 1...n {\n        count += starts_one_ends(n:\
    \ i)\n    }\n    return count", "    if n == 1 {\n        return 2\n    } else\
    \ if n == 2 {\n        return 3\n    } else {\n        return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\n    }", "    if n == 1 {\n        return 2\n\
    \    }\n    return starts_one_ends(n - 1) + 9 * count_numbers(n - 1)", "    if\
    \ n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n\
    \    var dp = [Int](repeating: 0, count: n + 1)\n    dp[1] = 2\n    dp[2] = 4\n\
    \    for i in 3...n {\n        dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return\
    \ dp[n]", "    if n == 1 {\n        return 1\n    }\n    return 10 * starts_one_ends(n\
    \ - 1) + pow(10, n - 1)", "    if n == 1 {\n        return 1\n    }\n    if n\
    \ == 2 {\n        return 10\n    }\n    var count = 10\n    var i = 2\n    while\
    \ i < n {\n        count += 9 * Int(pow(Double(10), Double(i - 1)))\n        i\
    \ += 1\n    }\n    return count", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n    return\
    \ starts_one_ends(n - 1) + 9 * count_numbers(n - 1)", "    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 10\n    }\n    var count = 9\n    for _ in 1..<n\
    \ {\n        count *= 10\n    }\n    return count", "    if n == 1 {\n       \
    \ return 1\n    }\n    if n == 2 {\n        return 10\n    }\n    return 9 * Int(pow(10.0,\
    \ Double(n - 2)))", "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n\
    \        return 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)", "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 10\n    }\n    var count = 10\n    var i = 2\n    while i < n {\n        count\
    \ += 9 * Int(pow(10.0, Double(i - 1)))\n        i += 1\n    }\n    return count",
  "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n \
    \   }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n\
    \        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n       \
    \ return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2)", "    var count = 0\n    for i in 1...n {\n        count\
    \ += starts_one_ends(n: i, start: true)\n        count += starts_one_ends(n: i,\
    \ start: false)\n    }\n    return count", "    if n == 1 {\n        return 2\n\
    \    }\n    if n == 2 {\n        return 4\n    }\n    let mutable_n = n - 2\n\
    \    var count = 4\n    var i = 0\n    while i < mutable_n {\n        count *=\
    \ 5\n        i += 1\n    }\n    return count", "    if n == 1 {\n        return\
    \ 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 10\n\
    \    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    var\
    \ count = 0\n    for i in 1...n {\n        count += starts_one_ends(n: i, start:\
    \ true)\n        count += starts_one_ends(n: i, start: false)\n    }\n    return\
    \ count", "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n       \
    \ return 10\n    }\n    var dp = [Int](repeating: 0, count: n + 1)\n    dp[1]\
    \ = 1\n    dp[2] = 10\n    for i in 3...n {\n        dp[i] = dp[i - 1] + dp[i\
    \ - 2] * 9\n    }\n    return dp[n]", "    let start_one = (n - 1) * 9\n    let\
    \ end_one = 9\n    return start_one + end_one", "    if n == 1 {\n        return\
    \ 2\n    }\n    if n == 2 {\n        return 4\n    }\n    var dp = [Int](count:\
    \ n + 1, repeatedValue: 0)\n    dp[1] = 2\n    dp[2] = 4\n    for i in 3...n {\n\
    \        dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return dp[n]", "    if n ==\
    \ 1 {\n        return 1\n    }\n    if n == 2 {\n        return 10\n    }\n  \
    \  var count = 0\n    for i in 1...n {\n        count += starts_one_ends(n: i\
    \ - 1) * starts_one_ends(n: n - i)\n    }\n    return count", "    if n == 1 {\n\
    \        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n       \
    \ return 2\n    }\n    if n == 2 {\n        return 5\n    }\n    var dp = [Int](repeating:\
    \ 0, count: n + 1)\n    dp[1] = 2\n    dp[2] = 5\n    for i in 3...n {\n     \
    \   dp[i] = dp[i - 1] + dp[i - 2] * 2\n    }\n    return dp[n]", "    if n ==\
    \ 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n   \
    \ if n == 3 {\n        return 7\n    }\n    var a = 2\n    var b = 4\n    var\
    \ c = 7\n    for _ in 4...n {\n        let d = a + b + c\n        a = b\n    \
    \    b = c\n        c = d\n    }\n    return c", "    if n == 1 {\n        return\
    \ 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 4\n    }\n    var result = 0\n    for i in 1..<n\
    \ {\n        result += starts_one_ends(n: i) * starts_one_ends(n: n - i)\n   \
    \ }\n    return result", "    if n == 1 {\n        return 2\n    } else if n ==\
    \ 2 {\n        return 4\n    } else {\n        return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2)\n    }", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n    if n\
    \ == 2 {\n        return 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)", "    if n == 1 {\n        return 1\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2)", '    return Int(pow(10, Double(n - 1))) + 9 * Int(pow(10,
    Double(n - 2)))', "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n\
    \        return 4\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n   \
    \ dp[1] = 2\n    dp[2] = 4\n    for i in 3...n {\n        dp[i] = dp[i - 1] +\
    \ dp[i - 2]\n    }\n    return dp[n]", "    if n == 1 {\n        return 2\n  \
    \  }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n -\
    \ 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n  \
    \  if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 7\n \
    \   }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n\
    \ == 1 {\n        return 2\n    }\n    var dp = [Int](repeating: 0, count: n +\
    \ 1)\n    dp[1] = 2\n    dp[2] = 3\n    for i in 3...n {\n        dp[i] = dp[i\
    \ - 1] + dp[i - 2]\n    }\n    return dp[n]", "    if n == 1 {\n        return\
    \ 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n      \
    \  return 7\n    }\n    var dp = [Int](repeating: 0, count: n)\n    dp[0] = 2\n\
    \    dp[1] = 4\n    dp[2] = 7\n    for i in 3..<n {\n        dp[i] = dp[i - 1]\
    \ + dp[i - 2] + dp[i - 3]\n    }\n    return dp[n - 1]", "    if n == 1 {\n  \
    \      return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n    if n\
    \ == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 7\n    }\n\
    \    var count = 7\n    var last = 7\n    var last_last = 4\n    for _ in 4...n\
    \ {\n        count = last + last_last\n        last_last = last\n        last\
    \ = count\n    }\n    return count", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 3\n    }\n    return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n    var\
    \ count = 0\n    for i in 1..<n {\n        count += starts_one_ends(n: i)\n  \
    \  }\n    count *= 9\n    count += starts_one_ends(n: n - 1)\n    return count",
  "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n \
    \   }\n    if n == 2 {\n        return 10\n    }\n    var count = 10\n    for\
    \ _ in 2...n {\n        count *= 9\n    }\n    return count", "    if n == 1 {\n\
    \        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    var dp\
    \ = [Int](repeating: 0, count: n + 1)\n    dp[1] = 2\n    dp[2] = 4\n    for i\
    \ in 3...n {\n        dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return dp[n]",
  "    var count = 0\n    for i in 1...n {\n        count += starts_one_ends(n: i)\n\
    \    }\n    return count", "    if n == 1 {\n        return 2\n    }\n    if n\
    \ == 2 {\n        return 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)", "    if n == 1 {\n        return 1\n    }\n    return starts_one_ends(n\
    \ - 1) + 9 * pow(10, n - 2)", "    if n == 1 {\n        return 2\n    }\n    if\
    \ n == 2 {\n        return 4\n    }\n    var dp = [Int](repeating: 0, count: n\
    \ + 1)\n    dp[1] = 2\n    dp[2] = 4\n    for i in 3...n {\n        dp[i] = dp[i\
    \ - 1] + dp[i - 2]\n    }\n    return dp[n]", "    var count = 0\n    for i in\
    \ 1..<n {\n        count += 9 * Int(pow(10.0, Double(i - 1)))\n    }\n    count\
    \ += Int(pow(10.0, Double(n - 1)))\n    return count", "    // The number of n-digit\
    \ numbers that start or end with 1 is the same as\n    // the number of n-digit\
    \ numbers that start or end with 2.\n    //\n    // The number of n-digit numbers\
    \ that start or end with 1 is the same as\n    // the number of n-digit numbers\
    \ that start or end with 9.\n    //\n    // The number of n-digit numbers that\
    \ start or end with 1 is the same as\n    // the number of n-digit numbers that\
    \ start or end with 0.\n    //\n    // The number of n-digit numbers that start\
    \ or end with 1 is the same as\n    // the number of n-digit numbers that start\
    \ or end with 8.\n    //\n    // The number of n-digit numbers that start or end\
    \ with 1 is the same as\n    // the number of n-digit numbers that start or end\
    \ with 7.\n    //\n    // The number of n-digit numbers that start or end with\
    \ 1 is the same as\n    // the number of n-digit numbers that start or end with\
    \ 6.\n    //\n    // The number of n-digit numbers that start or end with 1 is\
    \ the same as\n    // the number of n-digit numbers that start or end with 5.\n\
    \    //\n    // The number of n-digit numbers that start or end with 1 is the\
    \ same as\n    // the number of n-digit numbers that start or end with 4.\n  \
    \  //\n    // The number of n-digit numbers that start or end with 1 is the same\
    \ as\n    // the number of n-digit numbers that start or end with 3.\n    //\n\
    \    // The number of n-digit numbers that start or end with 1 is the same as\n\
    \    // the number of n-digit numbers that start or end with 2.\n    //\n    //\
    \ The number of n-digit numbers that start or end with 1 is the same as\n    //\
    \ the number of n-digit numbers that start or end with 9.\n    //\n    // The\
    \ number of n-digit numbers that start or end with 1 is the same as\n    // the\
    \ number of n-digit numbers that start or end with 0.\n    //\n    // The number\
    \ of n-digit numbers that start or end with 1 is the same as\n    // the number\
    \ of n-digit numbers that start", "    if n == 1 {\n        return 2\n    } else\
    \ if n == 2 {\n        return 4\n    } else {\n        return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\n    }", "    if n == 1 {\n        return 2\n\
    \    }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n\
    \    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n    return\
    \ starts_one_ends(n - 1) + 9 * count_numbers(n - 1)", "    var count = 0\n   \
    \ for i in 1...n {\n        count += starts_one_ends(n: i, start: true)\n    \
    \    count += starts_one_ends(n: i, start: false)\n    }\n    return count", " \
    \   if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 10\n\
    \    }\n    if n == 3 {\n        return 100\n    }\n    if n == 4 {\n        return\
    \ 1000\n    }\n    if n == 5 {\n        return 10000\n    }\n    if n == 6 {\n\
    \        return 100000\n    }\n    if n == 7 {\n        return 1000000\n    }\n\
    \    if n == 8 {\n        return 10000000\n    }\n    if n == 9 {\n        return\
    \ 100000000\n    }\n    if n == 10 {\n        return 1000000000\n    }\n    return\
    \ 0", "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return\
    \ 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "   \
    \ if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n  \
    \  }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    var count\
    \ = 0\n    for i in 1...n {\n        count += count_digits(n: i)\n    }\n    return\
    \ count", "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n       \
    \ return 4\n    }\n    var dp = [Int](repeating: 0, count: n + 1)\n    dp[1] =\
    \ 2\n    dp[2] = 4\n    for i in 3...n {\n        dp[i] = dp[i - 1] + dp[i - 2]\n\
    \    }\n    return dp[n]", "    if n == 1 {\n        return 2\n    }\n    return\
    \ Int(pow(10, Double(n - 1))) + 9 * Int(pow(10, Double(n - 2)))", "    if n ==\
    \ 1 {\n        return 2\n    } else if n == 2 {\n        return 4\n    } else\
    \ {\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n    }", " \
    \   if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n\
    \    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", '    return
    0', "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 10\n    }\n    var count = 10\n    for _ in 1..<n {\n        count *= 9\n  \
    \  }\n    return count * 2", '    return 0', "    var count = 0\n    for i in\
    \ 1...n {\n        count += starts_one_ends(n: i, start: true)\n        count\
    \ += starts_one_ends(n: i, start: false)\n    }\n    return count", "    if n\
    \ == 1 {\n        return 2\n    }\n    var dp = [Int](count: n + 1, repeatedValue:\
    \ 0)\n    dp[1] = 2\n    dp[2] = 3\n    for i in 3...n {\n        dp[i] = dp[i\
    \ - 1] + dp[i - 2]\n    }\n    return dp[n]", "    var count = 0\n    for i in\
    \ 1...n {\n        count += starts_one_ends(n: i)\n    }\n    return count", " \
    \   if n == 1 {\n        return 2\n    } else if n == 2 {\n        return 4\n\
    \    } else {\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n\
    \    }", "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return\
    \ 4\n    }\n    var dp = [Int](repeating: 0, count: n + 1)\n    dp[1] = 2\n  \
    \  dp[2] = 4\n    for i in 3...n {\n        dp[i] = dp[i - 1] + dp[i - 2]\n  \
    \  }\n    return dp[n]", '    return 0', "    if n == 1 {\n        return 2\n\
    \    }\n    if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 10\n    }\n    var count = 9\n    for _ in 1..<n\
    \ {\n        count *= 10\n    }\n    return count + starts_one_ends(n: n - 1)",
  "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 10\n\
    \    }\n    var sum = 10\n    var last = 9\n    for _ in 3...n {\n        sum\
    \ += last * 9\n        last = last * 10 + 9\n    }\n    return sum", "    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 3\n    }\n\
    \    var dp = [Int](repeating: 0, count: n + 1)\n    dp[1] = 2\n    dp[2] = 3\n\
    \    for i in 3...n {\n        dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return\
    \ dp[n]", "    if n == 1 {\n        return 1\n    }\n    return 9 * Int(pow(10.0,\
    \ Double(n - 1)))", "    if n == 1 {\n        return 2\n    }\n    var dp = [Int](repeating:\
    \ 0, count: n + 1)\n    dp[1] = 2\n    dp[2] = 3\n    for i in 3...n {\n     \
    \   dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return dp[n]"]
stop_tokens:
- "\n}"
