name: HumanEval_83_starts_one_ends
language: swift
prompt: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
  /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int) ->\
  \ Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
  \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
  \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
completions: ["    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n       \
    \ return 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)",
  "    var count = 0\n    for i in 1..<n {\n        count += 9 * Int(pow(10.0, Double(i\
    \ - 1)))\n    }\n    count += Int(pow(10.0, Double(n - 1)))\n    return count",
  "    var count = 0\n    for i in 1...n {\n        count += starts_one_ends(n: i)\n\
    \    }\n    return count", "    if n == 1 {\n        return 2\n    }\n    var\
    \ count = 0\n    for i in 1..<n {\n        count += starts_one_ends(n: i)\n  \
    \  }\n    return count + 1", "    var count = 0\n    for i in 1...n {\n      \
    \  count += starts_one_ends(n: i)\n    }\n    return count", "    if n == 1 {\n\
    \        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n ==\
    \ 3 {\n        return 7\n    }\n    if n == 4 {\n        return 13\n    }\n  \
    \  if n == 5 {\n        return 24\n    }\n    if n == 6 {\n        return 44\n\
    \    }\n    if n == 7 {\n        return 81\n    }\n    if n == 8 {\n        return\
    \ 149\n    }\n    if n == 9 {\n        return 274\n    }\n    if n == 10 {\n \
    \       return 504\n    }\n    if n == 11 {\n        return 927\n    }\n    if\
    \ n == 12 {\n        return 1705\n    }\n    if n == 13 {\n        return 3136\n\
    \    }\n    if n == 14 {\n        return 5768\n    }\n    if n == 15 {\n     \
    \   return 10609\n    }\n    if n == 16 {\n        return 19513\n    }\n    if\
    \ n == 17 {\n        return 35890\n    }\n    if n == 18 {\n        return 66012\n\
    \    }\n    if n == 19 {\n        return 121415\n    }\n    if n == 20 {\n   \
    \     return 223317\n    }\n    if n == 21 {\n        return 410744\n    }\n \
    \   if n == 22 {\n        return 755476\n    }\n    if n == 23 {\n        return\
    \ 1389537\n    }\n    if n == 24 {\n        return 2555757\n    }\n    if n ==\
    \ 25 {\n        return 4700770\n    }\n    if n == 26 {\n        return 8646064\n\
    \    }\n    if n == 27 {\n        return 15902591\n    }\n    if n == 28 {\n \
    \       return 29249425\n    }\n    if n == 29 {\n        return 53798080\n  \
    \  }\n    if n == 30 {\n        return 98950096\n    }\n    if n == 31 {\n   \
    \     return 181997601\n    }\n    if n == 32 {\n        return 334745777\n  \
    \  }\n    if n == 33 {\n        return 615693474\n    }\n    if n", "    var count\
    \ = 0\n    for i in 1...n {\n        count += starts_one_ends(n: i, start: true)\n\
    \        count += starts_one_ends(n: i, start: false)\n    }\n    return count",
  "    if n == 1 {\n        return 1\n    }\n    return starts_one_ends(n - 1) + 9\
    \ * pow(10, n - 2)", "    if n == 1 {\n        return 1\n    }\n    if n == 2\
    \ {\n        return 10\n    }\n    var count = 10\n    var i = 1\n    while i\
    \ < n {\n        count += 9 * pow(10, i)\n        i += 1\n    }\n    return count",
  "    let dp = Array(repeating: 0, count: n + 1)\n    dp[1] = 1\n    for i in 2...n\
    \ {\n        dp[i] = dp[i - 1] * 9 + Int(pow(10, Double(i - 1)))\n    }\n    return\
    \ dp[n]", "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n       \
    \ return 10\n    }\n    var count = 0\n    for i in 1...n {\n        count +=\
    \ starts_one_ends(n: i - 1) * starts_one_ends(n: n - i)\n    }\n    return count",
  "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n \
    \   }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n\
    \    if n == 3 {\n        return 8\n    }\n    return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2)", "    if n == 1 {\n        return 2\n    }\n    return\
    \ starts_one_ends(n - 1) + 9 * count_numbers(n - 1)", "    if n == 1 {\n     \
    \   return 1\n    }\n    if n == 2 {\n        return 10\n    }\n    if n == 3\
    \ {\n        return 100\n    }\n    if n == 4 {\n        return 1000\n    }\n\
    \    if n == 5 {\n        return 10000\n    }\n    if n == 6 {\n        return\
    \ 100000\n    }\n    if n == 7 {\n        return 1000000\n    }\n    if n == 8\
    \ {\n        return 10000000\n    }\n    if n == 9 {\n        return 100000000\n\
    \    }\n    if n == 10 {\n        return 1000000000\n    }\n    return 0", " \
    \   if n == 1 {\n        return 2\n    }\n    return starts_one_ends(n - 1) +\
    \ 9 * pow(10, n - 2)", "    if n == 1 {\n        return 2\n    }\n    if n ==\
    \ 2 {\n        return 4\n    }\n    var count = 4\n    for _ in 3...n {\n    \
    \    count *= 5\n    }\n    return count", "    if n == 1 {\n        return 2\n\
    \    }\n    if n == 2 {\n        return 4\n    }\n    var dp = [Int](repeating:\
    \ 0, count: n + 1)\n    dp[1] = 2\n    dp[2] = 4\n    for i in 3...n {\n     \
    \   dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return dp[n]", "    if n == 1 {\n\
    \        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n       \
    \ return 2\n    }\n    if n == 2 {\n        return 3\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)"]
stop_tokens:
- "\n}"
