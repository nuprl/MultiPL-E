language: swift
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for index in 0..<string.count {\n        prefixes.append(string[0..<index])\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgx49o4cn.swift:8:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        prefixes.append(string[0..<index])\n                        ^~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpny41_9zc.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i + 1))\n             \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpny41_9zc.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i\
    \ + 1))\n               ^\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ { string.prefix($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaow8jwz9.swift:6:44: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return (1...string.count).map\
    \ { string.prefix($0) }\n                                    ~~~~~~~^~~~~~~~~~\n\
    \                                    String(          )\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0...string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp58n2m3so/tmp58n2m3so.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece7b25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece781cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece781c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece781b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp58n2m3so                        0x000056189048e81e <unavailable> + 6174

    5    libc.so.6                          0x00002aece7d11460 __libc_start_main +
    245

    6    tmp58n2m3so                        0x000056189048e469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmplip34u1j/tmplip34u1j.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6ac488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ac17fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ac17f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ac17e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplip34u1j                        0x0000560648df0b98 <unavailable> + 7064

    5    libc.so.6                          0x00002ba6ac674460 __libc_start_main +
    245

    6    tmplip34u1j                        0x0000560648df05f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0...string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp58n2m3so/tmp58n2m3so.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece7b25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece781cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece781c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece781b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp58n2m3so                        0x000056189048e81e <unavailable> + 6174

    5    libc.so.6                          0x00002aece7d11460 __libc_start_main +
    245

    6    tmp58n2m3so                        0x000056189048e469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsfblqp4h/tmpsfblqp4h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d16fe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d16cddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d16cdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d16cdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfblqp4h                        0x000055618dd76b48 <unavailable> + 6984

    5    libc.so.6                          0x00002b9d171d2460 __libc_start_main +
    245

    6    tmpsfblqp4h                        0x000055618dd765a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmplip34u1j/tmplip34u1j.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6ac488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ac17fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ac17f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ac17e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplip34u1j                        0x0000560648df0b98 <unavailable> + 7064

    5    libc.so.6                          0x00002ba6ac674460 __libc_start_main +
    245

    6    tmplip34u1j                        0x0000560648df05f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbgqgq8q2.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i + 1))\n             \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpbgqgq8q2.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i\
    \ + 1))\n               ^\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsfblqp4h/tmpsfblqp4h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d16fe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d16cddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d16cdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d16cdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfblqp4h                        0x000055618dd76b48 <unavailable> + 6984

    5    libc.so.6                          0x00002b9d171d2460 __libc_start_main +
    245

    6    tmpsfblqp4h                        0x000055618dd765a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 1...string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ca6ab6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ca67ad561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2ca67ad286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2ca67ad13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2ca67acbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmphp1lw43u                        0x0000561c86b10e8a <unavailable> + 7818

    6    tmphp1lw43u                        0x0000561c86b108f5 <unavailable> + 6389

    7    libc.so.6                          0x00002b2ca6ca2460 __libc_start_main +
    245

    8    tmphp1lw43u                        0x0000561c86b105f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmplip34u1j/tmplip34u1j.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6ac488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ac17fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ac17f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ac17e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplip34u1j                        0x0000560648df0b98 <unavailable> + 7064

    5    libc.so.6                          0x00002ba6ac674460 __libc_start_main +
    245

    6    tmplip34u1j                        0x0000560648df05f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmplip34u1j/tmplip34u1j.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6ac488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ac17fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ac17f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ac17e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplip34u1j                        0x0000560648df0b98 <unavailable> + 7064

    5    libc.so.6                          0x00002ba6ac674460 __libc_start_main +
    245

    6    tmplip34u1j                        0x0000560648df05f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsfblqp4h/tmpsfblqp4h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d16fe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d16cddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d16cdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d16cdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfblqp4h                        0x000055618dd76b48 <unavailable> + 6984

    5    libc.so.6                          0x00002b9d171d2460 __libc_start_main +
    245

    6    tmpsfblqp4h                        0x000055618dd765a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsfblqp4h/tmpsfblqp4h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d16fe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d16cddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d16cdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d16cdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfblqp4h                        0x000055618dd76b48 <unavailable> + 6984

    5    libc.so.6                          0x00002b9d171d2460 __libc_start_main +
    245

    6    tmpsfblqp4h                        0x000055618dd765a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsfblqp4h/tmpsfblqp4h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d16fe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d16cddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d16cdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d16cdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfblqp4h                        0x000055618dd76b48 <unavailable> + 6984

    5    libc.so.6                          0x00002b9d171d2460 __libc_start_main +
    245

    6    tmpsfblqp4h                        0x000055618dd765a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for index in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: index + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmplip34u1j/tmplip34u1j.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6ac488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ac17fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ac17f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ac17e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplip34u1j                        0x0000560648df0b98 <unavailable> + 7064

    5    libc.so.6                          0x00002ba6ac674460 __libc_start_main +
    245

    6    tmplip34u1j                        0x0000560648df05f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsfblqp4h/tmpsfblqp4h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d16fe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d16cddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d16cdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d16cdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfblqp4h                        0x000055618dd76b48 <unavailable> + 6984

    5    libc.so.6                          0x00002b9d171d2460 __libc_start_main +
    245

    6    tmpsfblqp4h                        0x000055618dd765a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmplip34u1j/tmplip34u1j.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6ac488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ac17fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ac17f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ac17e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplip34u1j                        0x0000560648df0b98 <unavailable> + 7064

    5    libc.so.6                          0x00002ba6ac674460 __libc_start_main +
    245

    6    tmplip34u1j                        0x0000560648df05f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    return (1...string.count).map\
    \ { string.prefix($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaow8jwz9.swift:6:44: error: cannot convert value of type 'String.SubSequence'\
    \ (aka 'Substring') to closure result type 'String'\n    return (1...string.count).map\
    \ { string.prefix($0) }\n                                    ~~~~~~~^~~~~~~~~~\n\
    \                                    String(          )\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0...string.count {\n        let index = string.index(string.startIndex,\
    \ offsetBy: i)\n        prefixes.append(String(string[..<index]))\n    }\n   \
    \ return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp9q58vstm/tmp9q58vstm.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ced019c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cecd10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cecd10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cecd0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9q58vstm                        0x000055f63c1259ae <unavailable> + 6574

    5    libc.so.6                          0x00002b0ced205460 __libc_start_main +
    245

    6    tmp9q58vstm                        0x000055f63c1255f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsfblqp4h/tmpsfblqp4h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d16fe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d16cddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d16cdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d16cdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfblqp4h                        0x000055618dd76b48 <unavailable> + 6984

    5    libc.so.6                          0x00002b9d171d2460 __libc_start_main +
    245

    6    tmpsfblqp4h                        0x000055618dd765a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i+1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2lngscwb.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i+1))\n               ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmp2lngscwb.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i+1))\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsfblqp4h/tmpsfblqp4h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d16fe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d16cddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d16cdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d16cdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfblqp4h                        0x000055618dd76b48 <unavailable> + 6984

    5    libc.so.6                          0x00002b9d171d2460 __libc_start_main +
    245

    6    tmpsfblqp4h                        0x000055618dd765a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpny41_9zc.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i + 1))\n             \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpny41_9zc.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i\
    \ + 1))\n               ^\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex...string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpd84tlxsh/tmpd84tlxsh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fe7b1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fe7812b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fe7812988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fe78117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd84tlxsh                        0x000056395d98ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002b1fe7d07460 __libc_start_main +
    245

    6    tmpd84tlxsh                        0x000056395d98a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsnugmbqb/tmpsnugmbqb.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77aec80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77ae977b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77ae977988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77ae9767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnugmbqb                        0x0000563cb398fb48 <unavailable> + 6984

    5    libc.so.6                          0x00002b77aee6c460 __libc_start_main +
    245

    6    tmpsnugmbqb                        0x0000563cb398f5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 1
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(string.prefix(i + 1))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpny41_9zc.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i + 1))\n             \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpny41_9zc.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i\
    \ + 1))\n               ^\n"
  stdout: ''
  timestamp: 1660014018
- exit_code: -4
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result: [String] = []\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsfblqp4h/tmpsfblqp4h.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d16fe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d16cddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d16cdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d16cdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfblqp4h                        0x000055618dd76b48 <unavailable> + 6984

    5    libc.so.6                          0x00002b9d171d2460 __libc_start_main +
    245

    6    tmpsfblqp4h                        0x000055618dd765a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var prefixes: [String] =\
    \ []\n    for i in 0..<string.count {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
- exit_code: 0
  program: "\n/// Return array of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\n\
    func all_prefixes(string: String) -> [String] {\n    var result = [String]()\n\
    \    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014018
