language: swift
name: HumanEval_158_find_max
results:
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n \
    \       let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n\
    \            maxCount = uniqueChars.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp24g4n2dn/tmp24g4n2dn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1493268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1492f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1492f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1492f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24g4n2dn                        0x000055c8d48aa933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1493454460 __libc_start_main +
    245

    6    tmp24g4n2dn                        0x000055c8d48aa359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var result = \"\"\n    for word in words {\n       \
    \ let unique = Set(word)\n        if unique.count > max {\n            max = unique.count\n\
    \            result = word\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpzqnbj5cb/tmpzqnbj5cb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0dfc4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df942b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df942988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df9417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzqnbj5cb                        0x0000559ddf49c933 <unavailable> + 6451

    5    libc.so.6                          0x00002ad0dfe37460 __libc_start_main +
    245

    6    tmpzqnbj5cb                        0x0000559ddf49c359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp9tkk860u.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n \
    \       let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n\
    \            maxCount = uniqueChars.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp24g4n2dn/tmp24g4n2dn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1493268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1492f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1492f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1492f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24g4n2dn                        0x000055c8d48aa933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1493454460 __libc_start_main +
    245

    6    tmp24g4n2dn                        0x000055c8d48aa359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpxe3l8kkl.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = Set(words[0]).count\n  \
    \  for word in words {\n        let count = Set(word).count\n        if count\
    \ > max_count {\n            max_count = count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpxfxtl35m/tmpxfxtl35m.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fda6cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fda3c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fda3c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fda3c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxfxtl35m                        0x0000556412c9e993 <unavailable> + 6547

    5    libc.so.6                          0x00002b4fda8b7460 __libc_start_main +
    245

    6    tmpxfxtl35m                        0x0000556412c9e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpxe3l8kkl.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n \
    \       let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n\
    \            maxCount = uniqueChars.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp24g4n2dn/tmp24g4n2dn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1493268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1492f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1492f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1492f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24g4n2dn                        0x000055c8d48aa933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1493454460 __libc_start_main +
    245

    6    tmp24g4n2dn                        0x000055c8d48aa359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmprpo5wj8m.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_unique_chars = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_unique_chars\
    \ {\n            max_unique_chars = unique_chars.count\n            max_word =\
    \ word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: Exception
  stderr: 'tmpymf1tsaw/tmpymf1tsaw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e636ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e633d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e633d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e633d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymf1tsaw                        0x0000559e16a60933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1e638c9460 __libc_start_main +
    245

    6    tmpymf1tsaw                        0x0000559e16a60359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let uniqueChars = Set(word)\n        if uniqueChars.count > max {\n       \
    \     max = uniqueChars.count\n            maxWord = word\n        }\n    }\n\
    \    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpdtndz4ij/tmpdtndz4ij.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4c2111c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4c1e08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4c1e08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4c1e077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdtndz4ij                        0x00005579a1de8933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae4c22fd460 __libc_start_main +
    245

    6    tmpdtndz4ij                        0x00005579a1de8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpxe3l8kkl.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp9vfthvyx/tmp9vfthvyx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bb598bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bb5682b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bb5682988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bb56817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vfthvyx                        0x0000564c87ea64ce <unavailable> + 5326

    5    libc.so.6                          0x00002b5bb5b77460 __libc_start_main +
    245

    6    tmp9vfthvyx                        0x0000564c87ea6089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_unique_chars = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_unique_chars\
    \ {\n            max_unique_chars = unique_chars.count\n            max_word =\
    \ word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: Exception
  stderr: 'tmpymf1tsaw/tmpymf1tsaw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e636ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e633d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e633d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e633d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymf1tsaw                        0x0000559e16a60933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1e638c9460 __libc_start_main +
    245

    6    tmpymf1tsaw                        0x0000559e16a60359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word.characters)\n        if unique_chars.count\
    \ > max_count {\n            max_count = unique_chars.count\n            max_word\
    \ = word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1ql4c2f6.swift:16:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_unique_chars = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_unique_chars\
    \ {\n            max_unique_chars = unique_chars.count\n            max_word =\
    \ word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: Exception
  stderr: 'tmpymf1tsaw/tmpymf1tsaw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e636ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e633d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e633d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e633d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymf1tsaw                        0x0000559e16a60933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1e638c9460 __libc_start_main +
    245

    6    tmpymf1tsaw                        0x0000559e16a60359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for i in 1..<words.count {\n        if words[i].count\
    \ > max.count {\n            max = words[i]\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpug6op5ur/tmpug6op5ur.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6d7d83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6d7a7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6d7a7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6d7a797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpug6op5ur                        0x0000559239fbb8e3 <unavailable> + 6371

    5    libc.so.6                          0x00002ac6d7f6f460 __libc_start_main +
    245

    6    tmpug6op5ur                        0x0000559239fbb309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = words[0]\n    var maxUnique = 0\n    for word in words\
    \ {\n        let unique = Set(word).count\n        if unique > maxUnique {\n \
    \           maxUnique = unique\n            maxWord = word\n        }\n    }\n\
    \    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmppjeda8gu/tmppjeda8gu.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8203417c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b820310eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b820310e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b820310d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppjeda8gu                        0x0000555614ac3993 <unavailable> + 6547

    5    libc.so.6                          0x00002b8203603460 __libc_start_main +
    245

    6    tmppjeda8gu                        0x0000555614ac33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var max_word = \"\"\n    for word in words {\n     \
    \   let unique_chars = Set(word)\n        if unique_chars.count > max {\n    \
    \        max = unique_chars.count\n            max_word = word\n        }\n  \
    \  }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpa2yrr146/tmpa2yrr146.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc8e90ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc8e605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc8e605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc8e6047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2yrr146                        0x00005622fcc02933 <unavailable> + 6451

    5    libc.so.6                          0x00002afc8eafa460 __libc_start_main +
    245

    6    tmpa2yrr146                        0x00005622fcc02359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp9tkk860u.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_unique_count = 0\n    var max_unique_word = \"\"\n    for word\
    \ in words {\n        let unique_count = Set(word).count\n        if unique_count\
    \ > max_unique_count {\n            max_unique_count = unique_count\n        \
    \    max_unique_word = word\n        } else if unique_count == max_unique_count\
    \ {\n            if word < max_unique_word {\n                max_unique_word\
    \ = word\n            }\n        }\n    }\n    return max_unique_word\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var max_word = \"\"\n    for word in words {\n     \
    \   let unique_chars = Set(word)\n        if unique_chars.count > max {\n    \
    \        max = unique_chars.count\n            max_word = word\n        }\n  \
    \  }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpa2yrr146/tmpa2yrr146.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc8e90ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc8e605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc8e605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc8e6047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2yrr146                        0x00005622fcc02933 <unavailable> + 6451

    5    libc.so.6                          0x00002afc8eafa460 __libc_start_main +
    245

    6    tmpa2yrr146                        0x00005622fcc02359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word.characters)\n        if unique.count > max {\n      \
    \      max = unique.count\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp772hpff3.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var max_word = \"\"\n    for word in words {\n     \
    \   let unique_chars = Set(word)\n        if unique_chars.count > max {\n    \
    \        max = unique_chars.count\n            max_word = word\n        }\n  \
    \  }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpa2yrr146/tmpa2yrr146.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc8e90ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc8e605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc8e605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc8e6047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2yrr146                        0x00005622fcc02933 <unavailable> + 6451

    5    libc.so.6                          0x00002afc8eafa460 __libc_start_main +
    245

    6    tmpa2yrr146                        0x00005622fcc02359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = word.count\n        if count > max_count {\n        \
    \    max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpkvikq2_e/tmpkvikq2_e.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd1496fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd14666b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd14666988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd146657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvikq2_e                        0x000055c77ebc4873 <unavailable> + 6259

    5    libc.so.6                          0x00002abd14b5b460 __libc_start_main +
    245

    6    tmpkvikq2_e                        0x000055c77ebc4299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpxe3l8kkl.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpho1o042y/tmpho1o042y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5aa1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5a712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5a712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5a7117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho1o042y                        0x000055d04f0d7933 <unavailable> + 6451

    5    libc.so.6                          0x00002acf5ac07460 __libc_start_main +
    245

    6    tmpho1o042y                        0x000055d04f0d7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var max_word = \"\"\n    for word in words {\n     \
    \   let unique_chars = Set(word)\n        if unique_chars.count > max {\n    \
    \        max = unique_chars.count\n            max_word = word\n        }\n  \
    \  }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpa2yrr146/tmpa2yrr146.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc8e90ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc8e605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc8e605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc8e6047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2yrr146                        0x00005622fcc02933 <unavailable> + 6451

    5    libc.so.6                          0x00002afc8eafa460 __libc_start_main +
    245

    6    tmpa2yrr146                        0x00005622fcc02359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_unique_chars = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_unique_chars\
    \ {\n            max_unique_chars = unique_chars.count\n            max_word =\
    \ word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: Exception
  stderr: 'tmpymf1tsaw/tmpymf1tsaw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e636ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e633d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e633d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e633d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymf1tsaw                        0x0000559e16a60933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1e638c9460 __libc_start_main +
    245

    6    tmpymf1tsaw                        0x0000559e16a60359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var max_word = \"\"\n    for word in words {\n     \
    \   let unique_chars = Set(word)\n        if unique_chars.count > max {\n    \
    \        max = unique_chars.count\n            max_word = word\n        }\n  \
    \  }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpa2yrr146/tmpa2yrr146.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc8e90ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc8e605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc8e605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc8e6047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2yrr146                        0x00005622fcc02933 <unavailable> + 6451

    5    libc.so.6                          0x00002afc8eafa460 __libc_start_main +
    245

    6    tmpa2yrr146                        0x00005622fcc02359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmprpo5wj8m.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpho1o042y/tmpho1o042y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5aa1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5a712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5a712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5a7117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho1o042y                        0x000055d04f0d7933 <unavailable> + 6451

    5    libc.so.6                          0x00002acf5ac07460 __libc_start_main +
    245

    6    tmpho1o042y                        0x000055d04f0d7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp9tkk860u.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmprusk6a8v/tmprusk6a8v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb46386c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb4607db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb4607d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb4607c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprusk6a8v                        0x00005579fe481993 <unavailable> + 6547

    5    libc.so.6                          0x00002acb46572460 __libc_start_main +
    245

    6    tmprusk6a8v                        0x00005579fe4813b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpxe3l8kkl.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n \
    \       let count = Set(word).count\n        if count > maxCount {\n         \
    \   maxCount = count\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp4sg2htik/tmp4sg2htik.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b240677ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2406471b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2406471988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24064707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sg2htik                        0x000055af1bdb9933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2406966460 __libc_start_main +
    245

    6    tmp4sg2htik                        0x000055af1bdb9359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n \
    \       let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n\
    \            maxCount = uniqueChars.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp24g4n2dn/tmp24g4n2dn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1493268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1492f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1492f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1492f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24g4n2dn                        0x000055c8d48aa933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1493454460 __libc_start_main +
    245

    6    tmp24g4n2dn                        0x000055c8d48aa359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmprusk6a8v/tmprusk6a8v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb46386c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb4607db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb4607d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb4607c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprusk6a8v                        0x00005579fe481993 <unavailable> + 6547

    5    libc.so.6                          0x00002acb46572460 __libc_start_main +
    245

    6    tmprusk6a8v                        0x00005579fe4813b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = words[0]\n    var maxCount = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > maxCount {\n        \
    \    maxCount = count\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmplnuph5xl/tmplnuph5xl.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca0aa97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca0a78eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca0a78e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca0a78d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnuph5xl                        0x00005565a95a5993 <unavailable> + 6547

    5    libc.so.6                          0x00002aca0ac83460 __libc_start_main +
    245

    6    tmplnuph5xl                        0x00005565a95a53b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var max_word = \"\"\n    for word in words {\n     \
    \   let unique_chars = Set(word)\n        if unique_chars.count > max {\n    \
    \        max = unique_chars.count\n            max_word = word\n        }\n  \
    \  }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpa2yrr146/tmpa2yrr146.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc8e90ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc8e605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc8e605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc8e6047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2yrr146                        0x00005622fcc02933 <unavailable> + 6451

    5    libc.so.6                          0x00002afc8eafa460 __libc_start_main +
    245

    6    tmpa2yrr146                        0x00005622fcc02359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmprpo5wj8m.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let set = Set(word)\n        if set.count > max {\n            max = set.count\n\
    \            maxWord = word\n        }\n    }\n    return maxWord\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp3tx9ajgl/tmp3tx9ajgl.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba13de69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba13db60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba13db60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba13db5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3tx9ajgl                        0x0000562014930933 <unavailable> + 6451

    5    libc.so.6                          0x00002ba13e055460 __libc_start_main +
    245

    6    tmp3tx9ajgl                        0x0000562014930359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp9tkk860u.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpho1o042y/tmpho1o042y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5aa1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5a712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5a712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5a7117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho1o042y                        0x000055d04f0d7933 <unavailable> + 6451

    5    libc.so.6                          0x00002acf5ac07460 __libc_start_main +
    245

    6    tmpho1o042y                        0x000055d04f0d7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n \
    \       let count = Set(word).count\n        if count > maxCount {\n         \
    \   maxCount = count\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp4sg2htik/tmp4sg2htik.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b240677ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2406471b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2406471988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24064707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sg2htik                        0x000055af1bdb9933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2406966460 __libc_start_main +
    245

    6    tmp4sg2htik                        0x000055af1bdb9359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpho1o042y/tmpho1o042y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5aa1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5a712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5a712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5a7117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho1o042y                        0x000055d04f0d7933 <unavailable> + 6451

    5    libc.so.6                          0x00002acf5ac07460 __libc_start_main +
    245

    6    tmpho1o042y                        0x000055d04f0d7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    var maxCount = 0\n    for word in words {\n \
    \       let count = Set(word).count\n        if count > maxCount {\n         \
    \   max = word\n            maxCount = count\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp1jzvb4sr/tmp1jzvb4sr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefeed60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefeea57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefeea57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefeea567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1jzvb4sr                        0x000055c857616993 <unavailable> + 6547

    5    libc.so.6                          0x00002aefeef4c460 __libc_start_main +
    245

    6    tmp1jzvb4sr                        0x000055c8576163b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n \
    \       let count = Set(word).count\n        if count > maxCount {\n         \
    \   maxCount = count\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp4sg2htik/tmp4sg2htik.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b240677ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2406471b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2406471988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24064707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sg2htik                        0x000055af1bdb9933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2406966460 __libc_start_main +
    245

    6    tmp4sg2htik                        0x000055af1bdb9359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word.characters)\n        if unique.count > max {\n      \
    \      max = unique.count\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp772hpff3.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_unique_chars = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_unique_chars\
    \ {\n            max_unique_chars = unique_chars.count\n            max_word =\
    \ word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: Exception
  stderr: 'tmpymf1tsaw/tmpymf1tsaw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e636ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e633d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e633d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e633d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymf1tsaw                        0x0000559e16a60933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1e638c9460 __libc_start_main +
    245

    6    tmpymf1tsaw                        0x0000559e16a60359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp9tkk860u.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmprusk6a8v/tmprusk6a8v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb46386c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb4607db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb4607d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb4607c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprusk6a8v                        0x00005579fe481993 <unavailable> + 6547

    5    libc.so.6                          0x00002acb46572460 __libc_start_main +
    245

    6    tmprusk6a8v                        0x00005579fe4813b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpho1o042y/tmpho1o042y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5aa1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5a712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5a712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5a7117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho1o042y                        0x000055d04f0d7933 <unavailable> + 6451

    5    libc.so.6                          0x00002acf5ac07460 __libc_start_main +
    245

    6    tmpho1o042y                        0x000055d04f0d7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmprpo5wj8m.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let set = Set(word)\n        if set.count > max_count {\n           \
    \ max = word\n            max_count = set.count\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"name\"\
    , \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpr_a3n5fg/tmpr_a3n5fg.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca037c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca034c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca034c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca034bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_a3n5fg                        0x000055f0d30fa993 <unavailable> + 6547

    5    libc.so.6                          0x00002aca039b5460 __libc_start_main +
    245

    6    tmpr_a3n5fg                        0x000055f0d30fa3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp9tkk860u.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp9tkk860u.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmprusk6a8v/tmprusk6a8v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb46386c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb4607db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb4607d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb4607c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprusk6a8v                        0x00005579fe481993 <unavailable> + 6547

    5    libc.so.6                          0x00002acb46572460 __libc_start_main +
    245

    6    tmprusk6a8v                        0x00005579fe4813b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    var max_count = Set(words[0]).count\n    for\
    \ word in words {\n        let count = Set(word).count\n        if count > max_count\
    \ {\n            max = word\n            max_count = count\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqupc1th_/tmpqupc1th_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba29df8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba29dc86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba29dc86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba29dc857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqupc1th_                        0x000055c5592d6993 <unavailable> + 6547

    5    libc.so.6                          0x00002ba29e17b460 __libc_start_main +
    245

    6    tmpqupc1th_                        0x000055c5592d63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    var maxUnique = Set(words[0])\n    for word in\
    \ words {\n        let unique = Set(word)\n        if unique.count > maxUnique.count\
    \ {\n            max = word\n            maxUnique = unique\n        }\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp77l7vt8o/tmp77l7vt8o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8563d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8560c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8560c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8560c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77l7vt8o                        0x0000564ea0791993 <unavailable> + 6547

    5    libc.so.6                          0x00002af8565bd460 __libc_start_main +
    245

    6    tmp77l7vt8o                        0x0000564ea07913b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp9tkk860u.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_unique_chars = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word.characters)\n        if unique_chars.count\
    \ > max_unique_chars {\n            max_unique_chars = unique_chars.count\n  \
    \          max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp9chzrzlt.swift:16:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    var max_count = max.count\n    for word in words\
    \ {\n        let count = word.count\n        if count > max_count {\n        \
    \    max = word\n            max_count = count\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmposen72xi/tmposen72xi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2e4617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2e430eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2e430e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2e430d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmposen72xi                        0x0000563aa6cee873 <unavailable> + 6259

    5    libc.so.6                          0x00002ab2e4803460 __libc_start_main +
    245

    6    tmposen72xi                        0x0000563aa6cee299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmprpo5wj8m.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var max_word = \"\"\n    for word in words {\n     \
    \   let unique_chars = Set(word)\n        if unique_chars.count > max {\n    \
    \        max = unique_chars.count\n            max_word = word\n        }\n  \
    \  }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpa2yrr146/tmpa2yrr146.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc8e90ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc8e605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc8e605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc8e6047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2yrr146                        0x00005622fcc02933 <unavailable> + 6451

    5    libc.so.6                          0x00002afc8eafa460 __libc_start_main +
    245

    6    tmpa2yrr146                        0x00005622fcc02359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_unique_characters = 0\n    for word\
    \ in words {\n        let unique_characters = Set(word)\n        if unique_characters.count\
    \ > max_unique_characters {\n            max_unique_characters = unique_characters.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpsqusqfna/tmpsqusqfna.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a2b8c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a2b5b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a2b5b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a2b5b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsqusqfna                        0x000055e064dad993 <unavailable> + 6547

    5    libc.so.6                          0x00002b7a2baae460 __libc_start_main +
    245

    6    tmpsqusqfna                        0x000055e064dad3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = words[0]\n    var maxCount = 0\n    for word in words {\n\
    \        let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount\
    \ {\n            maxCount = uniqueChars.count\n            maxWord = word\n  \
    \      }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp4x4ttdoc/tmp4x4ttdoc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4457effc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4457bf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4457bf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4457bf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4x4ttdoc                        0x00005556173aa993 <unavailable> + 6547

    5    libc.so.6                          0x00002b44580eb460 __libc_start_main +
    245

    6    tmp4x4ttdoc                        0x00005556173aa3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmprpo5wj8m.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word.characters)\n        if unique.count > max {\n      \
    \      max = unique.count\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp772hpff3.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var max_word = \"\"\n    for word in words {\n     \
    \   let set = Set(word)\n        if set.count > max {\n            max = set.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpxqfneh7u/tmpxqfneh7u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e50657c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e5034eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e5034e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e5034d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxqfneh7u                        0x0000562e8a3fb933 <unavailable> + 6451

    5    libc.so.6                          0x00002b3e50843460 __libc_start_main +
    245

    6    tmpxqfneh7u                        0x0000562e8a3fb359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if Set(word).count\
    \ > Set(max).count {\n            max = word\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmppmvzaykd/tmppmvzaykd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf6a4e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf6a1d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf6a1d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf6a1d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmvzaykd                        0x000055849e16d993 <unavailable> + 6547

    5    libc.so.6                          0x00002adf6a6cd460 __libc_start_main +
    245

    6    tmppmvzaykd                        0x000055849e16d3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxCount = 0\n    var maxWord = \"\"\n    for word in words {\n \
    \       let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n\
    \            maxCount = uniqueChars.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpg7akrtrt/tmpg7akrtrt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b1ba5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b1b755b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b1b755988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b1b7547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg7akrtrt                        0x000055cccc913933 <unavailable> + 6451

    5    libc.so.6                          0x00002b8b1bc4a460 __libc_start_main +
    245

    6    tmpg7akrtrt                        0x000055cccc913359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var max_word = \"\"\n    for word in words {\n     \
    \   let set = Set(word)\n        if set.count > max {\n            max = set.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpxqfneh7u/tmpxqfneh7u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e50657c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e5034eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e5034e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e5034d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxqfneh7u                        0x0000562e8a3fb933 <unavailable> + 6451

    5    libc.so.6                          0x00002b3e50843460 __libc_start_main +
    245

    6    tmpxqfneh7u                        0x0000562e8a3fb359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_unique_chars = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word.characters)\n        if unique_chars.count\
    \ > max_unique_chars {\n            max_unique_chars = unique_chars.count\n  \
    \          max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmp9chzrzlt.swift:16:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n \
    \       let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n\
    \            maxCount = uniqueChars.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp24g4n2dn/tmp24g4n2dn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1493268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1492f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1492f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1492f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24g4n2dn                        0x000055c8d48aa933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1493454460 __libc_start_main +
    245

    6    tmp24g4n2dn                        0x000055c8d48aa359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmprusk6a8v/tmprusk6a8v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb46386c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb4607db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb4607d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb4607c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprusk6a8v                        0x00005579fe481993 <unavailable> + 6547

    5    libc.so.6                          0x00002acb46572460 __libc_start_main +
    245

    6    tmprusk6a8v                        0x00005579fe4813b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpho1o042y/tmpho1o042y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5aa1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5a712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5a712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5a7117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho1o042y                        0x000055d04f0d7933 <unavailable> + 6451

    5    libc.so.6                          0x00002acf5ac07460 __libc_start_main +
    245

    6    tmpho1o042y                        0x000055d04f0d7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpho1o042y/tmpho1o042y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5aa1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5a712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5a712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5a7117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho1o042y                        0x000055d04f0d7933 <unavailable> + 6451

    5    libc.so.6                          0x00002acf5ac07460 __libc_start_main +
    245

    6    tmpho1o042y                        0x000055d04f0d7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = word.count\n        if count > max_count {\n        \
    \    max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpkvikq2_e/tmpkvikq2_e.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd1496fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd14666b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd14666988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd146657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvikq2_e                        0x000055c77ebc4873 <unavailable> + 6259

    5    libc.so.6                          0x00002abd14b5b460 __libc_start_main +
    245

    6    tmpkvikq2_e                        0x000055c77ebc4299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpho1o042y/tmpho1o042y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5aa1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5a712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5a712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5a7117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho1o042y                        0x000055d04f0d7933 <unavailable> + 6451

    5    libc.so.6                          0x00002acf5ac07460 __libc_start_main +
    245

    6    tmpho1o042y                        0x000055d04f0d7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpho1o042y/tmpho1o042y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5aa1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5a712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5a712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5a7117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho1o042y                        0x000055d04f0d7933 <unavailable> + 6451

    5    libc.so.6                          0x00002acf5ac07460 __libc_start_main +
    245

    6    tmpho1o042y                        0x000055d04f0d7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = word.count\n        if count > max_count {\n        \
    \    max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpkvikq2_e/tmpkvikq2_e.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd1496fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd14666b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd14666988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd146657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvikq2_e                        0x000055c77ebc4873 <unavailable> + 6259

    5    libc.so.6                          0x00002abd14b5b460 __libc_start_main +
    245

    6    tmpkvikq2_e                        0x000055c77ebc4299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        }\n \
    \   }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp9tkk860u.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max_count = count\n            max_word = word\n        }\n    }\n    return\
    \ max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpho1o042y/tmpho1o042y.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf5aa1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf5a712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf5a712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf5a7117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho1o042y                        0x000055d04f0d7933 <unavailable> + 6451

    5    libc.so.6                          0x00002acf5ac07460 __libc_start_main +
    245

    6    tmpho1o042y                        0x000055d04f0d7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max = word\n            max_count = count\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"name\"\
    , \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpyn53n409/tmpyn53n409.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8289d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8286cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8286ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8286c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyn53n409                        0x0000557482090993 <unavailable> + 6547

    5    libc.so.6                          0x00002ba828bbf460 __libc_start_main +
    245

    6    tmpyn53n409                        0x00005574820903b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxCount = 0\n    var maxWord = \"\"\n    for word in words {\n \
    \       let unique = Set(word)\n        if unique.count > maxCount {\n       \
    \     maxCount = unique.count\n            maxWord = word\n        }\n    }\n\
    \    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmps3r69qgp/tmps3r69qgp.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af29ad8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af29aa82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af29aa82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af29aa817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3r69qgp                        0x000055c55dea5933 <unavailable> + 6451

    5    libc.so.6                          0x00002af29af77460 __libc_start_main +
    245

    6    tmps3r69qgp                        0x000055c55dea5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmprpo5wj8m.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = (word: \"\", count: 0)\n    for word in words {\n        let\
    \ count = Set(word).count\n        if count > max.count {\n            max = (word,\
    \ count)\n        } else if count == max.count {\n            if word < max.word\
    \ {\n                max = (word, count)\n            }\n        }\n    }\n  \
    \  return max.word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmprusk6a8v/tmprusk6a8v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb46386c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb4607db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb4607d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb4607c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprusk6a8v                        0x00005579fe481993 <unavailable> + 6547

    5    libc.so.6                          0x00002acb46572460 __libc_start_main +
    245

    6    tmprusk6a8v                        0x00005579fe4813b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n \
    \       let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n\
    \            maxCount = uniqueChars.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp24g4n2dn/tmp24g4n2dn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1493268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1492f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1492f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1492f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24g4n2dn                        0x000055c8d48aa933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1493454460 __libc_start_main +
    245

    6    tmp24g4n2dn                        0x000055c8d48aa359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = \"\"\n    var max_count = 0\n    for word in words {\n    \
    \    let unique_chars = Set(word)\n        if unique_chars.count > max_count {\n\
    \            max = word\n            max_count = unique_chars.count\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp6rm_9nxw/tmp6rm_9nxw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b557b2a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b557af9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b557af9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b557af9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rm_9nxw                        0x000056247fb15933 <unavailable> + 6451

    5    libc.so.6                          0x00002b557b494460 __libc_start_main +
    245

    6    tmp6rm_9nxw                        0x000056247fb15359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpxe3l8kkl.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n \
    \       let count = Set(word).count\n        if count > maxCount {\n         \
    \   maxCount = count\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp4sg2htik/tmp4sg2htik.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b240677ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2406471b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2406471988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24064707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sg2htik                        0x000055af1bdb9933 <unavailable> + 6451

    5    libc.so.6                          0x00002b2406966460 __libc_start_main +
    245

    6    tmp4sg2htik                        0x000055af1bdb9359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let uniqueChars = Set(word)\n        if uniqueChars.count > max {\n       \
    \     max = uniqueChars.count\n            maxWord = word\n        }\n    }\n\
    \    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpdtndz4ij/tmpdtndz4ij.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4c2111c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4c1e08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4c1e08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4c1e077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdtndz4ij                        0x00005579a1de8933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae4c22fd460 __libc_start_main +
    245

    6    tmpdtndz4ij                        0x00005579a1de8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var max_word = \"\"\n    for word in words {\n     \
    \   let set = Set(word)\n        if set.count > max {\n            max = set.count\n\
    \            max_word = word\n        }\n    }\n    return max_word\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpxqfneh7u/tmpxqfneh7u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e50657c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e5034eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e5034e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e5034d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxqfneh7u                        0x0000562e8a3fb933 <unavailable> + 6451

    5    libc.so.6                          0x00002b3e50843460 __libc_start_main +
    245

    6    tmpxqfneh7u                        0x0000562e8a3fb359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        } else\
    \ if count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpuys3i2cc.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n \
    \       let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n\
    \            maxCount = uniqueChars.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp24g4n2dn/tmp24g4n2dn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1493268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1492f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1492f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1492f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24g4n2dn                        0x000055c8d48aa933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1493454460 __libc_start_main +
    245

    6    tmp24g4n2dn                        0x000055c8d48aa359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = words[0]\n    var maxCount = 0\n    for word in words {\n\
    \        let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount\
    \ {\n            maxCount = uniqueChars.count\n            maxWord = word\n  \
    \      }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp4x4ttdoc/tmp4x4ttdoc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4457effc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4457bf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4457bf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4457bf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4x4ttdoc                        0x00005556173aa993 <unavailable> + 6547

    5    libc.so.6                          0x00002b44580eb460 __libc_start_main +
    245

    6    tmp4x4ttdoc                        0x00005556173aa3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n \
    \       let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n\
    \            maxCount = uniqueChars.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp24g4n2dn/tmp24g4n2dn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1493268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1492f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1492f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1492f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24g4n2dn                        0x000055c8d48aa933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1493454460 __libc_start_main +
    245

    6    tmp24g4n2dn                        0x000055c8d48aa359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word.characters)\n        if unique_chars.count\
    \ > max_count {\n            max_count = unique_chars.count\n            max_word\
    \ = word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1ql4c2f6.swift:16:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxCount = 0\n    for word in words {\n \
    \       let uniqueChars = Set(word)\n        if uniqueChars.count > maxCount {\n\
    \            maxCount = uniqueChars.count\n            maxWord = word\n      \
    \  }\n    }\n    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmp24g4n2dn/tmp24g4n2dn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1493268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1492f5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1492f5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1492f5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24g4n2dn                        0x000055c8d48aa933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1493454460 __libc_start_main +
    245

    6    tmp24g4n2dn                        0x000055c8d48aa359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        } else\
    \ if count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpuys3i2cc.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    var max_count = 0\n    for word in words {\n\
    \        let count = Set(word).count\n        if count > max_count {\n       \
    \     max = word\n            max_count = count\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"name\"\
    , \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpyn53n409/tmpyn53n409.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8289d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8286cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8286ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8286c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyn53n409                        0x0000557482090993 <unavailable> + 6547

    5    libc.so.6                          0x00002ba828bbf460 __libc_start_main +
    245

    6    tmpyn53n409                        0x00005574820903b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var max_word = \"\"\n    for word in words {\n     \
    \   let unique_chars = Set(word)\n        if unique_chars.count > max {\n    \
    \        max = unique_chars.count\n            max_word = word\n        }\n  \
    \  }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpa2yrr146/tmpa2yrr146.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc8e90ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc8e605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc8e605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc8e6047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2yrr146                        0x00005622fcc02933 <unavailable> + 6451

    5    libc.so.6                          0x00002afc8eafa460 __libc_start_main +
    245

    6    tmpa2yrr146                        0x00005622fcc02359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var max_word = \"\"\n    for word in words {\n     \
    \   let unique_chars = Set(word.characters)\n        if unique_chars.count > max\
    \ {\n            max = unique_chars.count\n            max_word = word\n     \
    \   }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmpqf48efiw.swift:16:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique_chars = Set(word.characters)\n     \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word.characters)\n        if unique.count > max {\n      \
    \      max = unique.count\n            maxWord = word\n        }\n    }\n    return\
    \ maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmp772hpff3.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n        let unique = Set(word.characters)\n           \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let uniqueChars = Set(word)\n        if uniqueChars.count > max {\n       \
    \     max = uniqueChars.count\n            maxWord = word\n        }\n    }\n\
    \    return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpdtndz4ij/tmpdtndz4ij.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4c2111c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4c1e08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4c1e08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4c1e077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdtndz4ij                        0x00005579a1de8933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae4c22fd460 __libc_start_main +
    245

    6    tmpdtndz4ij                        0x00005579a1de8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = 0\n    var maxWord = \"\"\n    for word in words {\n      \
    \  let unique = Set(word)\n        if unique.count > max {\n            max =\
    \ unique.count\n            maxWord = word\n        }\n    }\n    return maxWord\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmp4dayqwbc/tmp4dayqwbc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae66f16ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae66ee61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae66ee61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae66ee607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dayqwbc                        0x000055e210629933 <unavailable> + 6451

    5    libc.so.6                          0x00002ae66f356460 __libc_start_main +
    245

    6    tmp4dayqwbc                        0x000055e210629359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_unique_chars = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_unique_chars\
    \ {\n            max_unique_chars = unique_chars.count\n            max_word =\
    \ word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: Exception
  stderr: 'tmpymf1tsaw/tmpymf1tsaw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e636ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e633d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e633d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e633d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymf1tsaw                        0x0000559e16a60933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1e638c9460 __libc_start_main +
    245

    6    tmpymf1tsaw                        0x0000559e16a60359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpknchxw8u/tmpknchxw8u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebd4630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebd4327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebd4327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebd43267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknchxw8u                        0x000055efe3240933 <unavailable> + 6451

    5    libc.so.6                          0x00002aebd481c460 __libc_start_main +
    245

    6    tmpknchxw8u                        0x000055efe3240359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmprusk6a8v/tmprusk6a8v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb46386c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb4607db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb4607d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb4607c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprusk6a8v                        0x00005579fe481993 <unavailable> + 6547

    5    libc.so.6                          0x00002acb46572460 __libc_start_main +
    245

    6    tmprusk6a8v                        0x00005579fe4813b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_characters()\n        if count > max_count\
    \ {\n            max_count = count\n            max_word = word\n        } else\
    \ if count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpuys3i2cc.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_characters'\n        let count = word.count_unique_characters()\n\
    \                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_unique_chars = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_unique_chars\
    \ {\n            max_unique_chars = unique_chars.count\n            max_word =\
    \ word\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\n\
    assert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words:\
    \ [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\"\
    , \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"\
    are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"\
    ]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
    )"
  status: Exception
  stderr: 'tmpymf1tsaw/tmpymf1tsaw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e636ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e633d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e633d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e633d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpymf1tsaw                        0x0000559e16a60933 <unavailable> + 6451

    5    libc.so.6                          0x00002b1e638c9460 __libc_start_main +
    245

    6    tmpymf1tsaw                        0x0000559e16a60359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let unique_chars = Set(word)\n        if unique_chars.count > max_count\
    \ {\n            max_count = unique_chars.count\n            max_word = word\n\
    \        }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_max(words: [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words:\
    \ [\"name\", \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"])\
    \ == \"abc\")\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\",\
    \ \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\n\
    assert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmprusk6a8v/tmprusk6a8v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb46386c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb4607db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb4607d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb4607c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprusk6a8v                        0x00005579fe481993 <unavailable> + 6547

    5    libc.so.6                          0x00002acb46572460 __libc_start_main +
    245

    6    tmprusk6a8v                        0x00005579fe4813b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxWord = \"\"\n    var maxUnique = 0\n    for word in words {\n\
    \        let unique = Set(word).count\n        if unique > maxUnique {\n     \
    \       maxUnique = unique\n            maxWord = word\n        }\n    }\n   \
    \ return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpw_8iprx1/tmpw_8iprx1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65353f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65350e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65350e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65350e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_8iprx1                        0x0000559e635ad933 <unavailable> + 6451

    5    libc.so.6                          0x00002b65355de460 __libc_start_main +
    245

    6    tmpw_8iprx1                        0x0000559e635ad359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        }\n    }\n\
    \    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: SyntaxError
  stderr: "/tmp/tmprpo5wj8m.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = \"\"\n    var max_count = 0\n    for word in words {\n\
    \        let count = word.count_unique_chars()\n        if count > max_count {\n\
    \            max_count = count\n            max_word = word\n        } else if\
    \ count == max_count {\n            if word < max_word {\n                max_word\
    \ = word\n            }\n        }\n    }\n    return max_word\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"]) == \"\
    string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words:\
    \ [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words: [\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words: [\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: SyntaxError
  stderr: "/tmp/tmpxe3l8kkl.swift:16:26: error: value of type 'String' has no member\
    \ 'count_unique_chars'\n        let count = word.count_unique_chars()\n      \
    \              ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var maxUnique = 0\n    var maxWord = \"\"\n    for word in words {\n\
    \        let unique = Set(word).count\n        if unique > maxUnique {\n     \
    \       maxUnique = unique\n            maxWord = word\n        }\n    }\n   \
    \ return maxWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpctn_9y3_/tmpctn_9y3_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5effdf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5effaebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5effaeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5effaea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctn_9y3_                        0x000055d407cb5933 <unavailable> + 6451

    5    libc.so.6                          0x00002b5efffe0460 __libc_start_main +
    245

    6    tmpctn_9y3_                        0x000055d407cb5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max = words[0]\n    for word in words {\n        if word.count >\
    \ max.count {\n            max = word\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
    ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
    enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words:\
    \ [\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
    \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
    \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
    b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"\
    play\")"
  status: Exception
  stderr: 'tmpnb2o7dyp/tmpnb2o7dyp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca2899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca2590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca2590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnb2o7dyp                        0x000056148e99d873 <unavailable> + 6259

    5    libc.so.6                          0x00002b8ca2a85460 __libc_start_main +
    245

    6    tmpnb2o7dyp                        0x000056148e99d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let count = Set(word).count\n        if count > max_count {\n   \
    \         max_count = count\n            max_word = word\n        }\n    }\n \
    \   return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_max(words: [\"\
    name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpqsq_ehaz/tmpqsq_ehaz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103674ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1036441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1036441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10364407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsq_ehaz                        0x000055edd7e8a993 <unavailable> + 6547

    5    libc.so.6                          0x00002b1036936460 __libc_start_main +
    245

    6    tmpqsq_ehaz                        0x000055edd7e8a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings.\n/// The array\
    \ contains different words. Return the word with maximum number\n/// of unique\
    \ characters. If multiple strings have maximum number of unique\n/// characters,\
    \ return the one which comes first in lexicographical order.\n/// >>> find_max(words:\
    \ [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"\
    name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String\
    \ {\n    var max_word = words[0]\n    var max_count = 0\n    for word in words\
    \ {\n        let unique_count = Set(word).count\n        if unique_count > max_count\
    \ {\n            max_count = unique_count\n            max_word = word\n     \
    \   }\n    }\n    return max_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_max(words:\
    \ [\"name\", \"of\", \"string\"]) == \"string\")\nassert(find_max(words: [\"name\"\
    , \"enam\", \"game\"]) == \"enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\")\nassert(find_max(words: [\"abc\", \"cba\"]) == \"abc\"\
    )\nassert(find_max(words: [\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\nassert(find_max(words: [\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\")\nassert(find_max(words: [\"we\", \"are\", \"a\", \"mad\", \"\
    nation\"]) == \"nation\")\nassert(find_max(words: [\"this\", \"is\", \"a\", \"\
    prrk\"]) == \"this\")\nassert(find_max(words: [\"b\"]) == \"b\")\nassert(find_max(words:\
    \ [\"play\", \"play\", \"play\"]) == \"play\")"
  status: Exception
  stderr: 'tmpjh20io8d/tmpjh20io8d.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f30f2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f30c26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f30c26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f30c257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh20io8d                        0x0000556c0bcd0993 <unavailable> + 6547

    5    libc.so.6                          0x00002b4f3111b460 __libc_start_main +
    245

    6    tmpjh20io8d                        0x0000556c0bcd03b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013265
