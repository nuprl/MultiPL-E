name: HumanEval_91_is_bored
language: swift
prompt: "\n/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(S: \"Hello\
  \ world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue. The sun is shining. I\
  \ love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
  \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
  \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
  \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\")\
  \ == 0)"
completions: ["    let sentences = S.components(separatedBy: [\".\", \"?\", \"!\"\
    ])\n    var boredoms = 0\n    for sentence in sentences {\n        if sentence.hasPrefix(\"\
    I\") {\n            boredoms += 1\n        }\n    }\n    return boredoms", " \
    \   let sentences = S.split(separator: \".\")\n    var boredomCount = 0\n    for\
    \ sentence in sentences {\n        let words = sentence.split(separator: \" \"\
    )\n        if words.count > 0 {\n            if words[0] == \"I\" {\n        \
    \        boredomCount += 1\n            }\n        }\n    }\n    return boredomCount",
  "    var boredoms = 0\n    let sentences = S.components(separatedBy: [\".\", \"\
    ?\", \"!\"])\n    for sentence in sentences {\n        let words = sentence.components(separatedBy:\
    \ \" \")\n        if words.count > 0 && words[0] == \"I\" {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms", "    var count = 0\n    let sentences\
    \ = S.components(separatedBy: \".!?\")\n    for sentence in sentences {\n    \
    \    if sentence.hasPrefix(\"I\") {\n            count += 1\n        }\n    }\n\
    \    return count", "    let sentences = S.split(separator: \".\")\n    var boredoms\
    \ = 0\n    for sentence in sentences {\n        let words = sentence.split(separator:\
    \ \" \")\n        if words.count > 0 && words[0] == \"I\" {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms", "    let sentences = S.split(separator:\
    \ \".\")\n    var boredoms = 0\n    for sentence in sentences {\n        let words\
    \ = sentence.split(separator: \" \")\n        if words.count > 0 && words[0] ==\
    \ \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    var boredoms = 0\n    let sentences = S.split(separator: \".\")\n    for sentence\
    \ in sentences {\n        let words = sentence.split(separator: \" \")\n     \
    \   if words.count > 0 && words[0] == \"I\" {\n            boredoms += 1\n   \
    \     }\n    }\n    return boredoms", "    let sentences = S.split(separator:\
    \ \".\")\n    var boredoms = 0\n    for sentence in sentences {\n        let words\
    \ = sentence.split(separator: \" \")\n        if words.count > 0 && words[0] ==\
    \ \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let sentences = S.split(separator: \".\")\n    var boredoms = 0\n    for sentence\
    \ in sentences {\n        let words = sentence.split(separator: \" \")\n     \
    \   if words.first == \"I\" {\n            boredoms += 1\n        }\n    }\n \
    \   return boredoms", '    return S.components(separatedBy: "I").count - 1', " \
    \   let sentences = S.split(separator: \".\")\n    var boredoms = 0\n    for sentence\
    \ in sentences {\n        let words = sentence.split(separator: \" \")\n     \
    \   if words.count > 0 && words[0] == \"I\" {\n            boredoms += 1\n   \
    \     }\n    }\n    return boredoms", "    var boredoms = 0\n    let sentences\
    \ = S.components(separatedBy: [\".\", \"?\", \"!\"])\n    for sentence in sentences\
    \ {\n        if sentence.hasPrefix(\"I\") {\n            boredoms += 1\n     \
    \   }\n    }\n    return boredoms", "    var boredoms = 0\n    let sentences =\
    \ S.components(separatedBy: [\".\", \"?\", \"!\"])\n    for sentence in sentences\
    \ {\n        if sentence.hasPrefix(\"I\") {\n            boredoms += 1\n     \
    \   }\n    }\n    return boredoms", "    let sentences = S.split(separator: \"\
    .\")\n    var boredoms = 0\n    for sentence in sentences {\n        let words\
    \ = sentence.split(separator: \" \")\n        if words.count > 0 && words[0] ==\
    \ \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    let sentences = S.components(separatedBy: \".\")\n    var boredoms = 0\n  \
    \  for sentence in sentences {\n        let words = sentence.components(separatedBy:\
    \ \" \")\n        if words.count > 0 && words[0] == \"I\" {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms", "    var boredoms = 0\n    var\
    \ words = S.components(separatedBy: \" \")\n    for word in words {\n        if\
    \ word == \"I\" {\n            boredoms += 1\n        }\n    }\n    return boredoms",
  "    var count = 0\n    let sentences = S.components(separatedBy: [\".\", \"?\"\
    , \"!\"])\n    for sentence in sentences {\n        if sentence.hasPrefix(\"I\"\
    ) {\n            count += 1\n        }\n    }\n    return count", "    let sentences\
    \ = S.components(separatedBy: [\".\", \"?\", \"!\"])\n    var boredoms = 0\n \
    \   for sentence in sentences {\n        let words = sentence.components(separatedBy:\
    \ \" \")\n        if words.count > 0 && words[0] == \"I\" {\n            boredoms\
    \ += 1\n        }\n    }\n    return boredoms", '    return S.components(separatedBy:
    ".!?").filter { $0.hasPrefix("I") }.count', "    let sentences = S.components(separatedBy:\
    \ [\".\", \"?\", \"!\"])\n    var boredoms = 0\n    for sentence in sentences\
    \ {\n        if sentence.hasPrefix(\"I\") {\n            boredoms += 1\n     \
    \   }\n    }\n    return boredoms"]
stop_tokens:
- "\n}"
