language: swift
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let r = a % b\n    if r != 0 {\n        return greatest_common_divisor(a:\
    \ b, b: r)\n    } else {\n        return b\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a % b == 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let t = b\n        b\
    \ = a % b\n        a = t\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let t = b\n        b\
    \ = a % b\n        a = t\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let r = a % b\n    \
    \    a = b\n        b = r\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let t = b\n        b\
    \ = a % b\n        a = t\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while a != 0 && b != 0 {\n        if a > b {\n\
    \            a %= b\n        } else {\n            b %= a\n        }\n    }\n\
    \    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a > b {\n        return greatest_common_divisor(a: a % b, b: b)\n\
    \    } else {\n        return greatest_common_divisor(a: a, b: b % a)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let r = a % b\n    if r != 0 {\n        return greatest_common_divisor(a:\
    \ b, b: r)\n    } else {\n        return b\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let r = a % b\n    \
    \    a = b\n        b = r\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let r = a % b\n    \
    \    a = b\n        b = r\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let tmp = a % b\n  \
    \      a = b\n        b = tmp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a == 1 || b == 1 {\n\
    \        return 1\n    }\n    if a % 2 == 0 && b % 2 == 0 {\n        return 2\
    \ * greatest_common_divisor(a: a / 2, b: b / 2)\n    }\n    if a % 2 == 0 {\n\
    \        return greatest_common_divisor(a: a / 2, b: b)\n    }\n    if b % 2 ==\
    \ 0 {\n        return greatest_common_divisor(a: a, b: b / 2)\n    }\n    if a\
    \ > b {\n        return greatest_common_divisor(a: (a - b) / 2, b: b)\n    }\n\
    \    return greatest_common_divisor(a: a, b: (b - a) / 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let t = b\n        b\
    \ = a % b\n        a = t\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let t = b\n        b\
    \ = a % b\n        a = t\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let t = b\n        b\
    \ = a % b\n        a = t\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let t = b\n        b\
    \ = a % b\n        a = t\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a == 1 || b == 1 {\n\
    \        return 1\n    }\n    if a % 2 == 0 && b % 2 == 0 {\n        return 2\
    \ * greatest_common_divisor(a: a / 2, b: b / 2)\n    }\n    if a % 2 == 0 {\n\
    \        return greatest_common_divisor(a: a / 2, b: b)\n    }\n    if b % 2 ==\
    \ 0 {\n        return greatest_common_divisor(a: a, b: b / 2)\n    }\n    if a\
    \ > b {\n        return greatest_common_divisor(a: (a - b) / 2, b: b)\n    }\n\
    \    return greatest_common_divisor(a: a, b: (b - a) / 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a == 1 || b == 1 {\n\
    \        return 1\n    }\n    if a % 2 == 0 && b % 2 == 0 {\n        return 2\
    \ * greatest_common_divisor(a: a / 2, b: b / 2)\n    }\n    if a % 2 == 0 {\n\
    \        return greatest_common_divisor(a: a / 2, b: b)\n    }\n    if b % 2 ==\
    \ 0 {\n        return greatest_common_divisor(a: a, b: b / 2)\n    }\n    if a\
    \ > b {\n        return greatest_common_divisor(a: (a - b) / 2, b: b)\n    }\n\
    \    return greatest_common_divisor(a: a, b: (b - a) / 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let r = a % b\n    \
    \    a = b\n        b = r\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a % b == 0 {\n        return b\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let tmp = a % b\n  \
    \      a = b\n        b = tmp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    return greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   let r = a % b\n    if r != 0 {\n        return greatest_common_divisor(a:\
    \ b, b: r)\n    } else {\n        return b\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let t = b\n        b\
    \ = a % b\n        a = t\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while a != 0 && b != 0 {\n        if a > b {\n\
    \            a %= b\n        } else {\n            b %= a\n        }\n    }\n\
    \    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let t = b\n        b\
    \ = a % b\n        a = t\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let t = b\n        b\
    \ = a % b\n        a = t\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   return b == 0 ? a : greatest_common_divisor(a: b, b: a % b)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n\
    \    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return\
    \ greatest_common_divisor(a: a - b, b: b)\n    }\n    return greatest_common_divisor(a:\
    \ a, b: b - a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if a == 0 {\n        return b\n    }\n    return greatest_common_divisor(a:\
    \ b % a, b: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(a:\
    \ b, b: a % b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(greatest_common_divisor(a:\
    \ 3, b: 7) == 1)\nassert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
    \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
- exit_code: 0
  program: "\n/// Return a greatest common divisor of two integers a and b\n/// >>>\
    \ greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a:\
    \ 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n \
    \   var a = a\n    var b = b\n    while b != 0 {\n        let temp = b\n     \
    \   b = a % b\n        a = temp\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\nassert(greatest_common_divisor(a:\
    \ 10, b: 15) == 5)\nassert(greatest_common_divisor(a: 49, b: 14) == 7)\nassert(greatest_common_divisor(a:\
    \ 144, b: 60) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824621
