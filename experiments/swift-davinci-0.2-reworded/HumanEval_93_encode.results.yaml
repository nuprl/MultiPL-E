language: swift
name: HumanEval_93_encode
results:
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpoo2o234z/tmpoo2o234z.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a85ea4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a85b9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a85b9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a85b9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoo2o234z                        0x00005607411e9727 <unavailable> + 5927

    5    libc.so.6                          0x00002b3a86090460 __libc_start_main +
    245

    6    tmpoo2o234z                        0x00005607411e9369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ char in message {\n        if vowels.contains(String(char).lowercased()) {\n\
    \            encodedMessage += String(char).lowercased() == \"u\" ? \"a\" : String(char).lowercased().unicodeScalars.map({\
    \ $0.value + 2 }).map(UnicodeScalar.init).map(String.init).joined()\n        }\
    \ else {\n            encodedMessage += String(char).lowercased() == String(char)\
    \ ? String(char).uppercased() : String(char).lowercased()\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpp7q10xsk.swift:17:13: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n            encodedMessage += String(char).lowercased() ==\
    \ \"u\" ? \"a\" : String(char).lowercased().unicodeScalars.map({ $0.value + 2\
    \ }).map(UnicodeScalar.init).map(String.init).joined()\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824387
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encoded = \"\"\n    for char\
    \ in message {\n        if let index = alphabet.firstIndex(of: char) {\n     \
    \       let nextIndex = index + 2\n            let nextChar = alphabet[nextIndex\
    \ % alphabet.count]\n            encoded.append(vowels.contains(char) ? nextChar\
    \ : nextChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp125m_vyf.swift:20:52: error: result values in '? :' expression\
    \ have mismatching types 'Character' and 'String'\n            encoded.append(vowels.contains(char)\
    \ ? nextChar : nextChar.uppercased())\n                                      \
    \             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)\n            let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpygvvmise/tmpygvvmise.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f583fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f580f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f580f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f580f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygvvmise                        0x000055612ca57727 <unavailable> + 5927

    5    libc.so.6                          0x00002b9f585e7460 __libc_start_main +
    245

    6    tmpygvvmise                        0x000055612ca57369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            encodedMessage.append(alphabet[(index + 2) % alphabet.count])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpzo22c8s6/tmpzo22c8s6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50caedec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50cabd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50cabd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50cabd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo22c8s6                        0x000055ce73806877 <unavailable> + 6263

    5    libc.so.6                          0x00002b50cb0ca460 __libc_start_main +
    245

    6    tmpzo22c8s6                        0x000055ce738064b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ char in message {\n        if vowels.contains(String(char).lowercased()) {\n\
    \            let index = vowels.firstIndex(of: String(char).lowercased())!\n \
    \           let nextIndex = (index + 2) % vowels.count\n            encodedMessage\
    \ += String(vowels[nextIndex]).uppercased()\n        } else {\n            encodedMessage\
    \ += String(char).uppercased()\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp9hpky1t9/tmp9hpky1t9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ef1dadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ef1aa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ef1aa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ef1aa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9hpky1t9                        0x000055db9f5ee9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b0ef1f99460 __libc_start_main +
    245

    6    tmp9hpky1t9                        0x000055db9f5ee639 <unavailable> + 5689

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_vrwik0p.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwoei_vio.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = letters.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = letters.index(index, offsetBy: 2)\n      \
    \          encodedMessage.append(letters[newIndex])\n            } else {\n  \
    \              encodedMessage.append(letters[index])\n            }\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpilvf79iz.swift:17:54: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: letter.lowercased()) {\n                    \
    \                                 ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in\
    \ message {\n        if vowels.contains(letter) {\n            if let index =\
    \ alphabet.firstIndex(of: letter) {\n                if index + 2 < alphabet.count\
    \ {\n                    encodedMessage.append(alphabet[index + 2])\n        \
    \        } else {\n                    encodedMessage.append(alphabet[index -\
    \ 24])\n                }\n            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage.uppercased()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp9qlny6vc/tmp9qlny6vc.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b019e4fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b019e1f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b019e1f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b019e1f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9qlny6vc                        0x0000561034633837 <unavailable> + 6199

    5    libc.so.6                          0x00002b019e6e7460 __libc_start_main +
    245

    6    tmp9qlny6vc                        0x0000561034633479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(letters[index])\n      \
    \      }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9nl3aw5w.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % alphabet.count\n\
    \            let newChar = alphabet[newIndex]\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(newChar.uppercased())\n           \
    \ } else {\n                encodedMessage.append(newChar)\n            }\n  \
    \      } else {\n            encodedMessage.append(char)\n        }\n    }\n \
    \   return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp73_mzivg.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpb7mw87j3/tmpb7mw87j3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22293c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22290bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22290bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22290be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7mw87j3                        0x0000563b234ff307 <unavailable> + 4871

    5    libc.so.6                          0x00002b22295b4460 __libc_start_main +
    245

    6    tmpb7mw87j3                        0x0000563b234fef49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in\
    \ message {\n        if vowels.contains(String(char).lowercased()) {\n       \
    \     encodedMessage += String(char).uppercased()\n        } else {\n        \
    \    encodedMessage += String(char).lowercased()\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpketdrqn9/tmpketdrqn9.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace0003fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdffd36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdffd36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdffd357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpketdrqn9                        0x000055dbc005e6f7 <unavailable> + 5879

    5    libc.so.6                          0x00002ace0022b460 __libc_start_main +
    245

    6    tmpketdrqn9                        0x000055dbc005e339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmtt5qxuy.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for character\
    \ in message {\n        if vowels.contains(character) {\n            if let index\
    \ = alphabet.firstIndex(of: character) {\n                let nextIndex = index\
    \ + 2\n                if nextIndex < alphabet.count {\n                    encodedMessage.append(alphabet[nextIndex])\n\
    \                } else {\n                    encodedMessage.append(alphabet[nextIndex\
    \ - alphabet.count])\n                }\n            }\n        } else {\n   \
    \         encodedMessage.append(character)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp2t622t89/tmp2t622t89.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23e2414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23e210bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23e210b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23e210a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2t622t89                        0x000055848cc8b7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b23e2600460 __libc_start_main +
    245

    6    tmp2t622t89                        0x000055848cc8b429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cybbik6.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpbjjoa1na/tmpbjjoa1na.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0614ab7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06147aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06147ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06147ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjjoa1na                        0x0000558bdf0f87c7 <unavailable> + 6087

    5    libc.so.6                          0x00002b0614ca3460 __libc_start_main +
    245

    6    tmpbjjoa1na                        0x0000558bdf0f8409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in\
    \ message {\n        if let index = alphabet.firstIndex(of: letter) {\n      \
    \      if vowels.contains(letter) {\n                encodedMessage.append(alphabet[index\
    \ + 2])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp17lqanci/tmp17lqanci.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa558c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa555b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa555b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa555b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17lqanci                        0x00005638d7b74837 <unavailable> + 6199

    5    libc.so.6                          0x00002baa55aad460 __libc_start_main +
    245

    6    tmp17lqanci                        0x00005638d7b74479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmnhpd5m2/tmpmnhpd5m2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc20e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc1ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc1dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc1ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnhpd5m2                        0x000055a91bd4c5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b4cc22d3460 __libc_start_main +
    245

    6    tmpmnhpd5m2                        0x000055a91bd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                if let nextIndex = alphabet.index(index, offsetBy: 2, limitedBy:\
    \ alphabet.endIndex) {\n                    result.append(alphabet[nextIndex])\n\
    \                } else {\n                    result.append(alphabet[alphabet.startIndex])\n\
    \                }\n            } else {\n                result.append(char)\n\
    \            }\n        } else {\n            result.append(char)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpimzr0vow.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)\n            let nextIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[nextIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmps1ifw0w_/tmps1ifw0w_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21fb465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21fb15cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21fb15c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21fb15b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1ifw0w_                        0x0000559478c75727 <unavailable> + 5927

    5    libc.so.6                          0x00002b21fb651460 __libc_start_main +
    245

    6    tmps1ifw0w_                        0x0000559478c75369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuq8nzcw1.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in message {\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpf_s5tcnw.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(letters[index])\n      \
    \      }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9nl3aw5w.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)\n            let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpygvvmise/tmpygvvmise.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f583fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f580f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f580f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f580f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygvvmise                        0x000055612ca57727 <unavailable> + 5927

    5    libc.so.6                          0x00002b9f585e7460 __libc_start_main +
    245

    6    tmpygvvmise                        0x000055612ca57369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encodedMessage.append(alphabet[newIndex])\n            } else {\n    \
    \            encodedMessage.append(alphabet[index])\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpaxrf5207.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in message {\n        if let\
    \ index = alphabet.firstIndex(of: String(letter).lowercased()) {\n           \
    \ if vowels.contains(String(letter).lowercased()) {\n                encodedMessage\
    \ += String(alphabet[alphabet.index(index, offsetBy: 2)])\n            } else\
    \ {\n                encodedMessage += String(alphabet[index]).uppercased()\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjaddy4bt.swift:17:63: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: String(letter).lowercased()) {\n           \
    \                                                   ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if vowels.contains(char.lowercased()) {\n\
    \            let index = alphabet.index(of: char.lowercased())!\n            let\
    \ nextIndex = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[nextIndex])\n\
    \        } else {\n            encoded.append(char.lowercased())\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvpqfqq8f.swift:18:49: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = alphabet.index(of: char.lowercased())!\n                           \
    \                     ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = letters.index(index, offsetBy: 2)\n          \
    \      encodedMessage.append(letters[newIndex])\n            } else {\n      \
    \          encodedMessage.append(letters[index])\n            }\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpxm5mtxx0.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            if ascii >= 65 && ascii <= 90 {\n    \
    \            encodedMessage.append(Character(UnicodeScalar(ascii + 32)!))\n  \
    \          } else if ascii >= 97 && ascii <= 122 {\n                encodedMessage.append(Character(UnicodeScalar(ascii\
    \ - 32)!))\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3jekdhm_.swift:18:74: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encodedMessage.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n                                                ~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                         \n/tmp/tmp3jekdhm_.swift:20:74:\
    \ error: cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \                encodedMessage.append(Character(UnicodeScalar(ascii - 32)!))\n\
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                         \n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmnhpd5m2/tmpmnhpd5m2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc20e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc1ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc1dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc1ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnhpd5m2                        0x000055a91bd4c5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b4cc22d3460 __libc_start_main +
    245

    6    tmpmnhpd5m2                        0x000055a91bd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = index + 2\n            if newIndex\
    \ > letters.count - 1 {\n                encodedMessage.append(letters[letters.index(letters.startIndex,\
    \ offsetBy: newIndex - letters.count)])\n            } else {\n              \
    \  encodedMessage.append(letters[letters.index(letters.startIndex, offsetBy: newIndex)])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp923f6r4b.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encodedMessage\
    \ += String(char).uppercased() == String(char) ? String(char).lowercased() : String(char).uppercased()\n\
    \        } else {\n            encodedMessage += String(char)\n        }\n   \
    \ }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpasyj_gw1/tmpasyj_gw1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d5184c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d4e7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d4e7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d4e7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpasyj_gw1                        0x000055e4e80f8567 <unavailable> + 5479

    5    libc.so.6                          0x00002b92d5370460 __libc_start_main +
    245

    6    tmpasyj_gw1                        0x000055e4e80f81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdghtrdhl.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpt2qkd78g.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(of:\
    \ char)!\n            let newIndex = alphabet.index(index, offsetBy: 2)\n    \
    \        encodedMessage.append(alphabet[newIndex])\n        } else {\n       \
    \     encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp1l6jdfk9/tmp1l6jdfk9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf44174c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf43e6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf43e6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf43e6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l6jdfk9                        0x00005644941c8947 <unavailable> + 6471

    5    libc.so.6                          0x00002aaf44360460 __libc_start_main +
    245

    6    tmp1l6jdfk9                        0x00005644941c8589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encodedMessage\
    \ += char.isUppercase ? char.lowercased() : char.uppercased()\n        }\n   \
    \     if char.isVowel {\n            encodedMessage += char.nextTwoVowels\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4i1a6t2t.swift:18:17: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if char.isVowel {\n           ~~~~ ^~~~~~~\n/tmp/tmp4i1a6t2t.swift:19:36:\
    \ error: value of type 'Character' has no member 'nextTwoVowels'\n           \
    \ encodedMessage += char.nextTwoVowels\n                              ~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      encodedMessage.append(vowels[(vowels.firstIndex(of: char)! + 2) % vowels.count])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpeu818edh/tmpeu818edh.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d31f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d31c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d31c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d31c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeu818edh                        0x000055d18cd6a877 <unavailable> + 6263

    5    libc.so.6                          0x00002b1d32157460 __libc_start_main +
    245

    6    tmpeu818edh                        0x000055d18cd6a4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let englishAlphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            if char == \"\
    u\" {\n                encodedMessage.append(\"a\")\n            } else {\n  \
    \              let index = englishAlphabet.firstIndex(of: char)!\n           \
    \     encodedMessage.append(englishAlphabet[index + 2])\n            }\n     \
    \   } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage.uppercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpvhscue9d/tmpvhscue9d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b459f8e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b459f5d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b459f5d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b459f5d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhscue9d                        0x000055a9d75ee927 <unavailable> + 6439

    5    libc.so.6                          0x00002b459facd460 __libc_start_main +
    245

    6    tmpvhscue9d                        0x000055a9d75ee569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        let ascii = char.asciiValue!\n  \
    \      if ascii >= 65 && ascii <= 90 {\n            encoded.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n        } else if ascii >= 97 && ascii <= 122 {\n            encoded.append(Character(UnicodeScalar(ascii\
    \ - 32)!))\n        } else {\n            encoded.append(char)\n        }\n  \
    \  }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuf8huu5e.swift:17:63: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            encoded.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n                                     ~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                              \n/tmp/tmpuf8huu5e.swift:19:63:\
    \ error: cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \            encoded.append(Character(UnicodeScalar(ascii - 32)!))\n         \
    \                            ~~~~~~~~~~~~~~~~~~~~~~~~~^\n                    \
    \                                          \n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encoded.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp3pfmoplj/tmp3pfmoplj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24fbc7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24fb975b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24fb975988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24fb9747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pfmoplj                        0x0000565321a755c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b24fbe6a460 __libc_start_main +
    245

    6    tmp3pfmoplj                        0x0000565321a75209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encodedMessage\
    \ += char.isUppercase ? char.lowercased() : char.uppercased()\n        }\n   \
    \     if char.isVowel {\n            encodedMessage += char.next(2)\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmph8oae3e2.swift:18:17: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if char.isVowel {\n           ~~~~ ^~~~~~~\n/tmp/tmph8oae3e2.swift:19:36:\
    \ error: value of type 'Character' has no member 'next'\n            encodedMessage\
    \ += char.next(2)\n                              ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                if index + 2 > alphabet.count - 1 {\n                   \
    \ encodedMessage.append(alphabet[alphabet.index(index, offsetBy: 2 - alphabet.count)])\n\
    \                } else {\n                    encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n                }\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3a5x451f.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encodedMessage = \"\"\n   \
    \ for char in message {\n        if vowels.contains(char) {\n            let index\
    \ = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfbckuao4/tmpfbckuao4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b996cefdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b996cbf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b996cbf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b996cbf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfbckuao4                        0x000055b5e89e89e7 <unavailable> + 6631

    5    libc.so.6                          0x00002b996d0e9460 __libc_start_main +
    245

    6    tmpfbckuao4                        0x000055b5e89e8629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(char)\n            }\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpa2ixildu.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encodedMessage = \"\"\n   \
    \ for char in message {\n        if vowels.contains(char) {\n            let index\
    \ = alphabet.firstIndex(of: char)!\n            encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfbckuao4/tmpfbckuao4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b996cefdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b996cbf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b996cbf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b996cbf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfbckuao4                        0x000055b5e89e89e7 <unavailable> + 6631

    5    libc.so.6                          0x00002b996d0e9460 __libc_start_main +
    245

    6    tmpfbckuao4                        0x000055b5e89e8629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      let index = vowels.firstIndex(of: char)!\n            let newIndex = (index\
    \ + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n \
    \       } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpqcqip0pv/tmpqcqip0pv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943f71dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943f414b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943f414988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943f4137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqip0pv                        0x0000562cb845d877 <unavailable> + 6263

    5    libc.so.6                          0x00002b943f909460 __libc_start_main +
    245

    6    tmpqcqip0pv                        0x0000562cb845d4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = letters.index(index, offsetBy: 2)\n          \
    \      encoded.append(letters[newIndex])\n            } else {\n             \
    \   encoded.append(letters[index])\n            }\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0_iggg13.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for character in message {\n        if character.isLetter {\n  \
    \          if character.isUppercase {\n                encodedMessage.append(character.lowercased())\n\
    \            } else {\n                encodedMessage.append(character.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpcph7n8jg/tmpcph7n8jg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfc56f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfc53e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfc53e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfc53e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcph7n8jg                        0x0000559039ea65c7 <unavailable> + 5575

    5    libc.so.6                          0x00002abfc58dc460 __libc_start_main +
    245

    6    tmpcph7n8jg                        0x0000559039ea6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in message\
    \ {\n        if letter.isLetter {\n            if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n                if vowels.contains(letter.lowercased())\
    \ {\n                    let nextIndex = alphabet.index(index, offsetBy: 2)\n\
    \                    encodedMessage.append(alphabet[nextIndex].uppercased())\n\
    \                } else {\n                    encodedMessage.append(alphabet[index].uppercased())\n\
    \                }\n            }\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5vszpgwa.swift:18:59: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            if\
    \ let index = alphabet.firstIndex(of: letter.lowercased()) {\n               \
    \                                           ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(letter.lowercased() == letter ? alphabet[index].uppercased()\
    \ : alphabet[index])\n            }\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpt0gwqcun.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n/tmp/tmpt0gwqcun.swift:22:59: error: binary\
    \ operator '==' cannot be applied to operands of type 'String' and 'Character'\n\
    \                encodedMessage.append(letter.lowercased() == letter ? alphabet[index].uppercased()\
    \ : alphabet[index])\n                                      ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~~~~~~\n/tmp/tmpt0gwqcun.swift:22:59: note: overloads for '==' exist with\
    \ these partially matching parameter lists: (Character, Character), (String, String)\n\
    \                encodedMessage.append(letter.lowercased() == letter ? alphabet[index].uppercased()\
    \ : alphabet[index])\n                                                       \
    \   ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for character in message {\n        if character.isLetter {\n  \
    \          let unicode = character.unicodeScalars.first!.value\n            let\
    \ unicodeString = String(unicode, radix: 16, uppercase: true)\n            let\
    \ unicodeInt = Int(unicodeString, radix: 16)!\n            let newUnicode = unicodeInt\
    \ + 2\n            let newUnicodeString = String(newUnicode, radix: 16, uppercase:\
    \ true)\n            let newUnicodeScalar = UnicodeScalar(UInt32(newUnicodeString,\
    \ radix: 16)!)\n            encodedMessage.append(String(newUnicodeScalar))\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuwhk688v.swift:22:35: error: no exact matches in call to initializer\
    \ \n            encodedMessage.append(String(newUnicodeScalar))\n            \
    \                      ^\nSwift.String:3:23: note: found candidate with type 'Unicode.Scalar?'\n\
    \    @inlinable public init(_ scalar: Unicode.Scalar)\n                      ^\n\
    Swift.String:4:23: note: found candidate with type 'Unicode.Scalar?'\n    @inlinable\
    \ public init<T>(_ value: T) where T : LosslessStringConvertible\n           \
    \           ^\nSwift.String:2:12: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(describing:)')\n    public init<Subject>(describing instance:\
    \ Subject)\n           ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(letters[index])\n      \
    \      }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9nl3aw5w.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpb7mw87j3/tmpb7mw87j3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22293c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22290bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22290bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22290be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7mw87j3                        0x0000563b234ff307 <unavailable> + 4871

    5    libc.so.6                          0x00002b22295b4460 __libc_start_main +
    245

    6    tmpb7mw87j3                        0x0000563b234fef49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmnhpd5m2/tmpmnhpd5m2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc20e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc1ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc1dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc1ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnhpd5m2                        0x000055a91bd4c5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b4cc22d3460 __libc_start_main +
    245

    6    tmpmnhpd5m2                        0x000055a91bd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex].uppercased())\n         \
    \   } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8mkzj9z3.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for letter in message {\n        if letter.isUppercase {\n     \
    \       encoded.append(letter.lowercased())\n        } else {\n            encoded.append(letter.uppercased())\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpeobatgk2/tmpeobatgk2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab540f68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab540c5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab540c5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab540c5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeobatgk2                        0x000055703fa5c517 <unavailable> + 5399

    5    libc.so.6                          0x00002ab541154460 __libc_start_main +
    245

    6    tmpeobatgk2                        0x000055703fa5c159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdghtrdhl.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = \"aeiou\"\n    for char in message {\n        let charLower\
    \ = char.lowercased()\n        if vowels.contains(charLower) {\n            let\
    \ index = vowels.index(of: charLower)!\n            let nextIndex = (index + 2)\
    \ % 5\n            encoded.append(vowels[nextIndex].uppercased())\n        } else\
    \ {\n            encoded.append(char.uppercased())\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd1dl18y7.swift:18:42: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = vowels.index(of: charLower)!\n                                     \
    \    ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for character in message {\n        if character.isLetter {\n  \
    \          if character.isUppercase {\n                encodedMessage.append(character.lowercased())\n\
    \            } else {\n                encodedMessage.append(character.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpcph7n8jg/tmpcph7n8jg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfc56f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfc53e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfc53e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfc53e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcph7n8jg                        0x0000559039ea65c7 <unavailable> + 5575

    5    libc.so.6                          0x00002abfc58dc460 __libc_start_main +
    245

    6    tmpcph7n8jg                        0x0000559039ea6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for character in message {\n        if let\
    \ index = alphabet.firstIndex(of: character.lowercased()) {\n            if vowels.contains(character.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(character)\n            }\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpydwf9ohy.swift:17:58: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: character.lowercased()) {\n                \
    \                                         ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmnhpd5m2/tmpmnhpd5m2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc20e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc1ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc1dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc1ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnhpd5m2                        0x000055a91bd4c5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b4cc22d3460 __libc_start_main +
    245

    6    tmpmnhpd5m2                        0x000055a91bd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let newAscii = ascii + 2\n           \
    \ let newChar = Character(UnicodeScalar(newAscii)!)\n            encoded.append(newChar)\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyp6tnfr4.swift:18:60: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~^\n              \
    \                                             \n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      let index = vowels.firstIndex(of: char)!\n            let newIndex = (index\
    \ + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n \
    \       } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpqcqip0pv/tmpqcqip0pv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943f71dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943f414b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943f414988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943f4137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqip0pv                        0x0000562cb845d877 <unavailable> + 6263

    5    libc.so.6                          0x00002b943f909460 __libc_start_main +
    245

    6    tmpqcqip0pv                        0x0000562cb845d4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwoei_vio.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = \"abcdefghijklmnopqrstuvwxyz\".map { $0 }\n    let encoded = message.map {\
    \ char -> Character in\n        if vowels.contains(char) {\n            let index\
    \ = alphabet.firstIndex(of: char)!\n            return alphabet[(index + 2) %\
    \ alphabet.count]\n        } else {\n            return char\n        }\n    }\n\
    \    return String(encoded)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpani9zn43/tmpani9zn43.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba593619c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba593310b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba593310988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba59330f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpani9zn43                        0x0000558ad92fc937 <unavailable> + 6455

    5    libc.so.6                          0x00002ba593805460 __libc_start_main +
    245

    6    tmpani9zn43                        0x0000558ad92fc579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwoei_vio.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpo09o2n4p/tmpo09o2n4p.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab75d490c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab75d187b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab75d187988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab75d1867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo09o2n4p                        0x000056539eb4c727 <unavailable> + 5927

    5    libc.so.6                          0x00002ab75d67c460 __libc_start_main +
    245

    6    tmpo09o2n4p                        0x000056539eb4c369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let newAscii = ascii + 2\n           \
    \ let newChar = Character(UnicodeScalar(newAscii)!)\n            encodedMessage.append(newChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppvayyxm9.swift:18:60: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~^\n              \
    \                                             \n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % alphabet.count\n\
    \            let newChar = alphabet[newIndex]\n            encoded.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0wqox0so.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        if let index\
    \ = alphabet.firstIndex(of: letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6jwuw36t.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    var encoded = \"\
    \"\n    for char in message {\n        if vowels.contains(char) {\n          \
    \  let index = vowels.firstIndex(of: char)!\n            encoded.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index.encodedOffset + 2)])\n        } else if vowels2.contains(char)\
    \ {\n            let index = vowels2.firstIndex(of: char)!\n            encoded.append(vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: index.encodedOffset + 2)])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpcwln4z5e/tmpcwln4z5e.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad50102ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad500d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad500d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad500d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcwln4z5e                        0x00005572aac587e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ad501216460 __libc_start_main +
    245

    6    tmpcwln4z5e                        0x00005572aac58429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char)!) + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp12kjzhua/tmp12kjzhua.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ac33988fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac339586561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac339586286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac33958613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac339585bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp12kjzhua                        0x000055cc5e20b292 <unavailable> + 8850

    6    tmp12kjzhua                        0x000055cc5e20a8d6 <unavailable> + 6358

    7    libc.so.6                          0x00002ac339a7b460 __libc_start_main +
    245

    8    tmp12kjzhua                        0x000055cc5e20a5d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(of:\
    \ char)!\n            let nextIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encodedMessage.append(alphabet[nextIndex])\n        } else {\n     \
    \       encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmppeks2v8i/tmppeks2v8i.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65c8945c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65c863cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65c863c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65c863b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeks2v8i                        0x00005557e2e2a947 <unavailable> + 6471

    5    libc.so.6                          0x00002b65c8b31460 __libc_start_main +
    245

    6    tmppeks2v8i                        0x00005557e2e2a589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    for char in message {\n       \
    \ if let index = alphabet.firstIndex(of: char.lowercased()) {\n            if\
    \ vowels.contains(char.lowercased()) {\n                encodedMessage += alphabet[(index\
    \ + 2) % alphabet.count].uppercased()\n            } else {\n                encodedMessage\
    \ += alphabet[index].uppercased()\n            }\n        } else {\n         \
    \   encodedMessage += String(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdi0a1f2_.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for character in message {\n        if vowels.contains(character.lowercased())\
    \ {\n            let index = alphabet.index(of: character.lowercased())!\n   \
    \         let newIndex = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(character.lowercased())\n      \
    \  }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpexyh3mr0.swift:18:54: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = alphabet.index(of: character.lowercased())!\n                      \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdghtrdhl.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = index + 2\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpcf1c4i0s/tmpcf1c4i0s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b344d4f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b344d1edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b344d1ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b344d1ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcf1c4i0s                        0x00005584411ce827 <unavailable> + 6183

    5    libc.so.6                          0x00002b344d6e2460 __libc_start_main +
    245

    6    tmpcf1c4i0s                        0x00005584411ce469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            encodedMessage.append(alphabet[(index + 2) % alphabet.count])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpzo22c8s6/tmpzo22c8s6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50caedec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50cabd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50cabd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50cabd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo22c8s6                        0x000055ce73806877 <unavailable> + 6263

    5    libc.so.6                          0x00002b50cb0ca460 __libc_start_main +
    245

    6    tmpzo22c8s6                        0x000055ce738064b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for char\
    \ in message {\n        if vowels.contains(String(char).lowercased()) {\n    \
    \        let index = vowels.firstIndex(of: String(char).lowercased())!\n     \
    \       encoded += vowels[(index + 2) % 5].uppercased()\n        } else {\n  \
    \          encoded += String(char).uppercased()\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpoxp52nkz/tmpoxp52nkz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c76b8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c76881b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c76881988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c768807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoxp52nkz                        0x000055dfe6bba897 <unavailable> + 6295

    5    libc.so.6                          0x00002b2c76d76460 __libc_start_main +
    245

    6    tmpoxp52nkz                        0x000055dfe6bba4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let isUpper = ascii >= 65 && ascii <=\
    \ 90\n            let asciiOffset = isUpper ? 65 : 97\n            let charOffset\
    \ = isUpper ? \"A\" : \"a\"\n            let charIndex = Int(ascii) - asciiOffset\n\
    \            let encodedIndex = (charIndex + 2) % 26\n            let encodedChar\
    \ = String(UnicodeScalar(encodedIndex + asciiOffset)!)\n            encoded +=\
    \ encodedChar\n        } else {\n            encoded += String(char)\n       \
    \ }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmph887p85p/tmph887p85p.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b7a551c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b7a248b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b7a248988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b7a2477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph887p85p                        0x000055c2589de7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b2b7a73d460 __libc_start_main +
    245

    6    tmph887p85p                        0x000055c2589de429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if let vowelIndex = vowels.firstIndex(of:\
    \ char.lowercased()) {\n                encodedMessage.append(vowels[vowels.index(vowelIndex,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(letters[letters.index(index,\
    \ offsetBy: 1)])\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpklqm5d31.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n/tmp/tmpklqm5d31.swift:18:60: error: cannot convert\
    \ value of type 'String' to expected argument type 'String.Element' (aka 'Character')\n\
    \            if let vowelIndex = vowels.firstIndex(of: char.lowercased()) {\n\
    \                                                           ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in\
    \ message {\n        if vowels.contains(letter) {\n            if let index =\
    \ alphabet.firstIndex(of: letter) {\n                let newIndex = index + 2\n\
    \                encodedMessage.append(alphabet[newIndex])\n            }\n  \
    \      } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp8wysw53u/tmp8wysw53u.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acde1350c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acde1047b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acde1047988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acde10467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wysw53u                        0x0000563234836797 <unavailable> + 6039

    5    libc.so.6                          0x00002acde153c460 __libc_start_main +
    245

    6    tmp8wysw53u                        0x00005632348363d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\
    \n    for char in message {\n        if vowels.contains(char) {\n            let\
    \ index = vowels.firstIndex(of: char)!\n            let nextIndex = (index + 2)\
    \ % vowels.count\n            encoded.append(vowels[nextIndex])\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp64enc70g.swift:18:30: error: cannot convert value of type 'Set<Character>.Index'\
    \ to expected argument type 'Int'\n            let nextIndex = (index + 2) % vowels.count\n\
    \                             ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % letters.count\n\
    \            encoded.append(letters[newIndex])\n        } else {\n           \
    \ encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyxi_vrfl.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmnhpd5m2/tmpmnhpd5m2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc20e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc1ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc1dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc1ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnhpd5m2                        0x000055a91bd4c5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b4cc22d3460 __libc_start_main +
    245

    6    tmpmnhpd5m2                        0x000055a91bd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmnhpd5m2/tmpmnhpd5m2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc20e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc1ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc1dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc1ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnhpd5m2                        0x000055a91bd4c5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b4cc22d3460 __libc_start_main +
    245

    6    tmpmnhpd5m2                        0x000055a91bd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[newIndex].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8cybbik6.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encoded = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alphabet.count\n          \
    \  encoded.append(alphabet[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp3xbaqk4g/tmp3xbaqk4g.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b788c9dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b788c6d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b788c6d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b788c6d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xbaqk4g                        0x000055bb8e60f9e7 <unavailable> + 6631

    5    libc.so.6                          0x00002b788cbc8460 __libc_start_main +
    245

    6    tmp3xbaqk4g                        0x000055bb8e60f629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = index + 2\n            let\
    \ newChar = letters[newIndex % letters.count]\n            encodedMessage.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpgyvww1al.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    for char in message {\n        if vowels.contains(char) {\n            encodedMessage.append(char.next(2))\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1o540o2_.swift:17:40: error: value of type 'Character' has no member\
    \ 'next'\n            encodedMessage.append(char.next(2))\n                  \
    \                ~~~~ ^~~~\n/tmp/tmp1o540o2_.swift:19:40: error: value of type\
    \ 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)\n            let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpygvvmise/tmpygvvmise.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f583fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f580f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f580f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f580f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygvvmise                        0x000055612ca57727 <unavailable> + 5927

    5    libc.so.6                          0x00002b9f585e7460 __libc_start_main +
    245

    6    tmpygvvmise                        0x000055612ca57369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = letters.index(index, offsetBy: 2)\n          \
    \      encoded.append(letters[newIndex])\n            } else {\n             \
    \   encoded.append(letters[index])\n            }\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0_iggg13.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = index + 2\n            if newIndex\
    \ > alphabet.count - 1 {\n                encoded.append(alphabet[newIndex - alphabet.count])\n\
    \            } else {\n                encoded.append(alphabet[newIndex])\n  \
    \          }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdxrf4epl.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encodedMessage.append(letters[index.advanced(by: 2)])\n     \
    \       } else {\n                encodedMessage.append(letters[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp436ps0f3.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\",\
    \ \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            if let index =\
    \ alphabet.firstIndex(of: char) {\n                let newIndex = index + 2\n\
    \                if newIndex > alphabet.count - 1 {\n                    encodedMessage.append(alphabet[newIndex\
    \ - alphabet.count])\n                } else {\n                    encodedMessage.append(alphabet[newIndex])\n\
    \                }\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpe4ax6bng/tmpe4ax6bng.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2e8669c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2e8360b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2e8360988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2e835f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe4ax6bng                        0x000055c11156a877 <unavailable> + 6263

    5    libc.so.6                          0x00002af2e8855460 __libc_start_main +
    245

    6    tmpe4ax6bng                        0x000055c11156a4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for letter in message {\n        if vowels.contains(letter) {\n  \
    \          let index = vowels.firstIndex(of: letter)!\n            let newIndex\
    \ = (index + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpi_t9x6dl/tmpi_t9x6dl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b9869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b9560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b9560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b955f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_t9x6dl                        0x00005565bb1a6877 <unavailable> + 6263

    5    libc.so.6                          0x00002ad6b9a55460 __libc_start_main +
    245

    6    tmpi_t9x6dl                        0x00005565bb1a64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            let newChar = alphabet[newIndex]\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(newChar)\n            } else {\n  \
    \              encodedMessage.append(newChar.uppercased())\n            }\n  \
    \      } else {\n            encodedMessage.append(char)\n        }\n    }\n \
    \   return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6q_p1086.swift:17:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.index(of: char.lowercased()) {\n                          \
    \                     ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let vowelsInAlphabet\
    \ = [\"a\", \"c\", \"e\", \"g\", \"i\", \"k\", \"m\", \"o\", \"q\", \"s\", \"\
    u\", \"w\", \"y\"]\n    var encodedMessage = \"\"\n    for char in message {\n\
    \        if vowels.contains(char) {\n            let index = vowelsInAlphabet.firstIndex(of:\
    \ String(char))!\n            encodedMessage += vowelsInAlphabet[index + 2]\n\
    \        } else {\n            encodedMessage += String(char).uppercased()\n \
    \       }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp_8vi_n7e/tmp_8vi_n7e.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedd6ab5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedd67acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedd67ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedd67ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8vi_n7e                        0x000055d8f4841997 <unavailable> + 6551

    5    libc.so.6                          0x00002aedd6ca1460 __libc_start_main +
    245

    6    tmp_8vi_n7e                        0x000055d8f48415d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpoo2o234z/tmpoo2o234z.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a85ea4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a85b9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a85b9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a85b9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoo2o234z                        0x00005607411e9727 <unavailable> + 5927

    5    libc.so.6                          0x00002b3a86090460 __libc_start_main +
    245

    6    tmpoo2o234z                        0x00005607411e9369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwoei_vio.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for letter\
    \ in message {\n        if let ascii = letter.asciiValue {\n            if ascii\
    \ >= 65 && ascii <= 90 {\n                encoded.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n            } else if ascii >= 97 && ascii <= 122 {\n            \
    \    encoded.append(Character(UnicodeScalar(ascii - 32)!))\n            } else\
    \ {\n                encoded.append(letter)\n            }\n        }\n    }\n\
    \    for vowel in vowels {\n        encoded = encoded.replacingOccurrences(of:\
    \ vowel, with: String(vowel.asciiValue! + 2))\n    }\n    return encoded\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpq49j_a0e.swift:18:67: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encoded.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n                                         ~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                  \n/tmp/tmpq49j_a0e.swift:20:67:\
    \ error: cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \                encoded.append(Character(UnicodeScalar(ascii - 32)!))\n     \
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~^\n            \
    \                                                      \n/tmp/tmpq49j_a0e.swift:27:27:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ encoded = encoded.replacingOccurrences(of: vowel, with: String(vowel.asciiValue!\
    \ + 2))\n                  ~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq49j_a0e.swift:27:78:\
    \ error: value of type 'String' has no member 'asciiValue'\n        encoded =\
    \ encoded.replacingOccurrences(of: vowel, with: String(vowel.asciiValue! + 2))\n\
    \                                                                       ~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encoded.append(alphabet[newIndex])\n            } else {\n           \
    \     encoded.append(alphabet[index])\n            }\n        } else {\n     \
    \       encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdghtrdhl.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpb7mw87j3/tmpb7mw87j3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22293c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22290bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22290bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22290be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7mw87j3                        0x0000563b234ff307 <unavailable> + 4871

    5    libc.so.6                          0x00002b22295b4460 __libc_start_main +
    245

    6    tmpb7mw87j3                        0x0000563b234fef49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for char\
    \ in message {\n        if vowels.contains(String(char).lowercased()) {\n    \
    \        let index = vowels.firstIndex(of: String(char).lowercased())!\n     \
    \       let newIndex = (index + 2) % vowels.count\n            encoded += vowels[newIndex].uppercased()\n\
    \        } else {\n            encoded += String(char).uppercased()\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpawwlnb48/tmpawwlnb48.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7adadf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7adaaf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7adaaf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7adaaef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpawwlnb48                        0x000055ba9545e8e7 <unavailable> + 6375

    5    libc.so.6                          0x00002b7adafe5460 __libc_start_main +
    245

    6    tmpawwlnb48                        0x000055ba9545e529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encodedMessage = \"\"\n   \
    \ for char in message {\n        if vowels.contains(char) {\n            let index\
    \ = alphabet.firstIndex(of: char)!\n            let newIndex = (index + 2) % alphabet.count\n\
    \            encodedMessage.append(alphabet[newIndex])\n        } else {\n   \
    \         encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp4dkcjsj0/tmp4dkcjsj0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab352e12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab352b09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab352b09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab352b087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dkcjsj0                        0x000055fc4c32f9e7 <unavailable> + 6631

    5    libc.so.6                          0x00002ab352ffe460 __libc_start_main +
    245

    6    tmp4dkcjsj0                        0x000055fc4c32f629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8g22rqq_.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            let isUpper = letter.isUppercase\n     \
    \       let newLetter = alphabet[alphabet.index(index, offsetBy: 2)]\n       \
    \     if isUpper {\n                encoded.append(newLetter.uppercased())\n \
    \           } else {\n                encoded.append(newLetter)\n            }\n\
    \        } else {\n            encoded.append(letter)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmporg3lqz9.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for char\
    \ in message {\n        if vowels.contains(String(char).lowercased()) {\n    \
    \        let index = vowels.firstIndex(of: String(char).lowercased())!\n     \
    \       encoded += vowels[(index + 2) % 5].uppercased()\n        } else {\n  \
    \          encoded += String(char).uppercased()\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpoxp52nkz/tmpoxp52nkz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c76b8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c76881b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c76881988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c768807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoxp52nkz                        0x000055dfe6bba897 <unavailable> + 6295

    5    libc.so.6                          0x00002b2c76d76460 __libc_start_main +
    245

    6    tmpoxp52nkz                        0x000055dfe6bba4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      let index = vowels.firstIndex(of: char)!\n            let newIndex = (index\
    \ + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n \
    \       } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpqcqip0pv/tmpqcqip0pv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943f71dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943f414b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943f414988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943f4137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqip0pv                        0x0000562cb845d877 <unavailable> + 6263

    5    libc.so.6                          0x00002b943f909460 __libc_start_main +
    245

    6    tmpqcqip0pv                        0x0000562cb845d4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in\
    \ message {\n        if vowels.contains(String(char).lowercased()) {\n       \
    \     let index = vowels.firstIndex(of: String(char).lowercased())!\n        \
    \    encoded += vowels[(index + 2) % 5].uppercased()\n        } else {\n     \
    \       encoded += String(char).uppercased()\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpzwiy4t3f/tmpzwiy4t3f.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a773cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a770c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a770c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a770c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwiy4t3f                        0x00005566ef16f897 <unavailable> + 6295

    5    libc.so.6                          0x00002b9a775b7460 __libc_start_main +
    245

    6    tmpzwiy4t3f                        0x00005566ef16f4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        encodedMessage.append(char.next(2))\n        } else {\n            encodedMessage.append(char.swapCase())\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpskflpy3_.swift:17:40: error: value of type 'Character' has no member\
    \ 'next'\n            encodedMessage.append(char.next(2))\n                  \
    \                ~~~~ ^~~~\n/tmp/tmpskflpy3_.swift:19:40: error: value of type\
    \ 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alphabet.count\n          \
    \  encodedMessage.append(alphabet[newIndex])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpsm5azse7/tmpsm5azse7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec0459ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec04291b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec04291988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec042907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsm5azse7                        0x0000555ba7946877 <unavailable> + 6263

    5    libc.so.6                          0x00002aec04786460 __libc_start_main +
    245

    6    tmpsm5azse7                        0x0000555ba79464b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmnhpd5m2/tmpmnhpd5m2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc20e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc1ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc1dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc1ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnhpd5m2                        0x000055a91bd4c5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b4cc22d3460 __libc_start_main +
    245

    6    tmpmnhpd5m2                        0x000055a91bd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3xe01fm7.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encoded.append(encode(char:\
    \ char))\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyo1ab66s.swift:16:34: error: incorrect argument label in call (have\
    \ 'char:', expected 'message:')\n            encoded.append(encode(char: char))\n\
    \                                 ^~~~~\n                                  message\n\
    /tmp/tmpyo1ab66s.swift:16:41: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            encoded.append(encode(char:\
    \ char))\n                                        ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encodedMessage = \"\"\n   \
    \ for char in message {\n        if vowels.contains(char) {\n            let index\
    \ = alphabet.firstIndex(of: char)!\n            let newIndex = (index + 2) % alphabet.count\n\
    \            encodedMessage.append(alphabet[newIndex])\n        } else {\n   \
    \         encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp4dkcjsj0/tmp4dkcjsj0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab352e12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab352b09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab352b09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab352b087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dkcjsj0                        0x000055fc4c32f9e7 <unavailable> + 6631

    5    libc.so.6                          0x00002ab352ffe460 __libc_start_main +
    245

    6    tmp4dkcjsj0                        0x000055fc4c32f629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ letter in message {\n        if let asciiValue = letter.asciiValue {\n     \
    \       if asciiValue >= 65 && asciiValue <= 90 {\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ + 32)!))\n            } else if asciiValue >= 97 && asciiValue <= 122 {\n  \
    \              encodedMessage.append(Character(UnicodeScalar(asciiValue - 32)!))\n\
    \            } else {\n                encodedMessage.append(letter)\n       \
    \     }\n        }\n    }\n    for vowel in vowels {\n        encodedMessage =\
    \ encodedMessage.replacingOccurrences(of: vowel, with: String(vowel.unicodeScalars.first!.value\
    \ + 2))\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6aqsoax1.swift:18:79: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ + 32)!))\n                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \  \n/tmp/tmp6aqsoax1.swift:20:79: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encodedMessage.append(Character(UnicodeScalar(asciiValue\
    \ - 32)!))\n                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \  \n/tmp/tmp6aqsoax1.swift:27:41: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        encodedMessage = encodedMessage.replacingOccurrences(of:\
    \ vowel, with: String(vowel.unicodeScalars.first!.value + 2))\n              \
    \           ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      let index = vowels.firstIndex(of: char)!\n            let newIndex = (index\
    \ + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n \
    \       } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpqcqip0pv/tmpqcqip0pv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943f71dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943f414b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943f414988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943f4137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcqip0pv                        0x0000562cb845d877 <unavailable> + 6263

    5    libc.so.6                          0x00002b943f909460 __libc_start_main +
    245

    6    tmpqcqip0pv                        0x0000562cb845d4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)\n            encodedMessage\
    \ += String(alphabet[alphabet.index(index!, offsetBy: 2)])\n        } else {\n\
    \            encodedMessage += String(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmptdx73vo_/tmptdx73vo_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae139c01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1398f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1398f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1398f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptdx73vo_                        0x000056420d83b777 <unavailable> + 6007

    5    libc.so.6                          0x00002ae139ded460 __libc_start_main +
    245

    6    tmptdx73vo_                        0x000056420d83b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(of:\
    \ char)!\n            let newIndex = alphabet.index(index, offsetBy: 2)\n    \
    \        encodedMessage.append(alphabet[newIndex])\n        } else {\n       \
    \     encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpnqflucfm/tmpnqflucfm.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae80c198c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae80be8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae80be8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae80be8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnqflucfm                        0x000055cd0ea89947 <unavailable> + 6471

    5    libc.so.6                          0x00002ae80c384460 __libc_start_main +
    245

    6    tmpnqflucfm                        0x000055cd0ea89589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(letters[index])\n      \
    \      }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9nl3aw5w.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for character in message {\n        if character.isUppercase {\n\
    \            encodedMessage.append(character.lowercased())\n        } else {\n\
    \            encodedMessage.append(character.uppercased())\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpd7_yqaay/tmpd7_yqaay.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7602233c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7601f2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7601f2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7601f297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd7_yqaay                        0x000055925bd54517 <unavailable> + 5399

    5    libc.so.6                          0x00002b760241f460 __libc_start_main +
    245

    6    tmpd7_yqaay                        0x000055925bd54159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = alphabet.index(index, offsetBy:\
    \ 2)\n            if vowels.contains(char.lowercased()) {\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[newIndex].uppercased())\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp4n_2vo0r.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = index + 2\n            let\
    \ newChar = alphabet[newIndex % alphabet.count]\n            encoded.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpub33i_0j.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if let index\
    \ = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpt2qkd78g.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = letters.firstIndex(of: char.lowercased())\
    \ {\n            let newIndex = index + 2\n            let newChar = letters[newIndex\
    \ % letters.count]\n            encoded.append(vowels.contains(char.lowercased())\
    \ ? newChar : newChar.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmptwa036hk.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var result\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = letters.index(index, offsetBy: 2)\n          \
    \      result.append(letters[newIndex])\n            } else {\n              \
    \  result.append(letters[index])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp07935uvg.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    var result = \"\
    \"\n    for char in message {\n        if vowels.contains(char) {\n          \
    \  let index = vowels.firstIndex(of: char)!\n            result.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index)])\n        } else if vowels2.contains(char) {\n           \
    \ let index = vowels2.firstIndex(of: char)!\n            result.append(vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: index)])\n        } else {\n            result.append(char)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyc7vnaix.swift:19:35: error: instance method 'index(_:offsetBy:)'\
    \ requires that 'String.Index' conform to 'BinaryInteger'\n            result.append(vowels2[vowels2.index(vowels2.startIndex,\
    \ offsetBy: index)])\n                                  ^\nSwift.Collection:3:17:\
    \ note: where 'T' = 'String.Index'\n    public func index<T>(_ i: Self.Index,\
    \ offsetBy n: T) -> Self.Index where T : BinaryInteger\n                ^\n/tmp/tmpyc7vnaix.swift:22:34:\
    \ error: instance method 'index(_:offsetBy:)' requires that 'String.Index' conform\
    \ to 'BinaryInteger'\n            result.append(vowels[vowels.index(vowels.startIndex,\
    \ offsetBy: index)])\n                                 ^\nSwift.Collection:3:17:\
    \ note: where 'T' = 'String.Index'\n    public func index<T>(_ i: Self.Index,\
    \ offsetBy n: T) -> Self.Index where T : BinaryInteger\n                ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for char\
    \ in message {\n        if vowels.contains(String(char).lowercased()) {\n    \
    \        encoded += String(char).lowercased() == \"u\" ? \"a\" : String(char).lowercased()\
    \ == \"z\" ? \"b\" : String(Array(message)[vowels.firstIndex(of: String(char).lowercased())!\
    \ + 2])\n        } else {\n            encoded += String(char).lowercased() ==\
    \ String(char) ? String(char).uppercased() : String(char).lowercased()\n     \
    \   }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp953mzl_0/tmp953mzl_0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b326a595c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b326a28cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b326a28c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b326a28b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp953mzl_0                        0x000055e16bdf8967 <unavailable> + 6503

    5    libc.so.6                          0x00002b326a781460 __libc_start_main +
    245

    6    tmp953mzl_0                        0x000055e16bdf85a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(letters[index])\n      \
    \      }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp9nl3aw5w.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if alphabet.contains(char) {\n          \
    \  if vowels.contains(char) {\n                let index = alphabet.firstIndex(of:\
    \ char)!\n                let newIndex = alphabet.index(index, offsetBy: 2)\n\
    \                let newChar = alphabet[newIndex]\n                encodedMessage.append(newChar)\n\
    \            } else {\n                encodedMessage.append(char)\n         \
    \   }\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpg5vswm6g/tmpg5vswm6g.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c4ea24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c4e71bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c4e71b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c4e71a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5vswm6g                        0x0000555983404727 <unavailable> + 5927

    5    libc.so.6                          0x00002b3c4ec10460 __libc_start_main +
    245

    6    tmpg5vswm6g                        0x0000555983404369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    return\
    \ message.map {\n        switch $0 {\n        case \"a\":\n            return\
    \ \"c\"\n        case \"e\":\n            return \"g\"\n        case \"i\":\n\
    \            return \"k\"\n        case \"o\":\n            return \"q\"\n   \
    \     case \"u\":\n            return \"y\"\n        case \"A\":\n           \
    \ return \"C\"\n        case \"E\":\n            return \"G\"\n        case \"\
    I\":\n            return \"K\"\n        case \"O\":\n            return \"Q\"\n\
    \        case \"U\":\n            return \"Y\"\n        default:\n           \
    \ return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn3pdch7_.swift:13:20: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return message.map {\n        \
    \   ~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if letter.isUppercase {\n              \
    \  encodedMessage.append(alphabet[index].uppercased())\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   } else {\n            encodedMessage.append(letter)\n        }\n    }\n  \
    \  return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1u9zxijy.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let encodedChar = ascii + 2\n        \
    \    let encodedCharAscii = UInt8(encodedChar)\n            encodedMessage.append(Character(UnicodeScalar(encodedCharAscii)))\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmphywg2uol/tmphywg2uol.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93df1e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93deedeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93deede988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93deedd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphywg2uol                        0x00005557658217a7 <unavailable> + 6055

    5    libc.so.6                          0x00002b93df3d3460 __libc_start_main +
    245

    6    tmphywg2uol                        0x00005557658213e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let vowelsUpper = \"AEIOU\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let lettersUpper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    var encoded = \"\"\
    \n    for char in message {\n        if vowels.contains(char) {\n            let\
    \ index = vowels.firstIndex(of: char)!\n            let newIndex = (index + 2)\
    \ % 5\n            encoded.append(vowels[newIndex])\n        } else if vowelsUpper.contains(char)\
    \ {\n            let index = vowelsUpper.firstIndex(of: char)!\n            let\
    \ newIndex = (index + 2) % 5\n            encoded.append(vowelsUpper[newIndex])\n\
    \        } else if letters.contains(char) {\n            let index = letters.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % 26\n            encoded.append(letters[newIndex])\n\
    \        } else if lettersUpper.contains(char) {\n            let index = lettersUpper.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % 26\n            encoded.append(lettersUpper[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp22mm_n00.swift:21:29: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let newIndex = (index + 2) % 5\n\
    \                            ^\n/tmp/tmp22mm_n00.swift:25:29: error: cannot convert\
    \ value of type 'String.Index' to expected argument type 'Int'\n            let\
    \ newIndex = (index + 2) % 5\n                            ^\n/tmp/tmp22mm_n00.swift:29:29:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let newIndex = (index + 2) % 26\n                       \
    \     ^\n/tmp/tmp22mm_n00.swift:33:29: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let newIndex = (index + 2) % 26\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for character in message {\n        if let index = letters.firstIndex(of:\
    \ character.lowercased()) {\n            let isUppercased = character.isUppercased\n\
    \            let newIndex = (index + 2) % letters.count\n            let newCharacter\
    \ = letters[newIndex]\n            encodedMessage += isUppercased ? newCharacter.uppercased()\
    \ : newCharacter\n        } else {\n            encodedMessage += String(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6c3hu3g6.swift:17:57: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: character.lowercased()) {\n                 \
    \                                       ^\n/tmp/tmp6c3hu3g6.swift:18:42: error:\
    \ value of type 'Character' has no member 'isUppercased'\n            let isUppercased\
    \ = character.isUppercased\n                               ~~~~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for character\
    \ in message {\n        if vowels.contains(character) {\n            if let index\
    \ = alphabet.firstIndex(of: character) {\n                encodedMessage.append(alphabet[index\
    \ + 2])\n            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp7yostxoz/tmp7yostxoz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac244b89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac244880b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac244880988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac24487f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7yostxoz                        0x0000555ecd263797 <unavailable> + 6039

    5    libc.so.6                          0x00002ac244d75460 __libc_start_main +
    245

    6    tmp7yostxoz                        0x0000555ecd2633d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message {\n        let lowercaseLetter\
    \ = String(letter).lowercased()\n        if vowels.contains(lowercaseLetter) {\n\
    \            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.count\
    \ - 2)\n            let newLetter = alphabet[index]\n            encodedMessage.append(newLetter)\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpzo3nk25x/tmpzo3nk25x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49a2149c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49a1e40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49a1e40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49a1e3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo3nk25x                        0x00005641604a6807 <unavailable> + 6151

    5    libc.so.6                          0x00002b49a2335460 __libc_start_main +
    245

    6    tmpzo3nk25x                        0x00005641604a6449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in\
    \ message {\n        if vowels.contains(String(char).lowercased()) {\n       \
    \     if String(char).lowercased() == \"u\" {\n                encodedMessage\
    \ += \"a\"\n            } else {\n                encodedMessage += String(char).lowercased().unicodeScalars.map\
    \ { UnicodeScalar(Int($0.value) + 2)! }.map { Character(UnicodeScalar($0)!) }\n\
    \            }\n        } else {\n            encodedMessage += String(char).lowercased().unicodeScalars.map\
    \ { UnicodeScalar(Int($0.value) - 32)! }.map { Character(UnicodeScalar($0)!) }\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0nvpniq5.swift:20:151: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encodedMessage\
    \ += String(char).lowercased().unicodeScalars.map { UnicodeScalar(Int($0.value)\
    \ + 2)! }.map { Character(UnicodeScalar($0)!) }\n                            \
    \                                                                            \
    \                             ~~~~~~~~~~~~~~~~~^\n                           \
    \                                                                            \
    \                                               \n/tmp/tmp0nvpniq5.swift:23:148:\
    \ error: cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \            encodedMessage += String(char).lowercased().unicodeScalars.map {\
    \ UnicodeScalar(Int($0.value) - 32)! }.map { Character(UnicodeScalar($0)!) }\n\
    \                                                                            \
    \                                                      ~~~~~~~~~~~~~~~~~^\n  \
    \                                                                            \
    \                                                                     \n"
  stdout: ''
  timestamp: 1659824369
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = index + 2\n                encodedMessage.append(letters[newIndex\
    \ % letters.count])\n            } else {\n                encodedMessage.append(letters[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmxv2s6mq.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of:\
    \ String(char).lowercased())! + 2)\n            encodedMessage += String(alphabet[index]).uppercased()\n\
    \        } else {\n            encodedMessage += String(char).uppercased()\n \
    \       }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbdzqrqlf.swift:18:103: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of: String(char).lowercased())!\
    \ + 2)\n                                                                     \
    \                                 ^\n/tmp/tmpbdzqrqlf.swift:18:116: error: cannot\
    \ convert value of type 'String.Index' to expected argument type 'Int'\n     \
    \       let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of:\
    \ String(char).lowercased())! + 2)\n                                         \
    \                                                                          ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let vowelsSet = Set(vowels)\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let lettersSet = Set(letters)\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if lettersSet.contains(char) {\n            if vowelsSet.contains(char)\
    \ {\n                let index = letters.index(of: char)!\n                let\
    \ newIndex = letters.index(index, offsetBy: 2)\n                let newChar =\
    \ letters[newIndex]\n                encodedMessage.append(newChar)\n        \
    \    } else {\n                let index = letters.index(of: char)!\n        \
    \        let newIndex = letters.index(index, offsetBy: -2)\n                let\
    \ newChar = letters[newIndex]\n                encodedMessage.append(newChar)\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmsvsdubu/tmpmsvsdubu.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad480de9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad480ae0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad480ae0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad480adf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmsvsdubu                        0x0000561dde2877f7 <unavailable> + 6135

    5    libc.so.6                          0x00002ad480fd5460 __libc_start_main +
    245

    6    tmpmsvsdubu                        0x0000561dde287439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encoded.append(alphabet[index])\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbo9zxcql.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            if let index =\
    \ alphabet.firstIndex(of: char) {\n                encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpoynoase3/tmpoynoase3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b049ddf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b049daebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b049daeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b049daea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoynoase3                        0x000055fc2fa57907 <unavailable> + 6407

    5    libc.so.6                          0x00002b049dfe0460 __libc_start_main +
    245

    6    tmpoynoase3                        0x000055fc2fa57549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)\n            let newIndex = index! + 2\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpnxxoqx02/tmpnxxoqx02.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae070a97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae07078eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae07078e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae07078d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxxoqx02                        0x000055e82956f8b7 <unavailable> + 6327

    5    libc.so.6                          0x00002ae070c83460 __libc_start_main +
    245

    6    tmpnxxoqx02                        0x000055e82956f4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for character in message {\n        if vowels.contains(character)\
    \ {\n            let index = vowels.firstIndex(of: character)!\n            let\
    \ newIndex = (index + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpf1mbimdb/tmpf1mbimdb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4902b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab48ffb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab48ffb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab48ffaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1mbimdb                        0x0000561a3dc09877 <unavailable> + 6263

    5    libc.so.6                          0x00002ab4904a5460 __libc_start_main +
    245

    6    tmpf1mbimdb                        0x0000561a3dc094b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for character in message {\n        if character.isLetter {\n  \
    \          encodedMessage += String(character.isUppercase ? character.lowercased()\
    \ : character.uppercased())\n        } else {\n            encodedMessage += String(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpdzetfakb/tmpdzetfakb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0699b94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b069988bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b069988b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b069988a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzetfakb                        0x000055b6dea03707 <unavailable> + 5895

    5    libc.so.6                          0x00002b0699d80460 __libc_start_main +
    245

    6    tmpdzetfakb                        0x000055b6dea03349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % letters.count\n\
    \            encoded.append(letters[newIndex])\n        } else {\n           \
    \ encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyxi_vrfl.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let newAscii = ascii + 2\n           \
    \ let newChar = Character(UnicodeScalar(newAscii)!)\n            encoded.append(newChar)\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyp6tnfr4.swift:18:60: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~^\n              \
    \                                             \n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp03xcqq8e.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let nextIndex = letters.index(index, offsetBy: 2)\n         \
    \       encoded.append(letters[nextIndex])\n            } else {\n           \
    \     encoded.append(letters[index])\n            }\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpd5m0hlyn.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let encodedAscii = ascii + 2\n       \
    \     let encodedChar = Character(UnicodeScalar(encodedAscii)!)\n            encodedMessage.append(encodedChar)\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpp8ekid3o.swift:18:68: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let encodedChar = Character(UnicodeScalar(encodedAscii)!)\n\
    \                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n      \
    \                                                             \n"
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message {\n        if vowels.contains(char) {\n      \
    \      encodedMessage.append(vowels[(vowels.firstIndex(of: char)! + 2) % vowels.count])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpeu818edh/tmpeu818edh.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d31f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d31c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d31c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d31c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeu818edh                        0x000055d18cd6a877 <unavailable> + 6263

    5    libc.so.6                          0x00002b1d32157460 __libc_start_main +
    245

    6    tmpeu818edh                        0x000055d18cd6a4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        } else {\n            encoded.append(char)\n        }\n   \
    \ }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmtt5qxuy.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encodedMessage\
    \ += char.isUppercase ? char.lowercased() : char.uppercased()\n        }\n   \
    \     if char.isVowel {\n            encodedMessage += char.next(2)\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmph8oae3e2.swift:18:17: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if char.isVowel {\n           ~~~~ ^~~~~~~\n/tmp/tmph8oae3e2.swift:19:36:\
    \ error: value of type 'Character' has no member 'next'\n            encodedMessage\
    \ += char.next(2)\n                              ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = (index + 2) % letters.count\n                encodedMessage.append(letters[newIndex].uppercased())\n\
    \            } else {\n                encodedMessage.append(letters[index].uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpw9wuupe9.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1benokn4.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ char in message {\n        if vowels.contains(String(char).lowercased()) {\n\
    \            encodedMessage += String(char).lowercased() == \"u\" ? \"a\" : String(characters[characters.index(characters.startIndex,\
    \ offsetBy: characters.index(of: String(char).lowercased())! + 2)])\n        }\
    \ else {\n            encodedMessage += String(char).lowercased() == String(char)\
    \ ? String(characters[characters.index(characters.startIndex, offsetBy: characters.index(of:\
    \ String(char).lowercased())! - 32)]) : String(characters[characters.index(characters.startIndex,\
    \ offsetBy: characters.index(of: String(char).lowercased())! + 32)])\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp0_eea76q.swift:17:79: error: cannot find 'characters' in scope\n\
    \            encodedMessage += String(char).lowercased() == \"u\" ? \"a\" : String(characters[characters.index(characters.startIndex,\
    \ offsetBy: characters.index(of: String(char).lowercased())! + 2)])\n        \
    \                                                                      ^~~~~~~~~~\n\
    /tmp/tmp0_eea76q.swift:17:90: error: cannot find 'characters' in scope\n     \
    \       encodedMessage += String(char).lowercased() == \"u\" ? \"a\" : String(characters[characters.index(characters.startIndex,\
    \ offsetBy: characters.index(of: String(char).lowercased())! + 2)])\n        \
    \                                                                            \
    \     ^~~~~~~~~~\n/tmp/tmp0_eea76q.swift:17:107: error: cannot find 'characters'\
    \ in scope\n            encodedMessage += String(char).lowercased() == \"u\" ?\
    \ \"a\" : String(characters[characters.index(characters.startIndex, offsetBy:\
    \ characters.index(of: String(char).lowercased())! + 2)])\n                  \
    \                                                                            \
    \            ^~~~~~~~~~\n/tmp/tmp0_eea76q.swift:17:140: error: cannot find 'characters'\
    \ in scope\n            encodedMessage += String(char).lowercased() == \"u\" ?\
    \ \"a\" : String(characters[characters.index(characters.startIndex, offsetBy:\
    \ characters.index(of: String(char).lowercased())! + 2)])\n                  \
    \                                                                            \
    \                                             ^~~~~~~~~~\n/tmp/tmp0_eea76q.swift:19:82:\
    \ error: cannot find 'characters' in scope\n            encodedMessage += String(char).lowercased()\
    \ == String(char) ? String(characters[characters.index(characters.startIndex,\
    \ offsetBy: characters.index(of: String(char).lowercased())! - 32)]) : String(characters[characters.index(characters.startIndex,\
    \ offsetBy: characters.index(of: String(char).lowercased())! + 32)])\n       \
    \                                                                          ^~~~~~~~~~\n\
    /tmp/tmp0_eea76q.swift:19:93: error: "
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for char\
    \ in message {\n        if vowels.contains(String(char).lowercased()) {\n    \
    \        encoded += String(char).lowercased() == \"z\" ? \"b\" : String(Array(String(char).lowercased())[1])\n\
    \        } else {\n            encoded += String(char).lowercased() == String(char)\
    \ ? String(char).uppercased() : String(char).lowercased()\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad72c520c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad72c217561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad72c217286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad72c21713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad72c216bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad72c0170a3 <unavailable> + 188579

    6    tmp7p13t8y0                        0x00005609452c0100 <unavailable> + 8448

    7    tmp7p13t8y0                        0x00005609452bf766 <unavailable> + 5990

    8    libc.so.6                          0x00002ad72c70c460 __libc_start_main +
    245

    9    tmp7p13t8y0                        0x00005609452bf469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encodedMessage\
    \ += encode(char: char)\n        } else {\n            encodedMessage += String(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpj0g53ty1.swift:16:37: error: incorrect argument label in call (have\
    \ 'char:', expected 'message:')\n            encodedMessage += encode(char: char)\n\
    \                                    ^~~~~\n                                 \
    \    message\n/tmp/tmpj0g53ty1.swift:16:44: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            encodedMessage +=\
    \ encode(char: char)\n                                           ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if let index = alphabet.firstIndex(of: char.lowercased())\
    \ {\n            if vowels.contains(char.lowercased()) {\n                encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8g22rqq_.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            let nextChar = alphabet[nextIndex]\n\
    \            encoded.append(nextChar)\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpekcrf511/tmpekcrf511.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73753f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73750ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73750eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73750ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekcrf511                        0x00005609fc9d9727 <unavailable> + 5927

    5    libc.so.6                          0x00002b73755e0460 __libc_start_main +
    245

    6    tmpekcrf511                        0x00005609fc9d9369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        let lowercaseChar = char.lowercased()\n\
    \        if lowercaseChar == \"a\" {\n            encodedMessage += \"c\"\n  \
    \      } else if lowercaseChar == \"e\" {\n            encodedMessage += \"g\"\
    \n        } else if lowercaseChar == \"i\" {\n            encodedMessage += \"\
    k\"\n        } else if lowercaseChar == \"o\" {\n            encodedMessage +=\
    \ \"q\"\n        } else if lowercaseChar == \"u\" {\n            encodedMessage\
    \ += \"y\"\n        } else if lowercaseChar == \"y\" {\n            encodedMessage\
    \ += \"a\"\n        } else if lowercaseChar == \" \" {\n            encodedMessage\
    \ += \" \"\n        } else {\n            encodedMessage += String(char)\n   \
    \     }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp0wa123ox/tmp0wa123ox.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b91f4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b91c45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b91c45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b91c447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wa123ox                        0x000055b7927734b7 <unavailable> + 5303

    5    libc.so.6                          0x00002b4b9213a460 __libc_start_main +
    245

    6    tmp0wa123ox                        0x000055b7927730f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encodedMessage\
    \ += encode(char: char)\n        } else {\n            encodedMessage += String(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpj0g53ty1.swift:16:37: error: incorrect argument label in call (have\
    \ 'char:', expected 'message:')\n            encodedMessage += encode(char: char)\n\
    \                                    ^~~~~\n                                 \
    \    message\n/tmp/tmpj0g53ty1.swift:16:44: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            encodedMessage +=\
    \ encode(char: char)\n                                           ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let encoded\
    \ = message.map { (char) -> Character in\n        if vowels.contains(char) {\n\
    \            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char)!))\n            let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            return alphabet[nextIndex]\n\
    \        } else {\n            return char\n        }\n    }\n    return String(encoded)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpky1yop56/tmpky1yop56.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5f29a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5f269cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5f269c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5f269b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpky1yop56                        0x00005613497f7827 <unavailable> + 6183

    5    libc.so.6                          0x00002ad5f2b91460 __libc_start_main +
    245

    6    tmpky1yop56                        0x00005613497f7469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for letter in message {\n        if vowels.contains(letter) {\n  \
    \          let index = vowels.firstIndex(of: letter)!\n            let newIndex\
    \ = (index + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpi_t9x6dl/tmpi_t9x6dl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6b9869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6b9560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6b9560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6b955f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_t9x6dl                        0x00005565bb1a6877 <unavailable> + 6263

    5    libc.so.6                          0x00002ad6b9a55460 __libc_start_main +
    245

    6    tmpi_t9x6dl                        0x00005565bb1a64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            encodedMessage.append(alphabet[(index + 2) % alphabet.count])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpzo22c8s6/tmpzo22c8s6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50caedec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50cabd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50cabd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50cabd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo22c8s6                        0x000055ce73806877 <unavailable> + 6263

    5    libc.so.6                          0x00002b50cb0ca460 __libc_start_main +
    245

    6    tmpzo22c8s6                        0x000055ce738064b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for letter\
    \ in message {\n        if vowels.contains(letter) {\n            let index =\
    \ alphabet.firstIndex(of: letter)!\n            let newIndex = index + 2\n   \
    \         encodedMessage.append(alphabet[newIndex])\n        } else {\n      \
    \      encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpomsfdroy/tmpomsfdroy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c6b30ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c6b005b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c6b005988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c6b0047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomsfdroy                        0x0000559356b638b7 <unavailable> + 6327

    5    libc.so.6                          0x00002b8c6b4fa460 __libc_start_main +
    245

    6    tmpomsfdroy                        0x0000559356b634f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    var vowels = \"aeiou\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            let newIndex\
    \ = index + 2\n            encodedMessage.append(vowels[newIndex])\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1e_r5z9l.swift:18:28: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let newIndex = index + 2\n    \
    \                       ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        let charString\
    \ = String(char)\n        if vowels.contains(charString.lowercased()) {\n    \
    \        let index = alphabet.index(of: charString.lowercased())!\n          \
    \  let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage\
    \ += String(alphabet[newIndex]).uppercased()\n        } else {\n            encodedMessage\
    \ += charString.uppercased()\n        }\n    }\n    return encodedMessage\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp20p54_2_.swift:19:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = alphabet.index(of: charString.lowercased())!\n                     \
    \                                 ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp36quf7v1.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let ascii2 = ascii + 2\n            let\
    \ char2 = Character(UnicodeScalar(ascii2)!)\n            encoded.append(char2)\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6wx2a152.swift:18:56: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let char2 = Character(UnicodeScalar(ascii2)!)\n\
    \                                  ~~~~~~~~~~~~~~~~~~~~~^\n                  \
    \                                     \n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message {\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n            if vowels.contains(char.lowercased())\
    \ {\n                encodedMessage.append(letters[letters.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(letters[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp37bafzzj.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encodedMessage = \"\"\n   \
    \ for char in message {\n        if vowels.contains(char) {\n            let index\
    \ = alphabet.firstIndex(of: char)!\n            let newIndex = (index + 2) % alphabet.count\n\
    \            encodedMessage.append(alphabet[newIndex])\n        } else {\n   \
    \         encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp4dkcjsj0/tmp4dkcjsj0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab352e12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab352b09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab352b09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab352b087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4dkcjsj0                        0x000055fc4c32f9e7 <unavailable> + 6631

    5    libc.so.6                          0x00002ab352ffe460 __libc_start_main +
    245

    6    tmp4dkcjsj0                        0x000055fc4c32f629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for char in\
    \ message {\n        if vowels.contains(char) {\n            if let index = alphabet.firstIndex(of:\
    \ char) {\n                let newIndex = index + 2\n                if newIndex\
    \ > alphabet.count - 1 {\n                    encodedMessage.append(alphabet[newIndex\
    \ - alphabet.count])\n                } else {\n                    encodedMessage.append(alphabet[newIndex])\n\
    \                }\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp83dbyfv9/tmp83dbyfv9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bffe33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bffb2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bffb2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bffb297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp83dbyfv9                        0x000055721aa627e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b0c0001f460 __libc_start_main +
    245

    6    tmp83dbyfv9                        0x000055721aa62429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            encoded.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp3pfmoplj/tmp3pfmoplj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24fbc7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24fb975b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24fb975988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24fb9747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pfmoplj                        0x0000565321a755c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b24fbe6a460 __libc_start_main +
    245

    6    tmp3pfmoplj                        0x0000565321a75209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            if\
    \ char.isUppercase {\n                encodedMessage.append(char.lowercased())\n\
    \            } else {\n                encodedMessage.append(char.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmnhpd5m2/tmpmnhpd5m2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc20e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc1ddeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc1dde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc1ddd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmnhpd5m2                        0x000055a91bd4c5c7 <unavailable> + 5575

    5    libc.so.6                          0x00002b4cc22d3460 __libc_start_main +
    245

    6    tmpmnhpd5m2                        0x000055a91bd4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = letters.firstIndex(of:\
    \ letter.lowercased()) {\n            if vowels.contains(letter.lowercased())\
    \ {\n                let nextIndex = letters.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(letters[nextIndex])\n            } else {\n\
    \                encodedMessage.append(letters[index])\n            }\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmppupwcdjc.swift:17:54: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: letter.lowercased()) {\n                    \
    \                                 ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for character\
    \ in message {\n        if vowels.contains(character) {\n            if let index\
    \ = alphabet.firstIndex(of: character) {\n                encodedMessage.append(alphabet[(index\
    \ + 2) % alphabet.count])\n            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpf4vqedhf/tmpf4vqedhf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f9f482c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f9f179b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f9f179988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f9f1787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4vqedhf                        0x000055901b5ba877 <unavailable> + 6263

    5    libc.so.6                          0x00002b5f9f66e460 __libc_start_main +
    245

    6    tmpf4vqedhf                        0x000055901b5ba4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.firstIndex(of: char)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpbc_r10fc/tmpbc_r10fc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6c3fbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6c3cb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6c3cb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6c3cb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbc_r10fc                        0x000055ecf70ae727 <unavailable> + 5927

    5    libc.so.6                          0x00002ac6c41a8460 __libc_start_main +
    245

    6    tmpbc_r10fc                        0x000055ecf70ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \            } else {\n                encoded.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmknqi7c5.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1benokn4.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for character\
    \ in message {\n        if vowels.contains(character) {\n            let index\
    \ = alphabet.firstIndex(of: character)!\n            let newIndex = index + 2\n\
    \            let newCharacter = alphabet[newIndex]\n            encodedMessage.append(newCharacter)\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpeabj0ewm/tmpeabj0ewm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b100ac34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b100a92bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b100a92b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b100a92a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeabj0ewm                        0x0000560dd0551827 <unavailable> + 6183

    5    libc.so.6                          0x00002b100ae20460 __libc_start_main +
    245

    6    tmpeabj0ewm                        0x0000560dd0551469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for character in message {\n        if vowels.contains(character)\
    \ {\n            let index = alphabet.firstIndex(of: character)\n            let\
    \ nextIndex = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[nextIndex])\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpxzpg6qz6/tmpxzpg6qz6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b893d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b890ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b890ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b890cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzpg6qz6                        0x0000556becf24727 <unavailable> + 5927

    5    libc.so.6                          0x00002b3b895c3460 __libc_start_main +
    245

    6    tmpxzpg6qz6                        0x0000556becf24369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            if ascii >= 65 && ascii <= 90 {\n    \
    \            encodedMessage.append(Character(UnicodeScalar(ascii + 32)!))\n  \
    \          } else if ascii >= 97 && ascii <= 122 {\n                encodedMessage.append(Character(UnicodeScalar(ascii\
    \ - 32)!))\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3jekdhm_.swift:18:74: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encodedMessage.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n                                                ~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                         \n/tmp/tmp3jekdhm_.swift:20:74:\
    \ error: cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \                encodedMessage.append(Character(UnicodeScalar(ascii - 32)!))\n\
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                         \n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ index = alphabet.firstIndex(of: char.lowercased())!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            if vowels.contains(char.lowercased())\
    \ {\n                encoded.append(alphabet[newIndex])\n            } else {\n\
    \                encoded.append(alphabet[index])\n            }\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp48r5rqlo.swift:18:54: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n            let\
    \ index = alphabet.firstIndex(of: char.lowercased())!\n                      \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    var encoded = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = vowels.firstIndex(of: char)!\n            let nextIndex\
    \ = vowels.index(after: index)\n            let nextNextIndex = vowels.index(after:\
    \ nextIndex)\n            encoded.append(vowels[nextNextIndex])\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpd9g9mv1t/tmpd9g9mv1t.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adca72b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adca6faeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adca6fae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adca6fad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9g9mv1t                        0x0000555db99d4727 <unavailable> + 5927

    5    libc.so.6                          0x00002adca74a3460 __libc_start_main +
    245

    6    tmpd9g9mv1t                        0x0000555db99d4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let asciiValue = ascii + (ascii >= 65\
    \ && ascii <= 90 ? 32 : -32)\n            let newAscii = asciiValue + (asciiValue\
    \ >= 97 && asciiValue <= 122 ? 2 : -24)\n            encodedMessage.append(Character(UnicodeScalar(newAscii)!))\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphrx8wngb.swift:19:68: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            encodedMessage.append(Character(UnicodeScalar(newAscii)!))\n\
    \                                            ~~~~~~~~~~~~~~~~~~~~~~~^\n      \
    \                                                             \n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.index(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                let newIndex = alphabet.index(index, offsetBy: 2)\n         \
    \       encodedMessage.append(alphabet[newIndex])\n            } else {\n    \
    \            encodedMessage.append(alphabet[index])\n            }\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2jmkq09a.swift:17:48: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.index(of: char.lowercased()) {\n                          \
    \                     ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ ascii = char.asciiValue!\n            let newAscii = ascii + (ascii < 97 ? 2\
    \ : -2)\n            let newChar = Character(UnicodeScalar(newAscii)!)\n     \
    \       encodedMessage.append(newChar)\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvjlgnsm9.swift:18:60: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~^\n              \
    \                                             \n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for letter in message {\n        if let index = alphabet.firstIndex(of:\
    \ letter.lowercased()) {\n            let isUppercased = letter.isUppercased\n\
    \            let newLetter = alphabet[alphabet.index(index, offsetBy: 2)]\n  \
    \          encodedMessage += isUppercased ? newLetter.uppercased() : newLetter\n\
    \        } else {\n            encodedMessage += String(letter)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp21p3b2hl.swift:17:55: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: letter.lowercased()) {\n                   \
    \                                   ^\n/tmp/tmp21p3b2hl.swift:18:39: error: value\
    \ of type 'Character' has no member 'isUppercased'\n            let isUppercased\
    \ = letter.isUppercased\n                               ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encoded = \"\"\n    for letter\
    \ in message {\n        if let ascii = letter.asciiValue {\n            if ascii\
    \ >= 65 && ascii <= 90 {\n                encoded.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n            } else if ascii >= 97 && ascii <= 122 {\n            \
    \    encoded.append(Character(UnicodeScalar(ascii - 32)!))\n            } else\
    \ {\n                encoded.append(letter)\n            }\n        }\n    }\n\
    \    for vowel in vowels {\n        encoded = encoded.replacingOccurrences(of:\
    \ vowel, with: String(vowel.unicodeScalars.first!.value + 2))\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpdlrtccwk.swift:18:67: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encoded.append(Character(UnicodeScalar(ascii\
    \ + 32)!))\n                                         ~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                  \n/tmp/tmpdlrtccwk.swift:20:67:\
    \ error: cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \                encoded.append(Character(UnicodeScalar(ascii - 32)!))\n     \
    \                                    ~~~~~~~~~~~~~~~~~~~~~~~~~^\n            \
    \                                                      \n/tmp/tmpdlrtccwk.swift:27:27:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n       \
    \ encoded = encoded.replacingOccurrences(of: vowel, with: String(vowel.unicodeScalars.first!.value\
    \ + 2))\n                  ~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if let index = alphabet.firstIndex(of:\
    \ char.lowercased()) {\n            if vowels.contains(char.lowercased()) {\n\
    \                encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1benokn4.swift:17:53: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = alphabet.firstIndex(of: char.lowercased()) {\n                     \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824368
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encoded = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alphabet.count\n          \
    \  encoded.append(alphabet[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp3xbaqk4g/tmp3xbaqk4g.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b788c9dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b788c6d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b788c6d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b788c6d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xbaqk4g                        0x000055bb8e60f9e7 <unavailable> + 6631

    5    libc.so.6                          0x00002b788cbc8460 __libc_start_main +
    245

    6    tmp3xbaqk4g                        0x000055bb8e60f629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659824367
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message {\n        if let index = letters.firstIndex(of:\
    \ char.lowercased()) {\n            let newIndex = (index + 2) % letters.count\n\
    \            encoded.append(letters[newIndex])\n        } else {\n           \
    \ encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyxi_vrfl.swift:17:52: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n        if let\
    \ index = letters.firstIndex(of: char.lowercased()) {\n                      \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824367
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    let vowels:\
    \ Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char\
    \ in message {\n        if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = index + 2\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpraxp64v8/tmpraxp64v8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b999637ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9996071b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9996071988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99960707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraxp64v8                        0x0000557d3fc538b7 <unavailable> + 6327

    5    libc.so.6                          0x00002b9996566460 __libc_start_main +
    245

    6    tmpraxp64v8                        0x0000557d3fc534f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        let charAscii = char.asciiValue!\n\
    \        if charAscii >= 65 && charAscii <= 90 {\n            encodedMessage.append(Character(UnicodeScalar(charAscii\
    \ + 32)!))\n        } else if charAscii >= 97 && charAscii <= 122 {\n        \
    \    encodedMessage.append(Character(UnicodeScalar(charAscii - 32)!))\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpukg17ybf.swift:17:74: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            encodedMessage.append(Character(UnicodeScalar(charAscii\
    \ + 32)!))\n                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                         \n/tmp/tmpukg17ybf.swift:19:74:\
    \ error: cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \            encodedMessage.append(Character(UnicodeScalar(charAscii - 32)!))\n\
    \                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                         \n"
  stdout: ''
  timestamp: 1659824368
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message:\
    \ \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n///\
    \ \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if char.isLetter {\n            let\
    \ asciiValue = char.asciiValue!\n            let encodedChar = asciiValue + 2\n\
    \            if encodedChar > 90 {\n                encodedMessage.append(Character(UnicodeScalar(encodedChar\
    \ - 26)!))\n            } else {\n                encodedMessage.append(Character(UnicodeScalar(encodedChar)!))\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpw7xewz_e.swift:19:80: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encodedMessage.append(Character(UnicodeScalar(encodedChar\
    \ - 26)!))\n                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \   \n/tmp/tmpw7xewz_e.swift:21:75: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n                encodedMessage.append(Character(UnicodeScalar(encodedChar)!))\n\
    \                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                          \n"
  stdout: ''
  timestamp: 1659824368
