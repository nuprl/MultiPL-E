language: swift
name: HumanEval_102_choose_num
results:
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x\
    \ < y {\n        for i in x...y {\n            if i % 2 == 0 {\n             \
    \   result = i\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprco0m_qx/tmprco0m_qx.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ebc575c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ebc26cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ebc26c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ebc26b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprco0m_qx                        0x00005559b417a6ce <unavailable> + 5838

    5    libc.so.6                          0x00002b2ebc761460 __libc_start_main +
    245

    6    tmprco0m_qx                        0x00005559b4179fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Write some code to\
    \ solve this coding challenge\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprbwrgr__/tmprbwrgr__.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b4a795c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b4a48cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b4a48c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b4a48b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbwrgr__                        0x0000559c6f51c1bd <unavailable> + 4541

    5    libc.so.6                          0x00002b6b4a981460 __libc_start_main +
    245

    6    tmprbwrgr__                        0x0000559c6f51be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if x % 2 == 1 {\n\
    \        return x + 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpiv5x0p56/tmpiv5x0p56.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18bfd2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18bfa23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18bfa23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18bfa227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiv5x0p56                        0x000055e41c3b124d <unavailable> + 4685

    5    libc.so.6                          0x00002b18bff18460 __libc_start_main +
    245

    6    tmpiv5x0p56                        0x000055e41c3b0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Implement this function\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp33e3ffqu/tmp33e3ffqu.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7a710fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7a6e06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7a6e06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7a6e057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33e3ffqu                        0x000055768bc981bd <unavailable> + 4541

    5    libc.so.6                          0x00002ad7a72fb460 __libc_start_main +
    245

    6    tmp33e3ffqu                        0x000055768bc97e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x\
    \ > y {\n        return result\n    }\n    for i in x...y {\n        if i % 2\
    \ == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var max = -1\n    for i in\
    \ x...y {\n        if i % 2 == 0 && i > max {\n            max = i\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aea35f8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea35c83561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aea35c83286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aea35c8313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aea35c82bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpn8q1t2yr                        0x00005588c5dd87f0 <unavailable> + 6128

    6    tmpn8q1t2yr                        0x00005588c5dd8350 <unavailable> + 4944

    7    libc.so.6                          0x00002aea36178460 __libc_start_main +
    245

    8    tmpn8q1t2yr                        0x00005588c5dd7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x\
    \ > y {\n        return result\n    }\n    for i in x...y {\n        if i % 2\
    \ == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp3y36ltca/tmp3y36ltca.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cfdaa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cfd79db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cfd79d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cfd79c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3y36ltca                        0x000055be47d8b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b4cfdc92460 __libc_start_main +
    245

    6    tmp3y36ltca                        0x000055be47d8aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Write your code here!\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphykrvkwi/tmphykrvkwi.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb053abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb050a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb050a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb050a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphykrvkwi                        0x00005570366741bd <unavailable> + 4541

    5    libc.so.6                          0x00002acb05597460 __libc_start_main +
    245

    6    tmphykrvkwi                        0x0000557036673e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x\
    \ > y {\n        return result\n    }\n    for i in x...y {\n        if i % 2\
    \ == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    var max = -1\n    for i in x...y {\n        if i % 2 == 0 {\n\
    \            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp3y36ltca/tmp3y36ltca.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cfdaa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cfd79db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cfd79d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cfd79c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3y36ltca                        0x000055be47d8b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b4cfdc92460 __libc_start_main +
    245

    6    tmp3y36ltca                        0x000055be47d8aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Implement this function\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp33e3ffqu/tmp33e3ffqu.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7a710fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7a6e06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7a6e06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7a6e057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33e3ffqu                        0x000055768bc981bd <unavailable> + 4541

    5    libc.so.6                          0x00002ad7a72fb460 __libc_start_main +
    245

    6    tmp33e3ffqu                        0x000055768bc97e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n\
    \        return -1\n    }\n    return choose_num(x: x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkfb7aqdc/tmpkfb7aqdc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55843acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55840a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55840a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55840a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfb7aqdc                        0x000055712412c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5584598460 __libc_start_main +
    245

    6    tmpkfb7aqdc                        0x000055712412bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n\
    \        return y\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp48swkyjo/tmp48swkyjo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ed9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ed92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ed92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ed92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48swkyjo                        0x0000564dbcccd24d <unavailable> + 4685

    5    libc.so.6                          0x00002b3ed97f4460 __libc_start_main +
    245

    6    tmp48swkyjo                        0x0000564dbccccef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Write your code here!\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphykrvkwi/tmphykrvkwi.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb053abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb050a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb050a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb050a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphykrvkwi                        0x00005570366741bd <unavailable> + 4541

    5    libc.so.6                          0x00002acb05597460 __libc_start_main +
    245

    6    tmphykrvkwi                        0x0000557036673e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Write your code here\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpcn2q48k3/tmpcn2q48k3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b949b038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b949ad2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b949ad2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b949ad2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcn2q48k3                        0x00005605684c81bd <unavailable> + 4541

    5    libc.so.6                          0x00002b949b224460 __libc_start_main +
    245

    6    tmpcn2q48k3                        0x00005605684c7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Write your code here\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpcn2q48k3/tmpcn2q48k3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b949b038c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b949ad2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b949ad2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b949ad2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcn2q48k3                        0x00005605684c81bd <unavailable> + 4541

    5    libc.so.6                          0x00002b949b224460 __libc_start_main +
    245

    6    tmpcn2q48k3                        0x00005605684c7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp3y36ltca/tmp3y36ltca.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cfdaa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cfd79db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cfd79d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cfd79c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3y36ltca                        0x000055be47d8b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b4cfdc92460 __libc_start_main +
    245

    6    tmp3y36ltca                        0x000055be47d8aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if y % 2 == 0 {\n        return y\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplarbernw/tmplarbernw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b450f4eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b450f1e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b450f1e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b450f1e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplarbernw                        0x00005633afc6324d <unavailable> + 4685

    5    libc.so.6                          0x00002b450f6d6460 __libc_start_main +
    245

    6    tmplarbernw                        0x00005633afc62ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n\
    \        return y\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp48swkyjo/tmp48swkyjo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ed9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ed92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ed92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ed92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48swkyjo                        0x0000564dbcccd24d <unavailable> + 4685

    5    libc.so.6                          0x00002b3ed97f4460 __libc_start_main +
    245

    6    tmp48swkyjo                        0x0000564dbccccef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Implement this function\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp33e3ffqu/tmp33e3ffqu.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7a710fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7a6e06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7a6e06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7a6e057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33e3ffqu                        0x000055768bc981bd <unavailable> + 4541

    5    libc.so.6                          0x00002ad7a72fb460 __libc_start_main +
    245

    6    tmp33e3ffqu                        0x000055768bc97e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpm4m9fj6z/tmpm4m9fj6z.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca1f5aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca1f2a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca1f2a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca1f2a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm4m9fj6z                        0x00005591896821bd <unavailable> + 4541

    5    libc.so.6                          0x00002aca1f796460 __libc_start_main +
    245

    6    tmpm4m9fj6z                        0x0000559189681e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var num = -1\n    if x > y\
    \ {\n        return num\n    }\n    for i in x...y {\n        if i % 2 == 0 {\n\
    \            num = i\n        }\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 <= y {\n        return x + 1\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprq1v581e/tmprq1v581e.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34770fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3476df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3476df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3476df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprq1v581e                        0x000056040354524d <unavailable> + 4685

    5    libc.so.6                          0x00002b34772e8460 __libc_start_main +
    245

    6    tmprq1v581e                        0x0000560403544ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Write some code to\
    \ solve this coding challenge\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprbwrgr__/tmprbwrgr__.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b4a795c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b4a48cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b4a48c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b4a48b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbwrgr__                        0x0000559c6f51c1bd <unavailable> + 4541

    5    libc.so.6                          0x00002b6b4a981460 __libc_start_main +
    245

    6    tmprbwrgr__                        0x0000559c6f51be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 <= y {\n        return x + 1\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprq1v581e/tmprq1v581e.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34770fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3476df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3476df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3476df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprq1v581e                        0x000056040354524d <unavailable> + 4685

    5    libc.so.6                          0x00002b34772e8460 __libc_start_main +
    245

    6    tmprq1v581e                        0x0000560403544ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    var result = y\n    while result >= x {\n        if result %\
    \ 2 == 0 {\n            return result\n        }\n        result -= 1\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 == y {\n        return -1\n    } else {\n        return\
    \ choose_num(x: x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp3xal5bh7/tmp3xal5bh7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee1b6a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee1b399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee1b399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee1b3987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xal5bh7                        0x000055f64a81724d <unavailable> + 4685

    5    libc.so.6                          0x00002aee1b88e460 __libc_start_main +
    245

    6    tmp3xal5bh7                        0x000055f64a816ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 <= y {\n        return x + 1\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprq1v581e/tmprq1v581e.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34770fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3476df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3476df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3476df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprq1v581e                        0x000056040354524d <unavailable> + 4685

    5    libc.so.6                          0x00002b34772e8460 __libc_start_main +
    245

    6    tmprq1v581e                        0x0000560403544ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if y % 2 == 0 {\n        return y\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplarbernw/tmplarbernw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b450f4eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b450f1e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b450f1e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b450f1e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplarbernw                        0x00005633afc6324d <unavailable> + 4685

    5    libc.so.6                          0x00002b450f6d6460 __libc_start_main +
    245

    6    tmplarbernw                        0x00005633afc62ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 == y {\n        return -1\n    } else {\n        return\
    \ choose_num(x: x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp3xal5bh7/tmp3xal5bh7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee1b6a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee1b399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee1b399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee1b3987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xal5bh7                        0x000055f64a81724d <unavailable> + 4685

    5    libc.so.6                          0x00002aee1b88e460 __libc_start_main +
    245

    6    tmp3xal5bh7                        0x000055f64a816ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Write some code to\
    \ solve this coding challenge\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprbwrgr__/tmprbwrgr__.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b4a795c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b4a48cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b4a48c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b4a48b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbwrgr__                        0x0000559c6f51c1bd <unavailable> + 4541

    5    libc.so.6                          0x00002b6b4a981460 __libc_start_main +
    245

    6    tmprbwrgr__                        0x0000559c6f51be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    for i in x...y {\n        if i % 2 == 0 {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpjy445gi1/tmpjy445gi1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af68d840c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af68d537b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af68d537988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af68d5367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjy445gi1                        0x000055620f17c33d <unavailable> + 4925

    5    libc.so.6                          0x00002af68da2c460 __libc_start_main +
    245

    6    tmpjy445gi1                        0x000055620f17bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Implement this function!\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp0wam6tdg/tmp0wam6tdg.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46650a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4664d9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4664d9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4664d9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0wam6tdg                        0x000056060787f1bd <unavailable> + 4541

    5    libc.so.6                          0x00002b4665293460 __libc_start_main +
    245

    6    tmp0wam6tdg                        0x000056060787ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Write your code here!\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsqkf6e_s/tmpsqkf6e_s.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac83e6e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac83e3d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac83e3d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac83e3d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsqkf6e_s                        0x0000557ea2db11bd <unavailable> + 4541

    5    libc.so.6                          0x00002ac83e8ce460 __libc_start_main +
    245

    6    tmpsqkf6e_s                        0x0000557ea2db0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n\
    \        return -1\n    }\n    return choose_num(x: x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkfb7aqdc/tmpkfb7aqdc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55843acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55840a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55840a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55840a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfb7aqdc                        0x000055712412c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5584598460 __libc_start_main +
    245

    6    tmpkfb7aqdc                        0x000055712412bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n\
    \        return -1\n    }\n    return choose_num(x: x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkfb7aqdc/tmpkfb7aqdc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55843acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55840a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55840a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55840a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfb7aqdc                        0x000055712412c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5584598460 __libc_start_main +
    245

    6    tmpkfb7aqdc                        0x000055712412bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n\
    \        return -1\n    }\n    return choose_num(x: x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkfb7aqdc/tmpkfb7aqdc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55843acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55840a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55840a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55840a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfb7aqdc                        0x000055712412c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5584598460 __libc_start_main +
    245

    6    tmpkfb7aqdc                        0x000055712412bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Implement this function\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp33e3ffqu/tmp33e3ffqu.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7a710fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7a6e06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7a6e06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7a6e057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33e3ffqu                        0x000055768bc981bd <unavailable> + 4541

    5    libc.so.6                          0x00002ad7a72fb460 __libc_start_main +
    245

    6    tmp33e3ffqu                        0x000055768bc97e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Write some code to\
    \ solve this coding challenge\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprbwrgr__/tmprbwrgr__.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b4a795c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b4a48cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b4a48c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b4a48b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbwrgr__                        0x0000559c6f51c1bd <unavailable> + 4541

    5    libc.so.6                          0x00002b6b4a981460 __libc_start_main +
    245

    6    tmprbwrgr__                        0x0000559c6f51be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n\
    \        return -1\n    }\n    return choose_num(x: x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkfb7aqdc/tmpkfb7aqdc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55843acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55840a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55840a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55840a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfb7aqdc                        0x000055712412c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5584598460 __libc_start_main +
    245

    6    tmpkfb7aqdc                        0x000055712412bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Your code here!\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphb0spbaz/tmphb0spbaz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb00f1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb00c11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb00c11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb00c107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphb0spbaz                        0x000055b47c8b51bd <unavailable> + 4541

    5    libc.so.6                          0x00002afb01106460 __libc_start_main +
    245

    6    tmphb0spbaz                        0x000055b47c8b4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n\
    \        return -1\n    }\n    return choose_num(x: x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkfb7aqdc/tmpkfb7aqdc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55843acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55840a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55840a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55840a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfb7aqdc                        0x000055712412c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5584598460 __libc_start_main +
    245

    6    tmpkfb7aqdc                        0x000055712412bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x\
    \ > y {\n        return result\n    }\n    if x % 2 == 0 {\n        result = x\n\
    \    } else {\n        result = x + 1\n    }\n    if result > y {\n        result\
    \ = -1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnoo8lb3i/tmpnoo8lb3i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09ca93ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09ca631b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09ca631988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09ca6307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnoo8lb3i                        0x000055c8a8eea24d <unavailable> + 4685

    5    libc.so.6                          0x00002b09cab26460 __libc_start_main +
    245

    6    tmpnoo8lb3i                        0x000055c8a8ee9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n\
    \        return y\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp48swkyjo/tmp48swkyjo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ed9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ed92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ed92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ed92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48swkyjo                        0x0000564dbcccd24d <unavailable> + 4685

    5    libc.so.6                          0x00002b3ed97f4460 __libc_start_main +
    245

    6    tmp48swkyjo                        0x0000564dbccccef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 == y {\n        return -1\n    } else {\n        return\
    \ choose_num(x: x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp3xal5bh7/tmp3xal5bh7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee1b6a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee1b399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee1b399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee1b3987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xal5bh7                        0x000055f64a81724d <unavailable> + 4685

    5    libc.so.6                          0x00002aee1b88e460 __libc_start_main +
    245

    6    tmp3xal5bh7                        0x000055f64a816ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 <= y {\n        return x + 1\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprq1v581e/tmprq1v581e.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34770fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3476df3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3476df3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3476df27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprq1v581e                        0x000056040354524d <unavailable> + 4685

    5    libc.so.6                          0x00002b34772e8460 __libc_start_main +
    245

    6    tmprq1v581e                        0x0000560403544ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n\
    \        return y\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp48swkyjo/tmp48swkyjo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ed9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ed92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ed92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ed92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48swkyjo                        0x0000564dbcccd24d <unavailable> + 4685

    5    libc.so.6                          0x00002b3ed97f4460 __libc_start_main +
    245

    6    tmp48swkyjo                        0x0000564dbccccef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n\
    \        return y\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp48swkyjo/tmp48swkyjo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ed9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ed92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ed92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ed92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48swkyjo                        0x0000564dbcccd24d <unavailable> + 4685

    5    libc.so.6                          0x00002b3ed97f4460 __libc_start_main +
    245

    6    tmp48swkyjo                        0x0000564dbccccef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n\
    \        return y\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp48swkyjo/tmp48swkyjo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ed9608c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ed92ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ed92ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ed92fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48swkyjo                        0x0000564dbcccd24d <unavailable> + 4685

    5    libc.so.6                          0x00002b3ed97f4460 __libc_start_main +
    245

    6    tmp48swkyjo                        0x0000564dbccccef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    else if x % 2 == 0 {\n        return x\n    }\n    else {\n \
    \       return x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp87jp14vl/tmp87jp14vl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6bc568c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6bc25fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6bc25f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6bc25e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87jp14vl                        0x0000555ea003d24d <unavailable> + 4685

    5    libc.so.6                          0x00002ac6bc754460 __libc_start_main +
    245

    6    tmp87jp14vl                        0x0000555ea003cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var max_even = -1\n    for\
    \ i in x...y {\n        if i % 2 == 0 {\n            max_even = i\n        }\n\
    \    }\n    return max_even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af40f6cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af40f3c4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af40f3c4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af40f3c413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af40f3c3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp26sh9or8                        0x00005620d99637f0 <unavailable> + 6128

    6    tmp26sh9or8                        0x00005620d9963350 <unavailable> + 4944

    7    libc.so.6                          0x00002af40f8b9460 __libc_start_main +
    245

    8    tmp26sh9or8                        0x00005620d9962fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n\
    \        return -1\n    }\n    return choose_num(x: x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkfb7aqdc/tmpkfb7aqdc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55843acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55840a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55840a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55840a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfb7aqdc                        0x000055712412c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5584598460 __libc_start_main +
    245

    6    tmpkfb7aqdc                        0x000055712412bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x % 2 == 0 {\n        return\
    \ x\n    } else if x + 1 == y {\n        return -1\n    } else {\n        return\
    \ choose_num(x: x + 1, y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp3xal5bh7/tmp3xal5bh7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee1b6a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee1b399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee1b399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee1b3987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xal5bh7                        0x000055f64a81724d <unavailable> + 4685

    5    libc.so.6                          0x00002aee1b88e460 __libc_start_main +
    245

    6    tmp3xal5bh7                        0x000055f64a816ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if (x > y) {\n        return\
    \ -1\n    }\n    if (x % 2 == 0) {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp9svocpfx/tmp9svocpfx.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb0ff42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb0fc39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb0fc39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb0fc387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9svocpfx                        0x0000560565fc824d <unavailable> + 4685

    5    libc.so.6                          0x00002acb1012e460 __libc_start_main +
    245

    6    tmp9svocpfx                        0x0000560565fc7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Implement this function.\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprc586l4s/tmprc586l4s.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b956b1c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b956aebdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b956aebd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b956aebc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc586l4s                        0x000055ec73c281bd <unavailable> + 4541

    5    libc.so.6                          0x00002b956b3b2460 __libc_start_main +
    245

    6    tmprc586l4s                        0x000055ec73c27e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    // TODO: Write your code here!\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphykrvkwi/tmphykrvkwi.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb053abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb050a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb050a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb050a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphykrvkwi                        0x00005570366741bd <unavailable> + 4541

    5    libc.so.6                          0x00002acb05597460 __libc_start_main +
    245

    6    tmphykrvkwi                        0x0000557036673e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n\
    \        return -1\n    }\n    return choose_num(x: x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkfb7aqdc/tmpkfb7aqdc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55843acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55840a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55840a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55840a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfb7aqdc                        0x000055712412c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5584598460 __libc_start_main +
    245

    6    tmpkfb7aqdc                        0x000055712412bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    } else if x % 2 == 0 {\n        return x\n    } else {\n        return\
    \ x + 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp3y36ltca/tmp3y36ltca.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cfdaa6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cfd79db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cfd79d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cfd79c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3y36ltca                        0x000055be47d8b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b4cfdc92460 __libc_start_main +
    245

    6    tmp3y36ltca                        0x000055be47d8aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x\
    \ > y {\n        return result\n    }\n    for i in x...y {\n        if i % 2\
    \ == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i\
    \ in x...y {\n        if i % 2 == 0 {\n            result = i\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af9652e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af964fd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af964fd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af964fd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af964fd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk1czjwyl                        0x0000562f5913b7f0 <unavailable> + 6128

    6    tmpk1czjwyl                        0x0000562f5913b350 <unavailable> + 4944

    7    libc.so.6                          0x00002af9654cd460 __libc_start_main +
    245

    8    tmpk1czjwyl                        0x0000562f5913afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n///\
    \ -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return\
    \ -1\n    }\n    if x % 2 == 0 {\n        return x\n    }\n    return choose_num(x:\
    \ x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpsx6wnm38/tmpsx6wnm38.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24221cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241f13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241f13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241f127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsx6wnm38                        0x000056256233b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab242408460 __libc_start_main +
    245

    6    tmpsx6wnm38                        0x000056256233aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824430
