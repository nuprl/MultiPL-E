language: swift
name: HumanEval_0_has_close_elements
results:
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i+1] - numbers[i] <\
    \ threshold {\n            return true\n        }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_distance = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                let distance = abs(numbers[i] - numbers[j])\n\
    \                if distance < min_distance {\n                    min_distance\
    \ = distance\n                }\n            }\n        }\n    }\n    return min_distance\
    \ < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count - 1 {\n        if sorted_numbers[i + 1]\
    \ - sorted_numbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if abs(numbers[i] - numbers[i +\
    \ 1]) < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_distance = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                let distance = abs(numbers[i] - numbers[j])\n\
    \                if distance < min_distance {\n                    min_distance\
    \ = distance\n                }\n            }\n        }\n    }\n    return min_distance\
    \ < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count-1 {\n        if numbers[i+1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_distance = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                let distance = abs(numbers[i] - numbers[j])\n\
    \                if distance < min_distance {\n                    min_distance\
    \ = distance\n                }\n            }\n        }\n    }\n    return min_distance\
    \ < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_distance = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < min_distance {\n                min_distance = distance\n            }\n \
    \       }\n    }\n    return min_distance < threshold\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp3uvfk6r2/tmp3uvfk6r2.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba760499c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba760190b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba760190988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76018f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3uvfk6r2                        0x00005555de5b437e <unavailable> + 4990

    5    libc.so.6                          0x00002ba760685460 __libc_start_main +
    245

    6    tmp3uvfk6r2                        0x00005555de5b3fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if abs(numbers[i] - numbers[i +\
    \ 1]) < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for index in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[index\
    \ + 1] - sortedNumbers[index] < threshold {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count-1 {\n        if abs(numbers[i] - numbers[i+1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if abs(sortedNumbers[i] -\
    \ sortedNumbers[i + 1]) < threshold {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if sortedNumbers[i+1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_difference = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < min_difference {\n                min_difference = difference\n          \
    \  }\n        }\n    }\n    return min_difference < threshold\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_distance = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < min_distance {\n                min_distance = distance\n            }\n \
    \       }\n    }\n    return min_distance < threshold\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var i = 0\n    while i < numbers.count\
    \ - 1 {\n        var j = i + 1\n        while j < numbers.count {\n          \
    \  if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n\
    \            }\n            j += 1\n        }\n        i += 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if sortedNumbers[i+1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if sortedNumbers[i+1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if sortedNumbers[i+1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if sortedNumbers[i+1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_distance = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                let distance = abs(numbers[i] - numbers[j])\n\
    \                if distance < min_distance {\n                    min_distance\
    \ = distance\n                }\n            }\n        }\n    }\n    return min_distance\
    \ < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in 0..<numbers.count {\n            if i != j && abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var i = 0\n    var j = 1\n    while\
    \ i < numbers.count {\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count - 1 {\n        if sorted_numbers[i + 1]\
    \ - sorted_numbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var has_close_elements = false\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          if abs(numbers[i] - numbers[j]) < threshold {\n                has_close_elements\
    \ = true\n            }\n        }\n    }\n    return has_close_elements\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i+1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var result = false\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            if\
    \ abs(numbers[i] - numbers[j]) < threshold {\n                result = true\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted = numbers.sorted()\n\
    \    for i in 0..<sorted.count - 1 {\n        if abs(sorted[i] - sorted[i + 1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count-1 {\n        if numbers[i+1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted = numbers.sorted()\n\
    \    for i in 0..<sorted.count - 1 {\n        if sorted[i + 1] - sorted[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var has_close_elements = false\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                if abs(numbers[i] - numbers[j]) < threshold\
    \ {\n                    has_close_elements = true\n                }\n      \
    \      }\n        }\n    }\n    return has_close_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var has_close_elements = false\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                if abs(numbers[i] - numbers[j]) < threshold\
    \ {\n                    has_close_elements = true\n                }\n      \
    \      }\n        }\n    }\n    return has_close_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted = numbers.sorted()\n\
    \    for i in 0..<sorted.count - 1 {\n        if abs(sorted[i] - sorted[i + 1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in 0..<numbers.count {\n            if i != j {\n              \
    \  if abs(numbers[i] - numbers[j]) < threshold {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers.sorted()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    var sorted_numbers = numbers.sorted()\n    for i in\
    \ 0..<sorted_numbers.count - 1 {\n        if sorted_numbers[i + 1] - sorted_numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i+1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp3uvfk6r2/tmp3uvfk6r2.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba760499c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba760190b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba760190988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76018f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3uvfk6r2                        0x00005555de5b437e <unavailable> + 4990

    5    libc.so.6                          0x00002ba760685460 __libc_start_main +
    245

    6    tmp3uvfk6r2                        0x00005555de5b3fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count - 1 {\n        if sorted_numbers[i + 1]\
    \ - sorted_numbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count-1 {\n        if abs(sorted_numbers[i] -\
    \ sorted_numbers[i+1]) < threshold {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if sortedNumbers[i+1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count-1 {\n        if numbers[i+1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_dist = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let dist = abs(numbers[i] - numbers[j])\n            if dist < min_dist\
    \ {\n                min_dist = dist\n            }\n        }\n    }\n    return\
    \ min_dist < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var i = 0\n    var j = 1\n    while\
    \ i < numbers.count - 1 {\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let sorted = numbers.sorted()\n\
    \    for i in 0..<sorted.count - 1 {\n        if sorted[i + 1] - sorted[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i+1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in 0..<numbers.count {\n            if i != j && abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in 0..<numbers.count {\n            if i != j && abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if abs(sortedNumbers[i] -\
    \ sortedNumbers[i + 1]) < threshold {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if sortedNumbers[i+1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if abs(sortedNumbers[i] -\
    \ sortedNumbers[i + 1]) < threshold {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var has_close_elements = false\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          if abs(numbers[i] - numbers[j]) < threshold {\n                has_close_elements\
    \ = true\n            }\n        }\n    }\n    return has_close_elements\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var has_close_elements = false\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          if abs(numbers[i] - numbers[j]) < threshold {\n                has_close_elements\
    \ = true\n            }\n        }\n    }\n    return has_close_elements\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var closest_distance = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in (i + 1)..<numbers.count {\n\
    \            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_distance = distance\n        \
    \    }\n        }\n    }\n    return closest_distance < threshold\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count - 1 {\n        if sorted_numbers[i + 1]\
    \ - sorted_numbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count - 1 {\n        if sorted_numbers[i + 1]\
    \ - sorted_numbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i+1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if sortedNumbers[i+1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var has_close_elements = false\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          if abs(numbers[i] - numbers[j]) < threshold {\n                has_close_elements\
    \ = true\n            }\n        }\n    }\n    return has_close_elements\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: -4
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    // TODO: Implement this function\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp3uvfk6r2/tmp3uvfk6r2.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba760499c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba760190b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba760190988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba76018f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3uvfk6r2                        0x00005555de5b437e <unavailable> + 4990

    5    libc.so.6                          0x00002ba760685460 __libc_start_main +
    245

    6    tmp3uvfk6r2                        0x00005555de5b3fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers.sorted()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i+1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_diff = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                let diff = abs(numbers[i] - numbers[j])\n\
    \                if diff < min_diff {\n                    min_diff = diff\n \
    \               }\n            }\n        }\n    }\n    return min_diff < threshold\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count-1 {\n        if abs(numbers[i] - numbers[i+1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if abs(sortedNumbers[i] -\
    \ sortedNumbers[i + 1]) < threshold {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count - 1 {\n        if sorted_numbers[i + 1]\
    \ - sorted_numbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_distance = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < min_distance {\n                min_distance = distance\n            }\n \
    \       }\n    }\n    return min_distance < threshold\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count - 1 {\n\
    \        for j in i + 1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if abs(sortedNumbers[i] -\
    \ sortedNumbers[i + 1]) < threshold {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_difference = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                let difference = abs(numbers[i] - numbers[j])\n\
    \                if difference < min_difference {\n                    min_difference\
    \ = difference\n                }\n            }\n        }\n    }\n    return\
    \ min_difference < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if sortedNumbers[i+1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if abs(sortedNumbers[i] -\
    \ sortedNumbers[i + 1]) < threshold {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if abs(sortedNumbers[i] -\
    \ sortedNumbers[i + 1]) < threshold {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_difference = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < min_difference {\n                min_difference = difference\n          \
    \  }\n        }\n    }\n    return min_difference < threshold\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i+1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i+1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count - 1 {\n        if sorted_numbers[i + 1]\
    \ - sorted_numbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if sortedNumbers[i+1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_diff = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ {\n                min_diff = diff\n            }\n        }\n    }\n    return\
    \ min_diff < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i+1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count - 1 {\n        if sorted_numbers[i + 1]\
    \ - sorted_numbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_diff = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ {\n                min_diff = diff\n            }\n        }\n    }\n    return\
    \ min_diff < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var has_close_elements = false\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                if abs(numbers[i] - numbers[j]) < threshold\
    \ {\n                    has_close_elements = true\n                }\n      \
    \      }\n        }\n    }\n    return has_close_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count - 1 {\n        if sorted_numbers[i + 1]\
    \ - sorted_numbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count-1 {\n        if numbers[i+1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count - 1 {\n        if sorted_numbers[i + 1]\
    \ - sorted_numbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_distance = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                min_distance = min(min_distance, abs(numbers[i]\
    \ - numbers[j]))\n            }\n        }\n    }\n    return min_distance < threshold\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_distance = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                let distance = abs(numbers[i] - numbers[j])\n\
    \                if distance < min_distance {\n                    min_distance\
    \ = distance\n                }\n            }\n        }\n    }\n    return min_distance\
    \ < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in 0..<numbers.count {\n            if i != j {\n              \
    \  if abs(numbers[i] - numbers[j]) < threshold {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count-1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i+1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    if numbers.count < 2 {\n       \
    \ return false\n    }\n    var sortedNumbers = numbers.sorted()\n    for i in\
    \ 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_distance = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                let distance = abs(numbers[i] - numbers[j])\n\
    \                if distance < min_distance {\n                    min_distance\
    \ = distance\n                }\n            }\n        }\n    }\n    return min_distance\
    \ < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var i = 0\n    var j = 1\n    while\
    \ i < numbers.count - 1 {\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var min_diff = Double.infinity\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ {\n                min_diff = diff\n            }\n        }\n    }\n    return\
    \ min_diff < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var has_close_elements = false\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          if abs(numbers[i] - numbers[j]) < threshold {\n                has_close_elements\
    \ = true\n            }\n        }\n    }\n    return has_close_elements\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sorted = numbers.sorted()\n\
    \    for i in 0..<sorted.count - 1 {\n        if abs(sorted[i] - sorted[i + 1])\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var result = false\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            if\
    \ abs(numbers[i] - numbers[j]) < threshold {\n                result = true\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var close_elements = false\n   \
    \ for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n     \
    \       if abs(numbers[i] - numbers[j]) < threshold {\n                close_elements\
    \ = true\n            }\n        }\n    }\n    return close_elements\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n\
    \    for i in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in 0..<numbers.count {\n            if i != j {\n              \
    \  if abs(numbers[i] - numbers[j]) < threshold {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    let sorted = numbers.sorted()\n\
    \    for i in 0..<sorted.count - 1 {\n        if sorted[i + 1] - sorted[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013341
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] -\
    \ sortedNumbers[i] < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    var has_close_elements = false\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          if abs(numbers[i] - numbers[j]) < threshold {\n                has_close_elements\
    \ = true\n            }\n        }\n    }\n    return has_close_elements\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
- exit_code: 0
  program: "\n/// Check if in given array of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers:\
    \ [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n \
    \       for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013340
