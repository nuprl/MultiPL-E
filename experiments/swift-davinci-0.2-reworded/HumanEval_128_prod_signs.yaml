name: HumanEval_128_prod_signs
language: swift
prompt: "\n/// You are given an array arr of integers and you need to return\n///\
  \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
  \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
  \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
  \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
  \ [Int]) -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\n\
  assert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1,\
  \ 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\nassert(prod_signs(arr:\
  \ [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\n\
  assert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1,\
  \ 0]) == 0)"
completions: ["    if arr.isEmpty {\n        return nil\n    }\n    let signs = arr.map\
    \ { $0 < 0 ? -1 : $0 > 0 ? 1 : 0 }\n    let prod = signs.reduce(1, *)\n    let\
    \ sum = arr.map { abs($0) }.reduce(0, +)\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n    for i in arr\
    \ {\n        sum += abs(i)\n        prod *= i < 0 ? -1 : i > 0 ? 1 : 0\n    }\n\
    \    return sum * prod", "    guard arr.count > 0 else { return nil }\n    var\
    \ sum = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n     \
    \   prod *= i < 0 ? -1 : i > 0 ? 1 : 0\n    }\n    return sum * prod", "    guard\
    \ arr.count > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n    for\
    \ num in arr {\n        if num > 0 {\n            sum += num\n            prod\
    \ *= 1\n        } else if num < 0 {\n            sum += abs(num)\n           \
    \ prod *= -1\n        } else {\n            prod *= 0\n        }\n    }\n    return\
    \ sum * prod", "    guard arr.count > 0 else {\n        return nil\n    }\n  \
    \  var prod = 1\n    var sum = 0\n    for num in arr {\n        if num > 0 {\n\
    \            prod *= 1\n        } else if num < 0 {\n            prod *= -1\n\
    \        } else {\n            prod *= 0\n        }\n        sum += abs(num)\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    var prod = 1\n    var sum = 0\n    for i in arr {\n        if i > 0 {\n \
    \           prod *= 1\n        } else if i < 0 {\n            prod *= -1\n   \
    \     } else {\n            prod *= 0\n        }\n        sum += abs(i)\n    }\n\
    \    return sum * prod", "    guard arr.count > 0 else { return nil }\n    var\
    \ prod = 1\n    var sum = 0\n    for i in arr {\n        if i > 0 {\n        \
    \    prod *= 1\n        } else if i < 0 {\n            prod *= -1\n        } else\
    \ {\n            prod *= 0\n        }\n        sum += abs(i)\n    }\n    return\
    \ sum * prod", "    guard arr.count > 0 else { return nil }\n    var sum = 0\n\
    \    var prod = 1\n    for num in arr {\n        sum += abs(num)\n        prod\
    \ *= num > 0 ? 1 : num < 0 ? -1 : 0\n    }\n    return sum * prod", "    guard\
    \ arr.count > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n    for\
    \ num in arr {\n        sum += abs(num)\n        prod *= num == 0 ? 1 : num <\
    \ 0 ? -1 : 1\n    }\n    return sum * prod", "    guard arr.count > 0 else { return\
    \ nil }\n    var prod = 1\n    var sum = 0\n    for num in arr {\n        if num\
    \ < 0 {\n            prod *= -1\n        } else if num > 0 {\n            prod\
    \ *= 1\n        } else {\n            prod *= 0\n        }\n        sum += abs(num)\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    var sum = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n\
    \        prod *= i == 0 ? 1 : i / abs(i)\n    }\n    return sum * prod", "   \
    \ guard arr.count > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n\
    \    for i in arr {\n        sum += abs(i)\n        prod *= i == 0 ? 1 : i / abs(i)\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes\
    \ = arr.map { abs($0) }\n    let sum = magnitudes.reduce(0, +)\n    let prod =\
    \ signs.reduce(1, *)\n    return sum * prod", "    if arr.isEmpty {\n        return\
    \ nil\n    }\n    var sum = 0\n    var prod = 1\n    for i in arr {\n        if\
    \ i > 0 {\n            sum += i\n            prod *= 1\n        } else if i <\
    \ 0 {\n            sum += abs(i)\n            prod *= -1\n        } else {\n \
    \           prod *= 0\n        }\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n    for num in arr\
    \ {\n        sum += abs(num)\n        prod *= num == 0 ? 1 : num / abs(num)\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    var prod = 1\n    var sum = 0\n    for num in arr {\n        if num > 0 {\n\
    \            prod *= 1\n            sum += num\n        } else if num < 0 {\n\
    \            prod *= -1\n            sum += abs(num)\n        } else {\n     \
    \       prod *= 0\n        }\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for num in arr\
    \ {\n        prod *= num < 0 ? -1 : num == 0 ? 0 : 1\n        sum += abs(num)\n\
    \    }\n    return prod * sum", "    guard arr.count > 0 else { return nil }\n\
    \    var sum = 0\n    var prod = 1\n    for num in arr {\n        sum += abs(num)\n\
    \        prod *= num > 0 ? 1 : num < 0 ? -1 : 0\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n\
    \    for num in arr {\n        sum += abs(num)\n        prod *= num > 0 ? 1 :\
    \ num < 0 ? -1 : 0\n    }\n    return sum * prod", "    guard arr.count > 0 else\
    \ {\n        return nil\n    }\n    var prod = 1\n    var sum = 0\n    for num\
    \ in arr {\n        if num > 0 {\n            prod *= 1\n        } else if num\
    \ < 0 {\n            prod *= -1\n        } else {\n            prod *= 0\n   \
    \     }\n        sum += abs(num)\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else {\n        return nil\n    }\n    var sum = 0\n    var prod = 1\n \
    \   for i in arr {\n        if i > 0 {\n            sum += i\n            prod\
    \ *= 1\n        } else if i < 0 {\n            sum += abs(i)\n            prod\
    \ *= -1\n        } else {\n            prod *= 0\n        }\n    }\n    return\
    \ sum * prod", "    if arr.isEmpty {\n        return nil\n    }\n    var sum =\
    \ 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n        prod\
    \ *= i == 0 ? 1 : i > 0 ? 1 : -1\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    let sign = arr.map { $0 > 0 ? 1 : $0 < 0 ? -1 :\
    \ 0 }\n    let prod = sign.reduce(1, *)\n    let sum = arr.map { abs($0) }.reduce(0,\
    \ +)\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n \
    \   var prod = 1\n    var sum = 0\n    for i in arr {\n        if i > 0 {\n  \
    \          prod *= 1\n        } else if i < 0 {\n            prod *= -1\n    \
    \    } else {\n            prod *= 0\n        }\n        sum += abs(i)\n    }\n\
    \    return sum * prod", "    if arr.isEmpty {\n        return nil\n    }\n  \
    \  let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes =\
    \ arr.map { abs($0) }\n    let prod = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0,\
    \ +)\n    return prod * sum", "    guard arr.count > 0 else { return nil }\n \
    \   var sum = 0\n    var prod = 1\n    for num in arr {\n        if num == 0 {\n\
    \            continue\n        }\n        sum += abs(num)\n        prod *= num\
    \ > 0 ? 1 : -1\n    }\n    return sum * prod", "    guard arr.count > 0 else {\
    \ return nil }\n    var prod = 1\n    var sum = 0\n    for n in arr {\n      \
    \  if n > 0 {\n            prod *= 1\n        } else if n < 0 {\n            prod\
    \ *= -1\n        } else {\n            prod *= 0\n        }\n        sum += abs(n)\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else {\n        return\
    \ nil\n    }\n    let signs = arr.map { $0 > 0 ? 1 : $0 < 0 ? -1 : 0 }\n    let\
    \ magnitudes = arr.map { abs($0) }\n    let prod = signs.reduce(1, *)\n    let\
    \ sum = magnitudes.reduce(0, +)\n    return prod * sum", "    if arr.isEmpty {\n\
    \        return nil\n    }\n    var sum = 0\n    var prod = 1\n    for num in\
    \ arr {\n        sum += abs(num)\n        if num != 0 {\n            prod *= num\
    \ / abs(num)\n        }\n    }\n    return sum * prod", "    guard arr.count >\
    \ 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for num in arr\
    \ {\n        prod *= num < 0 ? -1 : num == 0 ? 0 : 1\n        sum += abs(num)\n\
    \    }\n    return prod * sum", "    guard arr.count > 0 else { return nil }\n\
    \    var sum = 0\n    var prod = 1\n    for num in arr {\n        sum += abs(num)\n\
    \        prod *= num == 0 ? 1 : num > 0 ? 1 : -1\n    }\n    return sum * prod",
  "    guard arr.count > 0 else {\n        return nil\n    }\n    var sum = 0\n  \
    \  var prod = 1\n    for num in arr {\n        sum += abs(num)\n        prod *=\
    \ num == 0 ? 1 : num / abs(num)\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    let signs = arr.map { $0 < 0 ? -1 : $0 > 0 ? 1\
    \ : 0 }\n    let prod = signs.reduce(1, *)\n    let sum = arr.map { abs($0) }.reduce(0,\
    \ +)\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n \
    \   var sum = 0\n    var prod = 1\n    for num in arr {\n        if num > 0 {\n\
    \            sum += num\n            prod *= 1\n        } else if num < 0 {\n\
    \            sum += abs(num)\n            prod *= -1\n        } else {\n     \
    \       prod *= 0\n        }\n    }\n    return sum * prod", "    if arr.isEmpty\
    \ {\n        return nil\n    }\n    var sum = 0\n    var prod = 1\n    for i in\
    \ arr {\n        sum += abs(i)\n        if i != 0 {\n            prod *= i > 0\
    \ ? 1 : -1\n        }\n    }\n    return sum * prod", "    guard arr.count > 0\
    \ else { return nil }\n    var sum = 0\n    var prod = 1\n    for i in arr {\n\
    \        sum += abs(i)\n        prod *= i < 0 ? -1 : i > 0 ? 1 : 0\n    }\n  \
    \  return sum * prod", "    guard arr.count > 0 else { return nil }\n    var prod\
    \ = 1\n    var sum = 0\n    for num in arr {\n        if num > 0 {\n         \
    \   prod *= 1\n            sum += num\n        } else if num < 0 {\n         \
    \   prod *= -1\n            sum += abs(num)\n        } else {\n            prod\
    \ *= 0\n        }\n    }\n    return sum * prod", "    if arr.isEmpty {\n    \
    \    return nil\n    }\n    var sum = 0\n    var prod = 1\n    for i in arr {\n\
    \        sum += abs(i)\n        prod *= i == 0 ? 1 : i / abs(i)\n    }\n    return\
    \ sum * prod", "    guard arr.count > 0 else { return nil }\n    var sum = 0\n\
    \    var prod = 1\n    for num in arr {\n        if num < 0 {\n            prod\
    \ *= -1\n        } else if num > 0 {\n            prod *= 1\n        } else {\n\
    \            prod *= 0\n        }\n        sum += abs(num)\n    }\n    return\
    \ sum * prod", "    guard arr.count > 0 else { return nil }\n    var prod = 1\n\
    \    var sum = 0\n    for num in arr {\n        prod *= num < 0 ? -1 : num ==\
    \ 0 ? 0 : 1\n        sum += abs(num)\n    }\n    return prod * sum", "    guard\
    \ arr.count > 0 else { return nil }\n    let signs = arr.map { $0 < 0 ? -1 : $0\
    \ > 0 ? 1 : 0 }\n    let magnitudes = arr.map { abs($0) }\n    let product = signs.reduce(1,\
    \ *)\n    let sum = magnitudes.reduce(0, +)\n    return product * sum", "    if\
    \ arr.isEmpty {\n        return nil\n    }\n    var prod = 1\n    var sum = 0\n\
    \    for num in arr {\n        if num > 0 {\n            prod *= 1\n        }\
    \ else if num < 0 {\n            prod *= -1\n        } else {\n            prod\
    \ *= 0\n        }\n        sum += abs(num)\n    }\n    return sum * prod", " \
    \   guard arr.count > 0 else {\n        return nil\n    }\n    var sum = 0\n \
    \   var prod = 1\n    for i in arr {\n        sum += abs(i)\n        if i != 0\
    \ {\n            prod *= i / abs(i)\n        }\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    let signs = arr.map { $0 < 0 ?\
    \ -1 : $0 > 0 ? 1 : 0 }\n    let magnitudes = arr.map { abs($0) }\n    let signProduct\
    \ = signs.reduce(1, *)\n    let magnitudeSum = magnitudes.reduce(0, +)\n    return\
    \ signProduct * magnitudeSum", "    guard arr.count > 0 else { return nil }\n\
    \    var prod = 1\n    var sum = 0\n    for i in arr {\n        if i < 0 {\n \
    \           prod *= -1\n        } else if i > 0 {\n            prod *= 1\n   \
    \     } else {\n            prod *= 0\n        }\n        sum += abs(i)\n    }\n\
    \    return sum * prod", "    guard arr.count > 0 else { return nil }\n    let\
    \ signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes = arr.map\
    \ { abs($0) }\n    let product = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0,\
    \ +)\n    return product * sum", "    guard arr.count > 0 else { return nil }\n\
    \    var sum = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n\
    \        prod *= i < 0 ? -1 : i > 0 ? 1 : 0\n    }\n    return sum * prod", " \
    \   guard arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n\
    \    for num in arr {\n        if num > 0 {\n            prod *= 1\n         \
    \   sum += num\n        } else if num < 0 {\n            prod *= -1\n        \
    \    sum += -num\n        } else {\n            prod *= 0\n        }\n    }\n\
    \    return sum * prod", "    guard arr.count > 0 else { return nil }\n    var\
    \ prod = 1\n    var sum = 0\n    for num in arr {\n        if num > 0 {\n    \
    \        prod *= 1\n            sum += num\n        } else if num < 0 {\n    \
    \        prod *= -1\n            sum += -num\n        } else {\n            prod\
    \ *= 0\n        }\n    }\n    return sum * prod", "    if arr.isEmpty {\n    \
    \    return nil\n    }\n    var prod = 1\n    var sum = 0\n    for i in arr {\n\
    \        if i > 0 {\n            prod *= 1\n        } else if i < 0 {\n      \
    \      prod *= -1\n        } else {\n            prod *= 0\n        }\n      \
    \  sum += abs(i)\n    }\n    return sum * prod", "    guard arr.count > 0 else\
    \ {\n        return nil\n    }\n    var sum = 0\n    var prod = 1\n    for i in\
    \ arr {\n        sum += abs(i)\n        prod *= i == 0 ? 1 : i / abs(i)\n    }\n\
    \    return sum * prod", "    guard arr.count > 0 else {\n        return nil\n\
    \    }\n    let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let sign_prod\
    \ = signs.reduce(1, *)\n    let magnitudes = arr.map { abs($0) }\n    let sum_magnitudes\
    \ = magnitudes.reduce(0, +)\n    return sum_magnitudes * sign_prod", "    guard\
    \ arr.count > 0 else { return nil }\n    let signs = arr.map { $0 > 0 ? 1 : $0\
    \ < 0 ? -1 : 0 }\n    let magnitudes = arr.map { abs($0) }\n    let prod = signs.reduce(1,\
    \ *)\n    let sum = magnitudes.reduce(0, +)\n    return prod * sum", "    guard\
    \ arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for\
    \ num in arr {\n        if num > 0 {\n            prod *= 1\n            sum +=\
    \ num\n        } else if num < 0 {\n            prod *= -1\n            sum +=\
    \ -num\n        } else {\n            prod *= 0\n        }\n    }\n    return\
    \ sum * prod", "    guard arr.count > 0 else { return nil }\n    let signs = arr.map\
    \ { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes = arr.map { abs($0) }\n\
    \    let signProduct = signs.reduce(1, *)\n    let magnitudeSum = magnitudes.reduce(0,\
    \ +)\n    return signProduct * magnitudeSum", "    guard arr.count > 0 else {\
    \ return nil }\n    let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n  \
    \  let magnitudes = arr.map { abs($0) }\n    let prod = signs.reduce(1, *)\n \
    \   let sum = magnitudes.reduce(0, +)\n    return prod * sum", "    guard arr.count\
    \ > 0 else { return nil }\n    let prod = arr.reduce(1) { $0 * $1.signum() }\n\
    \    let sum = arr.reduce(0) { $0 + abs($1) }\n    return prod * sum", "    guard\
    \ arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for\
    \ i in arr {\n        if i < 0 {\n            prod *= -1\n        } else if i\
    \ > 0 {\n            prod *= 1\n        } else {\n            prod *= 0\n    \
    \    }\n        sum += abs(i)\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for num in arr\
    \ {\n        prod *= num == 0 ? 1 : num > 0 ? 1 : -1\n        sum += abs(num)\n\
    \    }\n    return prod * sum", "    guard arr.count > 0 else { return nil }\n\
    \    var prod = 1\n    var sum = 0\n    for num in arr {\n        if num > 0 {\n\
    \            prod *= 1\n            sum += num\n        } else if num < 0 {\n\
    \            prod *= -1\n            sum += -num\n        } else {\n         \
    \   prod *= 0\n        }\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else {\n        return nil\n    }\n    var sum = 0\n    var prod = 1\n \
    \   for i in arr {\n        sum += abs(i)\n        prod *= i == 0 ? 1 : i / abs(i)\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes\
    \ = arr.map { abs($0) }\n    let prod = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0,\
    \ +)\n    return prod * sum", "    if arr.isEmpty {\n        return nil\n    }\n\
    \    var sum = 0\n    var prod = 1\n    for num in arr {\n        sum += abs(num)\n\
    \        prod *= num == 0 ? 1 : num / abs(num)\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    let signs = arr.map { $0 == 0\
    \ ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes = arr.map { abs($0) }\n    let prod\
    \ = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0, +)\n    return prod\
    \ * sum", "    guard arr.count > 0 else {\n        return nil\n    }\n    var\
    \ sum = 0\n    var prod = 1\n    for num in arr {\n        sum += abs(num)\n \
    \       if num != 0 {\n            prod *= num / abs(num)\n        }\n    }\n\
    \    return sum * prod", "    guard arr.count > 0 else { return nil }\n    var\
    \ sum = 0\n    var prod = 1\n    for num in arr {\n        if num > 0 {\n    \
    \        sum += num\n            prod *= 1\n        } else if num < 0 {\n    \
    \        sum += abs(num)\n            prod *= -1\n        } else {\n         \
    \   prod *= 0\n        }\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for num in arr\
    \ {\n        if num > 0 {\n            prod *= 1\n            sum += num\n   \
    \     } else if num < 0 {\n            prod *= -1\n            sum += abs(num)\n\
    \        } else {\n            prod *= 0\n        }\n    }\n    return sum * prod",
  "    if arr.isEmpty {\n        return nil\n    }\n    var sum = 0\n    var prod\
    \ = 1\n    for i in arr {\n        sum += abs(i)\n        prod *= i == 0 ? 1 :\
    \ i / abs(i)\n    }\n    return sum * prod", "    guard arr.count > 0 else {\n\
    \        return nil\n    }\n    var sum = 0\n    var prod = 1\n    for i in arr\
    \ {\n        sum += abs(i)\n        if i != 0 {\n            prod *= i > 0 ? 1\
    \ : -1\n        }\n    }\n    return sum * prod", "    guard arr.count > 0 else\
    \ {\n        return nil\n    }\n    var sum = 0\n    var prod = 1\n    for num\
    \ in arr {\n        if num > 0 {\n            sum += num\n            prod *=\
    \ 1\n        } else if num < 0 {\n            sum += abs(num)\n            prod\
    \ *= -1\n        }\n    }\n    return sum * prod", "    guard arr.count > 0 else\
    \ { return nil }\n    var prod = 1\n    var sum = 0\n    for num in arr {\n  \
    \      if num > 0 {\n            prod *= 1\n            sum += num\n        }\
    \ else if num < 0 {\n            prod *= -1\n            sum += -num\n       \
    \ } else {\n            prod *= 0\n        }\n    }\n    return sum * prod", " \
    \   if arr.isEmpty {\n        return nil\n    }\n    let sign = arr.reduce(1)\
    \ { $0 * ($1 > 0 ? 1 : ($1 < 0 ? -1 : 0)) }\n    let sum = arr.reduce(0) { $0\
    \ + abs($1) }\n    return sign * sum", "    if arr.isEmpty {\n        return nil\n\
    \    }\n    var sum = 0\n    var prod = 1\n    for i in arr {\n        sum +=\
    \ abs(i)\n        prod *= i < 0 ? -1 : i > 0 ? 1 : 0\n    }\n    return sum *\
    \ prod", "    guard arr.count > 0 else { return nil }\n    let signs = arr.map\
    \ { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes = arr.map { abs($0) }\n\
    \    return magnitudes.reduce(1, *) * signs.reduce(1, *)", "    guard arr.count\
    \ > 0 else { return nil }\n    let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1\
    \ : -1 }\n    let magnitudes = arr.map { abs($0) }\n    return signs.reduce(1,\
    \ *) * magnitudes.reduce(0, +)", "    guard arr.count > 0 else {\n        return\
    \ nil\n    }\n    var prod = 1\n    var sum = 0\n    for num in arr {\n      \
    \  if num > 0 {\n            prod *= 1\n        } else if num < 0 {\n        \
    \    prod *= -1\n        } else {\n            prod *= 0\n        }\n        sum\
    \ += abs(num)\n    }\n    return sum * prod", "    guard arr.count > 0 else {\
    \ return nil }\n    var prod = 1\n    var sum = 0\n    for i in arr {\n      \
    \  if i > 0 {\n            prod *= 1\n        } else if i < 0 {\n            prod\
    \ *= -1\n        } else {\n            prod *= 0\n        }\n        sum += abs(i)\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    var sum = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n\
    \        prod *= i == 0 ? 1 : i / abs(i)\n    }\n    return sum * prod", "   \
    \ guard arr.count > 0 else { return nil }\n    let sign = arr.reduce(1) { $0 *\
    \ ($1 > 0 ? 1 : ($1 < 0 ? -1 : 0)) }\n    let mag = arr.reduce(0) { $0 + abs($1)\
    \ }\n    return sign * mag", "    if arr.isEmpty {\n        return nil\n    }\n\
    \    var sum = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n\
    \        prod *= i < 0 ? -1 : i > 0 ? 1 : 0\n    }\n    return sum * prod", " \
    \   guard arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n\
    \    for i in arr {\n        if i > 0 {\n            prod *= 1\n        } else\
    \ if i < 0 {\n            prod *= -1\n        } else {\n            prod *= 0\n\
    \        }\n        sum += abs(i)\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else {\n        return nil\n    }\n    var sum = 0\n    var prod = 1\n \
    \   for num in arr {\n        sum += abs(num)\n        prod *= num == 0 ? 1 :\
    \ num / abs(num)\n    }\n    return sum * prod", "    guard arr.count > 0 else\
    \ { return nil }\n    var prod = 1\n    var sum = 0\n    for num in arr {\n  \
    \      prod *= num > 0 ? 1 : (num < 0 ? -1 : 0)\n        sum += abs(num)\n   \
    \ }\n    return prod * sum", "    guard arr.count > 0 else {\n        return nil\n\
    \    }\n    var sum = 0\n    var prod = 1\n    for i in arr {\n        sum +=\
    \ abs(i)\n        prod *= i == 0 ? 1 : i / abs(i)\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n\
    \    for i in arr {\n        if i > 0 {\n            prod *= 1\n        } else\
    \ if i < 0 {\n            prod *= -1\n        } else {\n            prod *= 0\n\
    \        }\n        sum += abs(i)\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for i in arr\
    \ {\n        if i > 0 {\n            prod *= 1\n        } else if i < 0 {\n  \
    \          prod *= -1\n        } else {\n            prod *= 0\n        }\n  \
    \      sum += abs(i)\n    }\n    return sum * prod", "    guard arr.count > 0\
    \ else { return nil }\n    var prod = 1\n    var sum = 0\n    for i in arr {\n\
    \        if i < 0 {\n            prod *= -1\n        } else if i > 0 {\n     \
    \       prod *= 1\n        } else {\n            prod *= 0\n        }\n      \
    \  sum += abs(i)\n    }\n    return sum * prod", "    guard arr.count > 0 else\
    \ { return nil }\n    var sum = 0\n    var prod = 1\n    for num in arr {\n  \
    \      sum += abs(num)\n        prod *= num == 0 ? 1 : num > 0 ? 1 : -1\n    }\n\
    \    return sum * prod", "    if arr.isEmpty {\n        return nil\n    }\n  \
    \  var sum = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n\
    \        prod *= i == 0 ? 1 : i > 0 ? 1 : -1\n    }\n    return sum * prod", " \
    \   guard arr.count > 0 else {\n        return nil\n    }\n    var prod = 1\n\
    \    var sum = 0\n    for i in arr {\n        if i == 0 {\n            continue\n\
    \        }\n        prod *= i > 0 ? 1 : -1\n        sum += abs(i)\n    }\n   \
    \ return prod * sum", "    guard arr.count > 0 else { return nil }\n    let signs\
    \ = arr.map { $0 >= 0 ? 1 : -1 }\n    let mags = arr.map { abs($0) }\n    return\
    \ signs.reduce(1, *) * mags.reduce(0, +)", "    guard arr.count > 0 else { return\
    \ nil }\n    var sum = 0\n    var prod = 1\n    for num in arr {\n        sum\
    \ += abs(num)\n        prod *= num == 0 ? 1 : num / abs(num)\n    }\n    return\
    \ sum * prod", "    guard arr.count > 0 else { return nil }\n    let signs = arr.map\
    \ { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes = arr.map { abs($0) }\n\
    \    let prod = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0, +)\n  \
    \  return prod * sum", "    if arr.isEmpty {\n        return nil\n    }\n    var\
    \ sum = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n     \
    \   prod *= i == 0 ? 1 : i / abs(i)\n    }\n    return sum * prod", "    guard\
    \ arr.count > 0 else { return nil }\n    let sign = arr.map { $0 == 0 ? 0 : $0\
    \ > 0 ? 1 : -1 }\n    let prod = sign.reduce(1, *)\n    let mag = arr.map { abs($0)\
    \ }\n    let sum = mag.reduce(0, +)\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for i in arr\
    \ {\n        if i > 0 {\n            prod *= 1\n        } else if i < 0 {\n  \
    \          prod *= -1\n        } else {\n            prod *= 0\n        }\n  \
    \      sum += abs(i)\n    }\n    return sum * prod", "    if arr.isEmpty {\n \
    \       return nil\n    }\n    let signs = arr.map { $0 > 0 ? 1 : $0 < 0 ? -1\
    \ : 0 }\n    let prod = signs.reduce(1, *)\n    let sum = arr.map { abs($0) }.reduce(0,\
    \ +)\n    return prod * sum", "    guard arr.count > 0 else { return nil }\n \
    \   var prod = 1\n    var sum = 0\n    for num in arr {\n        if num < 0 {\n\
    \            prod *= -1\n        } else if num > 0 {\n            prod *= 1\n\
    \        } else {\n            prod *= 0\n        }\n        sum += abs(num)\n\
    \    }\n    return sum * prod", "    if arr.isEmpty {\n        return nil\n  \
    \  }\n    let signs = arr.map { $0 < 0 ? -1 : $0 > 0 ? 1 : 0 }\n    let magnitudes\
    \ = arr.map { abs($0) }\n    let prod = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0,\
    \ +)\n    return prod * sum", "    if arr.isEmpty {\n        return nil\n    }\n\
    \    var sum = 0\n    var prod = 1\n    for num in arr {\n        sum += abs(num)\n\
    \        prod *= num == 0 ? 1 : num / abs(num)\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    let signs = arr.map { $0 > 0 ?\
    \ 1 : $0 < 0 ? -1 : 0 }\n    let magnitudes = arr.map { abs($0) }\n    let prod\
    \ = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0, +)\n    return prod\
    \ * sum", "    guard arr.count > 0 else { return nil }\n    var prod = 1\n   \
    \ var sum = 0\n    for n in arr {\n        prod *= n < 0 ? -1 : n == 0 ? 0 : 1\n\
    \        sum += abs(n)\n    }\n    return prod * sum", "    guard arr.count >\
    \ 0 else { return nil }\n    var sum = 0\n    var prod = 1\n    for i in arr {\n\
    \        if i > 0 {\n            sum += i\n            prod *= 1\n        } else\
    \ if i < 0 {\n            sum += -i\n            prod *= -1\n        } else {\n\
    \            prod *= 0\n        }\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for num in arr\
    \ {\n        if num > 0 {\n            prod *= 1\n            sum += num\n   \
    \     } else if num < 0 {\n            prod *= -1\n            sum += -num\n \
    \       } else {\n            prod *= 0\n        }\n    }\n    return sum * prod",
  "    if arr.isEmpty {\n        return nil\n    }\n    var prod = 1\n    var sum\
    \ = 0\n    for i in arr {\n        if i > 0 {\n            prod *= 1\n       \
    \ } else if i < 0 {\n            prod *= -1\n        } else {\n            prod\
    \ *= 0\n        }\n        sum += abs(i)\n    }\n    return sum * prod", "   \
    \ guard arr.count > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n\
    \    for num in arr {\n        if num == 0 { continue }\n        sum += abs(num)\n\
    \        prod *= num < 0 ? -1 : 1\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    return arr.map { $0 == 0 ? 0 : abs($0) }.reduce(1,\
    \ *) * arr.filter { $0 != 0 }.reduce(1, *)", "    guard arr.count > 0 else { return\
    \ nil }\n    let signs = arr.map { $0 >= 0 ? 1 : -1 }\n    let mags = arr.map\
    \ { abs($0) }\n    let prod = signs.reduce(1, *)\n    let sum = mags.reduce(0,\
    \ +)\n    return prod * sum", "    guard arr.count > 0 else { return nil }\n \
    \   var sum = 0\n    var prod = 1\n    for num in arr {\n        sum += abs(num)\n\
    \        prod *= num > 0 ? 1 : num < 0 ? -1 : 0\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n\
    \    for i in arr {\n        prod *= i > 0 ? 1 : i < 0 ? -1 : 0\n        sum +=\
    \ abs(i)\n    }\n    return prod * sum", "    if arr.isEmpty {\n        return\
    \ nil\n    }\n    var sum = 0\n    var prod = 1\n    for i in arr {\n        sum\
    \ += abs(i)\n        prod *= i == 0 ? 1 : i / abs(i)\n    }\n    return sum *\
    \ prod", "    if arr.isEmpty {\n        return nil\n    }\n    let signs = arr.map\
    \ { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes = arr.map { abs($0) }\n\
    \    return signs.reduce(1, *) * magnitudes.reduce(0, +)", "    guard arr.count\
    \ > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for num in arr\
    \ {\n        if num > 0 {\n            prod *= 1\n            sum += num\n   \
    \     } else if num < 0 {\n            prod *= -1\n            sum += -num\n \
    \       } else {\n            prod *= 0\n        }\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n\
    \    for i in arr {\n        if i == 0 {\n            continue\n        }\n  \
    \      prod *= i > 0 ? 1 : -1\n        sum += abs(i)\n    }\n    return prod *\
    \ sum", "    guard arr.count > 0 else { return nil }\n    var prod = 1\n    var\
    \ sum = 0\n    for num in arr {\n        if num > 0 {\n            prod *= 1\n\
    \            sum += num\n        } else if num < 0 {\n            prod *= -1\n\
    \            sum += abs(num)\n        } else {\n            prod *= 0\n      \
    \  }\n    }\n    return sum * prod", "    guard arr.count > 0 else { return nil\
    \ }\n    var prod = 1\n    var sum = 0\n    for i in arr {\n        if i > 0 {\n\
    \            prod *= 1\n        } else if i < 0 {\n            prod *= -1\n  \
    \      } else {\n            prod *= 0\n        }\n        sum += abs(i)\n   \
    \ }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n  \
    \  var sum = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n\
    \        prod *= i > 0 ? 1 : i < 0 ? -1 : 0\n    }\n    return sum * prod", " \
    \   guard arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n\
    \    for num in arr {\n        if num == 0 {\n            continue\n        }\n\
    \        prod *= num > 0 ? 1 : -1\n        sum += abs(num)\n    }\n    return\
    \ prod * sum", "    if arr.isEmpty {\n        return nil\n    }\n    var sum =\
    \ 0\n    var prod = 1\n    for i in arr {\n        if i > 0 {\n            sum\
    \ += i\n            prod *= 1\n        } else if i < 0 {\n            sum += abs(i)\n\
    \            prod *= -1\n        } else {\n            prod *= 0\n        }\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    let signs = arr.map { $0 < 0 ? -1 : $0 > 0 ? 1 : 0 }\n    let signProduct\
    \ = signs.reduce(1, *)\n    let magnitudes = arr.map { abs($0) }\n    let magnitudeSum\
    \ = magnitudes.reduce(0, +)\n    return signProduct * magnitudeSum", "    guard\
    \ arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for\
    \ num in arr {\n        prod *= num == 0 ? 1 : num > 0 ? 1 : -1\n        sum +=\
    \ abs(num)\n    }\n    return prod * sum", "    guard arr.count > 0 else { return\
    \ nil }\n    var prod = 1\n    var sum = 0\n    for i in arr {\n        if i >\
    \ 0 {\n            prod *= 1\n        } else if i < 0 {\n            prod *= -1\n\
    \        } else {\n            prod *= 0\n        }\n        sum += abs(i)\n \
    \   }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    var sum = 0\n    var prod = 1\n    for num in arr {\n        if num > 0 {\n\
    \            sum += num\n            prod *= 1\n        } else if num < 0 {\n\
    \            sum += abs(num)\n            prod *= -1\n        } else {\n     \
    \       prod *= 0\n        }\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for num in arr\
    \ {\n        prod *= num < 0 ? -1 : num == 0 ? 0 : 1\n        sum += abs(num)\n\
    \    }\n    return prod * sum", "    guard arr.count > 0 else { return nil }\n\
    \    let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes\
    \ = arr.map { abs($0) }\n    return magnitudes.reduce(1, *) * signs.reduce(1,\
    \ *)", "    guard arr.count > 0 else { return nil }\n    var prod = 1\n    var\
    \ sum = 0\n    for num in arr {\n        if num > 0 {\n            prod *= 1\n\
    \            sum += num\n        } else if num < 0 {\n            prod *= -1\n\
    \            sum += abs(num)\n        } else {\n            prod *= 0\n      \
    \  }\n    }\n    return sum * prod", "    guard arr.count > 0 else { return nil\
    \ }\n    var sum = 0\n    var prod = 1\n    for num in arr {\n        sum += abs(num)\n\
    \        prod *= num == 0 ? 1 : num < 0 ? -1 : 1\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    let signs = arr.map { $0 < 0 ?\
    \ -1 : $0 > 0 ? 1 : 0 }\n    let magnitudes = arr.map { abs($0) }\n    return\
    \ magnitudes.reduce(1, *) * signs.reduce(1, *)", "    guard arr.count > 0 else\
    \ { return nil }\n    var sum = 0\n    var prod = 1\n    for i in arr {\n    \
    \    sum += abs(i)\n        prod *= i == 0 ? 1 : i > 0 ? 1 : -1\n    }\n    return\
    \ sum * prod", "    guard arr.count > 0 else { return nil }\n    var sum = 0\n\
    \    var prod = 1\n    for num in arr {\n        sum += abs(num)\n        prod\
    \ *= num == 0 ? 1 : num / abs(num)\n    }\n    return sum * prod", "    guard\
    \ arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for\
    \ num in arr {\n        if num == 0 {\n            continue\n        }\n     \
    \   prod *= num > 0 ? 1 : -1\n        sum += abs(num)\n    }\n    return prod\
    \ * sum", "    guard arr.count > 0 else {\n        return nil\n    }\n    let\
    \ signs = arr.map { $0 > 0 ? 1 : $0 < 0 ? -1 : 0 }\n    let sum = arr.reduce(0)\
    \ { $0 + abs($1) }\n    let prod = signs.reduce(1) { $0 * $1 }\n    return sum\
    \ * prod", "    if arr.isEmpty {\n        return nil\n    }\n    let signs = arr.map\
    \ { $0 < 0 ? -1 : ($0 > 0 ? 1 : 0) }\n    let sum = arr.reduce(0) { $0 + abs($1)\
    \ }\n    let prod = signs.reduce(1) { $0 * $1 }\n    return sum * prod", "   \
    \ guard arr.count > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n\
    \    for num in arr {\n        if num > 0 {\n            sum += num\n        \
    \    prod *= 1\n        } else if num < 0 {\n            sum += abs(num)\n   \
    \         prod *= -1\n        } else {\n            prod *= 0\n        }\n   \
    \ }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n  \
    \  let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes =\
    \ arr.map { abs($0) }\n    let prod = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0,\
    \ +)\n    return prod * sum", "    guard arr.count > 0 else { return nil }\n \
    \   var sum = 0\n    var prod = 1\n    for num in arr {\n        sum += abs(num)\n\
    \        prod *= num == 0 ? 1 : num / abs(num)\n    }\n    return sum * prod",
  "    guard arr.count > 0 else {\n        return nil\n    }\n    var sum = 0\n  \
    \  var prod = 1\n    for i in arr {\n        sum += abs(i)\n        prod *= i\
    \ == 0 ? 1 : i < 0 ? -1 : 1\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for i in arr\
    \ {\n        if i == 0 { continue }\n        prod *= i > 0 ? 1 : -1\n        sum\
    \ += abs(i)\n    }\n    return prod * sum", "    if arr.isEmpty {\n        return\
    \ nil\n    }\n    var sum = 0\n    var prod = 1\n    for i in arr {\n        sum\
    \ += abs(i)\n        prod *= i == 0 ? 1 : i < 0 ? -1 : 1\n    }\n    return sum\
    \ * prod", "    guard arr.count > 0 else { return nil }\n    var sum = 0\n   \
    \ var product = 1\n    for num in arr {\n        if num > 0 {\n            sum\
    \ += num\n            product *= 1\n        } else if num < 0 {\n            sum\
    \ += abs(num)\n            product *= -1\n        } else {\n            product\
    \ *= 0\n        }\n    }\n    return sum * product", "    guard arr.count > 0\
    \ else { return nil }\n    var sum = 0\n    var prod = 1\n    for num in arr {\n\
    \        sum += abs(num)\n        prod *= num == 0 ? 1 : num / abs(num)\n    }\n\
    \    return sum * prod", "    guard arr.count > 0 else { return nil }\n    var\
    \ sum = 0\n    var prod = 1\n    for num in arr {\n        sum += abs(num)\n \
    \       prod *= num == 0 ? 1 : num / abs(num)\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    let signs = arr.map { $0 == 0\
    \ ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes = arr.map { $0 == 0 ? 0 : abs($0)\
    \ }\n    let product = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0,\
    \ +)\n    return product * sum", "    guard arr.count > 0 else { return nil }\n\
    \    var prod = 1\n    var sum = 0\n    for i in arr {\n        if i > 0 {\n \
    \           prod *= 1\n        } else if i < 0 {\n            prod *= -1\n   \
    \     } else {\n            prod *= 0\n        }\n        sum += abs(i)\n    }\n\
    \    return sum * prod", "    guard arr.count > 0 else { return nil }\n    let\
    \ signs = arr.map { $0 < 0 ? -1 : $0 > 0 ? 1 : 0 }\n    let signProduct = signs.reduce(1,\
    \ *)\n    let magnitudes = arr.map { abs($0) }\n    let magnitudeSum = magnitudes.reduce(0,\
    \ +)\n    return signProduct * magnitudeSum", "    if arr.isEmpty {\n        return\
    \ nil\n    }\n    var sum = 0\n    var prod = 1\n    for i in arr {\n        sum\
    \ += abs(i)\n        prod *= i == 0 ? 1 : i < 0 ? -1 : 1\n    }\n    return sum\
    \ * prod", "    guard arr.count > 0 else {\n        return nil\n    }\n    var\
    \ sum = 0\n    var prod = 1\n    for i in arr {\n        if i > 0 {\n        \
    \    sum += i\n            prod *= 1\n        } else if i < 0 {\n            sum\
    \ += abs(i)\n            prod *= -1\n        } else {\n            prod *= 0\n\
    \        }\n    }\n    return sum * prod", "    guard arr.count > 0 else { return\
    \ nil }\n    return arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }.reduce(1, *) * arr.map\
    \ { abs($0) }.reduce(0, +)", "    if arr.isEmpty {\n        return nil\n    }\n\
    \    let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let sum = arr.map\
    \ { abs($0) }.reduce(0, +)\n    let product = signs.reduce(1, *)\n    return sum\
    \ * product", "    if arr.isEmpty {\n        return nil\n    }\n    let signs\
    \ = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let mags = arr.map { abs($0)\
    \ }\n    let prod = signs.reduce(1, *)\n    let sum = mags.reduce(0, +)\n    return\
    \ prod * sum", "    guard arr.count > 0 else {\n        return nil\n    }\n  \
    \  var sum = 0\n    var prod = 1\n    for num in arr {\n        sum += abs(num)\n\
    \        prod *= num == 0 ? 1 : num / abs(num)\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n\
    \    for i in arr {\n        sum += abs(i)\n        prod *= i < 0 ? -1 : i > 0\
    \ ? 1 : 0\n    }\n    return sum * prod", "    guard arr.count > 0 else { return\
    \ nil }\n    var sum = 0\n    var prod = 1\n    for num in arr {\n        sum\
    \ += abs(num)\n        prod *= num > 0 ? 1 : num < 0 ? -1 : 0\n    }\n    return\
    \ sum * prod", "    guard arr.count > 0 else { return nil }\n    var prod = 1\n\
    \    var sum = 0\n    for i in arr {\n        if i > 0 {\n            prod *=\
    \ 1\n        } else if i < 0 {\n            prod *= -1\n        } else {\n   \
    \         prod *= 0\n        }\n        sum += abs(i)\n    }\n    return sum *\
    \ prod", "    guard arr.count > 0 else { return nil }\n    let signs = arr.map\
    \ { $0 > 0 ? 1 : $0 < 0 ? -1 : 0 }\n    let magnitudes = arr.map { abs($0) }\n\
    \    return magnitudes.reduce(1, *) * signs.reduce(1, *)", "    guard arr.count\
    \ > 0 else { return nil }\n    let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1\
    \ : -1 }\n    let magnitudes = arr.map { abs($0) }\n    let prod = signs.reduce(1,\
    \ *)\n    let sum = magnitudes.reduce(0, +)\n    return prod * sum", "    var\
    \ prod = 1\n    var sum = 0\n    for num in arr {\n        if num > 0 {\n    \
    \        prod *= 1\n        } else if num < 0 {\n            prod *= -1\n    \
    \    } else {\n            prod *= 0\n        }\n        sum += abs(num)\n   \
    \ }\n    return prod * sum", "    guard arr.count > 0 else { return nil }\n  \
    \  var sum = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n\
    \        prod *= i == 0 ? 1 : i > 0 ? 1 : -1\n    }\n    return sum * prod", " \
    \   if arr.isEmpty {\n        return nil\n    }\n    let signs = arr.map { $0\
    \ == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let prod = signs.reduce(1, *)\n    let sum\
    \ = arr.reduce(0) { $0 + abs($1) }\n    return prod * sum", "    guard arr.count\
    \ > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for i in arr\
    \ {\n        if i > 0 {\n            prod *= 1\n        } else if i < 0 {\n  \
    \          prod *= -1\n        } else {\n            prod *= 0\n        }\n  \
    \      sum += abs(i)\n    }\n    return sum * prod", "    guard arr.count > 0\
    \ else { return nil }\n    let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1\
    \ }\n    let magnitudes = arr.map { abs($0) }\n    let sum = magnitudes.reduce(0,\
    \ +)\n    let product = signs.reduce(1, *)\n    return sum * product", "    guard\
    \ arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for\
    \ num in arr {\n        if num < 0 {\n            prod *= -1\n        } else if\
    \ num > 0 {\n            prod *= 1\n        } else {\n            prod *= 0\n\
    \        }\n        sum += abs(num)\n    }\n    return sum * prod", "    guard\
    \ arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for\
    \ num in arr {\n        prod *= num < 0 ? -1 : num == 0 ? 0 : 1\n        sum +=\
    \ abs(num)\n    }\n    return prod * sum", "    guard arr.count > 0 else { return\
    \ nil }\n    let signs = arr.map { $0 < 0 ? -1 : $0 > 0 ? 1 : 0 }\n    let magnitudes\
    \ = arr.map { abs($0) }\n    let signProduct = signs.reduce(1, *)\n    let magnitudeSum\
    \ = magnitudes.reduce(0, +)\n    return signProduct * magnitudeSum", "    guard\
    \ arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for\
    \ num in arr {\n        prod *= num < 0 ? -1 : num == 0 ? 0 : 1\n        sum +=\
    \ abs(num)\n    }\n    return prod * sum", "    guard arr.count > 0 else { return\
    \ nil }\n    var sum = 0\n    var prod = 1\n    for num in arr {\n        if num\
    \ > 0 {\n            sum += num\n            prod *= 1\n        } else if num\
    \ < 0 {\n            sum += abs(num)\n            prod *= -1\n        } else {\n\
    \            prod *= 0\n        }\n    }\n    return sum * prod", "    if arr.isEmpty\
    \ {\n        return nil\n    }\n    var sum = 0\n    var prod = 1\n    for i in\
    \ arr {\n        sum += abs(i)\n        prod *= i == 0 ? 1 : i / abs(i)\n    }\n\
    \    return sum * prod", "    guard arr.count > 0 else { return nil }\n    let\
    \ signs = arr.map { $0 > 0 ? 1 : $0 < 0 ? -1 : 0 }\n    let magnitudes = arr.map\
    \ { abs($0) }\n    return signs.reduce(1, *) * magnitudes.reduce(0, +)", "   \
    \ guard arr.count > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n\
    \    for i in arr {\n        if i > 0 {\n            sum += i\n            prod\
    \ *= 1\n        } else if i < 0 {\n            sum += abs(i)\n            prod\
    \ *= -1\n        } else {\n            prod *= 0\n        }\n    }\n    return\
    \ sum * prod", "    guard arr.count > 0 else { return nil }\n    let signs = arr.map\
    \ { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes = arr.map { abs($0) }\n\
    \    let prod = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0, +)\n  \
    \  return prod * sum", "    if arr.isEmpty {\n        return nil\n    }\n    var\
    \ sum = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n     \
    \   if i != 0 {\n            prod *= i / abs(i)\n        }\n    }\n    return\
    \ sum * prod", "    guard arr.count > 0 else { return nil }\n    var sum = 0\n\
    \    var prod = 1\n    for i in arr {\n        sum += abs(i)\n        prod *=\
    \ i < 0 ? -1 : i > 0 ? 1 : 0\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else {\n        return nil\n    }\n    var prod = 1\n    var sum = 0\n \
    \   for i in arr {\n        if i > 0 {\n            prod *= 1\n        } else\
    \ if i < 0 {\n            prod *= -1\n        } else {\n            prod *= 0\n\
    \        }\n        sum += abs(i)\n    }\n    return sum * prod", "    var sum\
    \ = 0\n    var prod = 1\n    for i in arr {\n        if i > 0 {\n            sum\
    \ += i\n            prod *= 1\n        } else if i < 0 {\n            sum += abs(i)\n\
    \            prod *= -1\n        } else {\n            prod *= 0\n        }\n\
    \    }\n    return sum * prod", "    if arr.isEmpty {\n        return nil\n  \
    \  }\n    var prod = 1\n    var sum = 0\n    for num in arr {\n        if num\
    \ > 0 {\n            prod *= 1\n        } else if num < 0 {\n            prod\
    \ *= -1\n        } else {\n            prod *= 0\n        }\n        sum += abs(num)\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    var prod = 1\n    var sum = 0\n    for num in arr {\n        prod *= num\
    \ < 0 ? -1 : num == 0 ? 0 : 1\n        sum += abs(num)\n    }\n    return prod\
    \ * sum", "    guard arr.count > 0 else { return nil }\n    var prod = 1\n   \
    \ var sum = 0\n    for num in arr {\n        if num > 0 {\n            prod *=\
    \ 1\n            sum += num\n        } else if num < 0 {\n            prod *=\
    \ -1\n            sum += abs(num)\n        } else {\n            prod *= 0\n \
    \       }\n    }\n    return sum * prod", "    guard arr.count > 0 else { return\
    \ nil }\n    var sum = 0\n    var prod = 1\n    for i in arr {\n        sum +=\
    \ abs(i)\n        prod *= i == 0 ? 1 : i / abs(i)\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n\
    \    for i in arr {\n        sum += abs(i)\n        prod *= i == 0 ? 1 : i / abs(i)\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    let signs = arr.map { $0 >= 0 ? 1 : -1 }\n    let magnitudes = arr.map {\
    \ abs($0) }\n    return signs.reduce(1, *) * magnitudes.reduce(0, +)", "    guard\
    \ arr.count > 0 else { return nil }\n    let signs = arr.map { $0 == 0 ? 0 : $0\
    \ > 0 ? 1 : -1 }\n    let signProduct = signs.reduce(1, *)\n    let magnitudes\
    \ = arr.map { abs($0) }\n    let magnitudeSum = magnitudes.reduce(0, +)\n    return\
    \ signProduct * magnitudeSum", "    guard arr.count > 0 else { return nil }\n\
    \    var prod = 1\n    var sum = 0\n    for i in arr {\n        if i > 0 {\n \
    \           prod *= 1\n        } else if i < 0 {\n            prod *= -1\n   \
    \     } else {\n            prod *= 0\n        }\n        sum += abs(i)\n    }\n\
    \    return sum * prod", "    guard arr.count > 0 else { return nil }\n    var\
    \ sum = 0\n    var prod = 1\n    for num in arr {\n        sum += abs(num)\n \
    \       prod *= num > 0 ? 1 : num < 0 ? -1 : 0\n    }\n    return sum * prod",
  "    guard arr.count > 0 else {\n        return nil\n    }\n    var sum = 0\n  \
    \  var prod = 1\n    for num in arr {\n        sum += abs(num)\n        prod *=\
    \ num == 0 ? 1 : num / abs(num)\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n    for i in arr\
    \ {\n        sum += abs(i)\n        prod *= i < 0 ? -1 : i > 0 ? 1 : 0\n    }\n\
    \    return sum * prod", "    guard arr.count > 0 else {\n        return nil\n\
    \    }\n    let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes\
    \ = arr.map { abs($0) }\n    let signProduct = signs.reduce(1, *)\n    let magnitudeSum\
    \ = magnitudes.reduce(0, +)\n    return signProduct * magnitudeSum", "    guard\
    \ arr.count > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for\
    \ i in arr {\n        if i > 0 {\n            prod *= 1\n        } else if i <\
    \ 0 {\n            prod *= -1\n        } else {\n            prod *= 0\n     \
    \   }\n        sum += abs(i)\n    }\n    return sum * prod", "    if arr.isEmpty\
    \ {\n        return nil\n    }\n    var sum = 0\n    var prod = 1\n    for i in\
    \ arr {\n        sum += abs(i)\n        if i != 0 {\n            prod *= i > 0\
    \ ? 1 : -1\n        }\n    }\n    return sum * prod", "    guard arr.count > 0\
    \ else { return nil }\n    var prod = 1\n    var sum = 0\n    for num in arr {\n\
    \        if num > 0 {\n            prod *= 1\n            sum += num\n       \
    \ } else if num < 0 {\n            prod *= -1\n            sum += abs(num)\n \
    \       } else {\n            prod *= 0\n        }\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    let signs = arr.map { $0 < 0 ?\
    \ -1 : $0 > 0 ? 1 : 0 }\n    let magnitudes = arr.map { abs($0) }\n    let prod\
    \ = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0, +)\n    return prod\
    \ * sum", "    guard arr.count > 0 else { return nil }\n    var sum = 0\n    var\
    \ prod = 1\n    for num in arr {\n        sum += abs(num)\n        prod *= num\
    \ == 0 ? 1 : num / abs(num)\n    }\n    return sum * prod", "    if arr.isEmpty\
    \ {\n        return nil\n    }\n    let signs = arr.map { $0 == 0 ? 0 : $0 > 0\
    \ ? 1 : -1 }\n    let sum = arr.reduce(0) { $0 + abs($1) }\n    let prod = signs.reduce(1)\
    \ { $0 * $1 }\n    return sum * prod", "    guard arr.count > 0 else { return\
    \ nil }\n    var prod = 1\n    var sum = 0\n    for i in arr {\n        if i >\
    \ 0 {\n            prod *= 1\n        } else if i < 0 {\n            prod *= -1\n\
    \        } else {\n            prod *= 0\n        }\n        sum += abs(i)\n \
    \   }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes\
    \ = arr.map { abs($0) }\n    let prod = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0,\
    \ +)\n    return prod * sum", "    guard arr.count > 0 else { return nil }\n \
    \   let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes\
    \ = arr.map { abs($0) }\n    let sign_prod = signs.reduce(1, *)\n    let mag_sum\
    \ = magnitudes.reduce(0, +)\n    return sign_prod * mag_sum", "    if arr.isEmpty\
    \ {\n        return nil\n    }\n    var sum = 0\n    var prod = 1\n    for i in\
    \ arr {\n        sum += abs(i)\n        prod *= i == 0 ? 1 : i / abs(i)\n    }\n\
    \    return sum * prod", "    if arr.isEmpty {\n        return nil\n    }\n  \
    \  let signs = arr.map { $0 < 0 ? -1 : ($0 > 0 ? 1 : 0) }\n    let magnitudes\
    \ = arr.map { abs($0) }\n    let prod = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0,\
    \ +)\n    return prod * sum", "    guard arr.count > 0 else { return nil }\n \
    \   var prod = 1\n    var sum = 0\n    for num in arr {\n        if num == 0 {\
    \ continue }\n        prod *= num > 0 ? 1 : -1\n        sum += abs(num)\n    }\n\
    \    return prod * sum", "    guard arr.count > 0 else { return nil }\n    var\
    \ prod = 1\n    var sum = 0\n    for num in arr {\n        prod *= num < 0 ? -1\
    \ : num == 0 ? 0 : 1\n        sum += abs(num)\n    }\n    return prod * sum",
  "    if arr.isEmpty {\n        return nil\n    }\n    var sum = 0\n    var prod\
    \ = 1\n    for i in arr {\n        sum += abs(i)\n        prod *= i > 0 ? 1 :\
    \ (i < 0 ? -1 : 0)\n    }\n    return sum * prod"]
stop_tokens:
- "\n}"
