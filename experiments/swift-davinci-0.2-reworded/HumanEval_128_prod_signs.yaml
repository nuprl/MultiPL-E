name: HumanEval_128_prod_signs
language: swift
prompt: "\n/// You are given an array arr of integers and you need to return\n///\
  \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
  \ number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty\
  \ arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr:\
  \ [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr:\
  \ [Int]) -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\n\
  assert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1,\
  \ 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\nassert(prod_signs(arr:\
  \ [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\n\
  assert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1,\
  \ 0]) == 0)"
completions: ["    if arr.isEmpty {\n        return nil\n    }\n    let signs = arr.map\
    \ { $0 < 0 ? -1 : $0 > 0 ? 1 : 0 }\n    let prod = signs.reduce(1, *)\n    let\
    \ sum = arr.map { abs($0) }.reduce(0, +)\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n    for i in arr\
    \ {\n        sum += abs(i)\n        prod *= i < 0 ? -1 : i > 0 ? 1 : 0\n    }\n\
    \    return sum * prod", "    guard arr.count > 0 else { return nil }\n    var\
    \ sum = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n     \
    \   prod *= i < 0 ? -1 : i > 0 ? 1 : 0\n    }\n    return sum * prod", "    guard\
    \ arr.count > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n    for\
    \ num in arr {\n        if num > 0 {\n            sum += num\n            prod\
    \ *= 1\n        } else if num < 0 {\n            sum += abs(num)\n           \
    \ prod *= -1\n        } else {\n            prod *= 0\n        }\n    }\n    return\
    \ sum * prod", "    guard arr.count > 0 else {\n        return nil\n    }\n  \
    \  var prod = 1\n    var sum = 0\n    for num in arr {\n        if num > 0 {\n\
    \            prod *= 1\n        } else if num < 0 {\n            prod *= -1\n\
    \        } else {\n            prod *= 0\n        }\n        sum += abs(num)\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    var prod = 1\n    var sum = 0\n    for i in arr {\n        if i > 0 {\n \
    \           prod *= 1\n        } else if i < 0 {\n            prod *= -1\n   \
    \     } else {\n            prod *= 0\n        }\n        sum += abs(i)\n    }\n\
    \    return sum * prod", "    guard arr.count > 0 else { return nil }\n    var\
    \ prod = 1\n    var sum = 0\n    for i in arr {\n        if i > 0 {\n        \
    \    prod *= 1\n        } else if i < 0 {\n            prod *= -1\n        } else\
    \ {\n            prod *= 0\n        }\n        sum += abs(i)\n    }\n    return\
    \ sum * prod", "    guard arr.count > 0 else { return nil }\n    var sum = 0\n\
    \    var prod = 1\n    for num in arr {\n        sum += abs(num)\n        prod\
    \ *= num > 0 ? 1 : num < 0 ? -1 : 0\n    }\n    return sum * prod", "    guard\
    \ arr.count > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n    for\
    \ num in arr {\n        sum += abs(num)\n        prod *= num == 0 ? 1 : num <\
    \ 0 ? -1 : 1\n    }\n    return sum * prod", "    guard arr.count > 0 else { return\
    \ nil }\n    var prod = 1\n    var sum = 0\n    for num in arr {\n        if num\
    \ < 0 {\n            prod *= -1\n        } else if num > 0 {\n            prod\
    \ *= 1\n        } else {\n            prod *= 0\n        }\n        sum += abs(num)\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    var sum = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n\
    \        prod *= i == 0 ? 1 : i / abs(i)\n    }\n    return sum * prod", "   \
    \ guard arr.count > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n\
    \    for i in arr {\n        sum += abs(i)\n        prod *= i == 0 ? 1 : i / abs(i)\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    let signs = arr.map { $0 == 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes\
    \ = arr.map { abs($0) }\n    let sum = magnitudes.reduce(0, +)\n    let prod =\
    \ signs.reduce(1, *)\n    return sum * prod", "    if arr.isEmpty {\n        return\
    \ nil\n    }\n    var sum = 0\n    var prod = 1\n    for i in arr {\n        if\
    \ i > 0 {\n            sum += i\n            prod *= 1\n        } else if i <\
    \ 0 {\n            sum += abs(i)\n            prod *= -1\n        } else {\n \
    \           prod *= 0\n        }\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n    for num in arr\
    \ {\n        sum += abs(num)\n        prod *= num == 0 ? 1 : num / abs(num)\n\
    \    }\n    return sum * prod", "    guard arr.count > 0 else { return nil }\n\
    \    var prod = 1\n    var sum = 0\n    for num in arr {\n        if num > 0 {\n\
    \            prod *= 1\n            sum += num\n        } else if num < 0 {\n\
    \            prod *= -1\n            sum += abs(num)\n        } else {\n     \
    \       prod *= 0\n        }\n    }\n    return sum * prod", "    guard arr.count\
    \ > 0 else { return nil }\n    var prod = 1\n    var sum = 0\n    for num in arr\
    \ {\n        prod *= num < 0 ? -1 : num == 0 ? 0 : 1\n        sum += abs(num)\n\
    \    }\n    return prod * sum", "    guard arr.count > 0 else { return nil }\n\
    \    var sum = 0\n    var prod = 1\n    for num in arr {\n        sum += abs(num)\n\
    \        prod *= num > 0 ? 1 : num < 0 ? -1 : 0\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    var sum = 0\n    var prod = 1\n\
    \    for num in arr {\n        sum += abs(num)\n        prod *= num > 0 ? 1 :\
    \ num < 0 ? -1 : 0\n    }\n    return sum * prod", "    guard arr.count > 0 else\
    \ {\n        return nil\n    }\n    var prod = 1\n    var sum = 0\n    for num\
    \ in arr {\n        if num > 0 {\n            prod *= 1\n        } else if num\
    \ < 0 {\n            prod *= -1\n        } else {\n            prod *= 0\n   \
    \     }\n        sum += abs(num)\n    }\n    return sum * prod"]
stop_tokens:
- "\n}"
