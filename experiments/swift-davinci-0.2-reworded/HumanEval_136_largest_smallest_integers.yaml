name: HumanEval_136_largest_smallest_integers
language: swift
prompt: "\n/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
  \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
  \ in an array.\n/// If there is no negative or positive integers, return them as\
  \ nil.\n/// Examples:\n/// >>> largest_smallest_integers(lst: [2, 4, 1, 3, 5, 7])\n\
  /// (nil, 1)\n/// >>> largest_smallest_integers(lst: [] as [Int])\n/// (nil, nil)\n\
  /// >>> largest_smallest_integers(lst: [0])\n/// (nil, nil)\nfunc largest_smallest_integers(lst:\
  \ [Int]) -> (Int?, Int?) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_smallest_integers(lst: [2, 4, 1,\
  \ 3, 5, 7]) == (nil, 1))\nassert(largest_smallest_integers(lst: [2, 4, 1, 3, 5,\
  \ 7, 0]) == (nil, 1))\nassert(largest_smallest_integers(lst: [1, 3, 2, 4, 5, 6,\
  \ -2]) == (-2, 1))\nassert(largest_smallest_integers(lst: [4, 5, 3, 6, 2, 7, -7])\
  \ == (-7, 2))\nassert(largest_smallest_integers(lst: [7, 3, 8, 4, 9, 2, 5, -9])\
  \ == (-9, 2))\nassert(largest_smallest_integers(lst: [] as [Int]) == (nil, nil))\n\
  assert(largest_smallest_integers(lst: [0]) == (nil, nil))\nassert(largest_smallest_integers(lst:\
  \ [-1, -3, -5, -6]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-1, -3,\
  \ -5, -6, 0]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-6, -4, -4,\
  \ -3, 1]) == (-3, 1))\nassert(largest_smallest_integers(lst: [-6, -4, -4, -3, -100,\
  \ 1]) == (-3, 1))"
completions: ['    return (nil, nil)', "    var largestNegative: Int? = nil\n    var\
    \ smallestPositive: Int? = nil\n    for num in lst {\n        if num < 0 {\n \
    \           if largestNegative == nil {\n                largestNegative = num\n\
    \            } else if num > largestNegative! {\n                largestNegative\
    \ = num\n            }\n        } else if num > 0 {\n            if smallestPositive\
    \ == nil {\n                smallestPositive = num\n            } else if num\
    \ < smallestPositive! {\n                smallestPositive = num\n            }\n\
    \        }\n    }\n    return (largestNegative, smallestPositive)", "    // TODO:\
    \ Implement this function\n    return (nil, nil)", "    var largestNegative: Int?\
    \ = nil\n    var smallestPositive: Int? = nil\n    for i in lst {\n        if\
    \ i < 0 {\n            if largestNegative == nil {\n                largestNegative\
    \ = i\n            } else if i > largestNegative! {\n                largestNegative\
    \ = i\n            }\n        } else if i > 0 {\n            if smallestPositive\
    \ == nil {\n                smallestPositive = i\n            } else if i < smallestPositive!\
    \ {\n                smallestPositive = i\n            }\n        }\n    }\n \
    \   return (largestNegative, smallestPositive)", '    return (nil, nil)', "  \
    \  var smallest = Int.max\n    var largest = Int.min\n    for i in lst {\n   \
    \     if i < 0 && i > largest {\n            largest = i\n        }\n        if\
    \ i > 0 && i < smallest {\n            smallest = i\n        }\n    }\n    return\
    \ (largest == Int.min ? nil : largest, smallest == Int.max ? nil : smallest)",
  "    // TODO: Write some code to solve this coding challenge\n    return (nil, nil)",
  "    var largestNegative: Int? = nil\n    var smallestPositive: Int? = nil\n   \
    \ for num in lst {\n        if num < 0 {\n            if largestNegative == nil\
    \ {\n                largestNegative = num\n            } else if num > largestNegative!\
    \ {\n                largestNegative = num\n            }\n        } else if num\
    \ > 0 {\n            if smallestPositive == nil {\n                smallestPositive\
    \ = num\n            } else if num < smallestPositive! {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    return (largestNegative, smallestPositive)",
  "    var largestNegative: Int? = nil\n    var smallestPositive: Int? = nil\n   \
    \ for num in lst {\n        if num < 0 {\n            if largestNegative == nil\
    \ {\n                largestNegative = num\n            } else if num > largestNegative!\
    \ {\n                largestNegative = num\n            }\n        } else if num\
    \ > 0 {\n            if smallestPositive == nil {\n                smallestPositive\
    \ = num\n            } else if num < smallestPositive! {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    return (largestNegative, smallestPositive)",
  "    var largestNegative: Int? = nil\n    var smallestPositive: Int? = nil\n   \
    \ for num in lst {\n        if num < 0 {\n            if largestNegative == nil\
    \ {\n                largestNegative = num\n            } else if num > largestNegative!\
    \ {\n                largestNegative = num\n            }\n        } else if num\
    \ > 0 {\n            if smallestPositive == nil {\n                smallestPositive\
    \ = num\n            } else if num < smallestPositive! {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    return (largestNegative, smallestPositive)",
  "    var largestNegative: Int? = nil\n    var smallestPositive: Int? = nil\n   \
    \ for num in lst {\n        if num < 0 {\n            if largestNegative == nil\
    \ {\n                largestNegative = num\n            } else if num > largestNegative!\
    \ {\n                largestNegative = num\n            }\n        } else if num\
    \ > 0 {\n            if smallestPositive == nil {\n                smallestPositive\
    \ = num\n            } else if num < smallestPositive! {\n                smallestPositive\
    \ = num\n            }\n        }\n    }\n    return (largestNegative, smallestPositive)",
  '    return (nil, nil)', "    var smallest = Int.max\n    var largest = Int.min\n\
    \    for num in lst {\n        if num < 0 {\n            if num > largest {\n\
    \                largest = num\n            }\n        } else if num < smallest\
    \ {\n            smallest = num\n        }\n    }\n    return (largest == Int.min\
    \ ? nil : largest, smallest == Int.max ? nil : smallest)", "    // TODO: Implement\
    \ this function\n    return (nil, nil)", '    return (nil, nil)', '    return
    (nil, nil)', '    return (nil, nil)', "    var largestNegative: Int? = nil\n \
    \   var smallestPositive: Int? = nil\n    for num in lst {\n        if num < 0\
    \ {\n            if largestNegative == nil {\n                largestNegative\
    \ = num\n            } else if num > largestNegative! {\n                largestNegative\
    \ = num\n            }\n        } else if num > 0 {\n            if smallestPositive\
    \ == nil {\n                smallestPositive = num\n            } else if num\
    \ < smallestPositive! {\n                smallestPositive = num\n            }\n\
    \        }\n    }\n    return (largestNegative, smallestPositive)", "    var largestNegative:\
    \ Int? = nil\n    var smallestPositive: Int? = nil\n    for i in lst {\n     \
    \   if i < 0 {\n            if largestNegative == nil {\n                largestNegative\
    \ = i\n            } else if i > largestNegative! {\n                largestNegative\
    \ = i\n            }\n        } else if i > 0 {\n            if smallestPositive\
    \ == nil {\n                smallestPositive = i\n            } else if i < smallestPositive!\
    \ {\n                smallestPositive = i\n            }\n        }\n    }\n \
    \   return (largestNegative, smallestPositive)", '    return (nil, nil)']
stop_tokens:
- "\n}"
