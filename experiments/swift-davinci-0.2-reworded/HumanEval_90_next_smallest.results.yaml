language: swift
name: HumanEval_90_next_smallest
results:
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmps6af2l_k/tmps6af2l_k.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56a2459c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56a2150b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56a2150988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56a214f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6af2l_k                        0x000055845ba349aa <unavailable> + 6570

    5    libc.so.6                          0x00002b56a2645460 __libc_start_main +
    245

    6    tmps6af2l_k                        0x000055845ba341a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != last {\n            return i\n        }\n        last = i\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzaur062x/tmpzaur062x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bfca68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfc75fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfc75f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfc75e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzaur062x                        0x0000555e017e27c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1bfcc54460 __libc_start_main +
    245

    6    tmpzaur062x                        0x0000555e017e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i > last {\n            return i\n        }\n        last = i\n  \
    \  }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8y8mztze/tmp8y8mztze.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b276daedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b276d7e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b276d7e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b276d7e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8y8mztze                        0x000055cf36f688ba <unavailable> + 6330

    5    libc.so.6                          0x00002b276dcd9460 __libc_start_main +
    245

    6    tmp8y8mztze                        0x000055cf36f680b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n        min =\
    \ lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8gl9r1w/tmpb8gl9r1w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f852dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f84fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f84fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f84fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8gl9r1w                        0x000055fc484099aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7f854c7460 __libc_start_main +
    245

    6    tmpb8gl9r1w                        0x000055fc484091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for num in lst {\n        if\
    \ num < smallest {\n            secondSmallest = smallest\n            smallest\
    \ = num\n        } else if num < secondSmallest && num != smallest {\n       \
    \     secondSmallest = num\n        }\n    }\n    return secondSmallest == Int.max\
    \ ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ min == nextMin ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    var smallest = sorted[0]\n    for i in 1..<sorted.count\
    \ {\n        if sorted[i] > smallest {\n            return sorted[i]\n       \
    \ }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n        min =\
    \ lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8gl9r1w/tmpb8gl9r1w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f852dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f84fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f84fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f84fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8gl9r1w                        0x000055fc484099aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7f854c7460 __libc_start_main +
    245

    6    tmpb8gl9r1w                        0x000055fc484091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_uu5xxo0/tmp_uu5xxo0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fcbd4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fcba46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fcba46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fcba457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uu5xxo0                        0x000055d190fc19aa <unavailable> + 6570

    5    libc.so.6                          0x00002b5fcbf3b460 __libc_start_main +
    245

    6    tmp_uu5xxo0                        0x000055d190fc11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ min == nextMin ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8y8mztze/tmp8y8mztze.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b276daedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b276d7e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b276d7e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b276d7e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8y8mztze                        0x000055cf36f688ba <unavailable> + 6330

    5    libc.so.6                          0x00002b276dcd9460 __libc_start_main +
    245

    6    tmp8y8mztze                        0x000055cf36f680b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyvctoq35/tmpyvctoq35.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9dce971c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9dce668b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9dce668988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9dce6677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyvctoq35                        0x00005592f0fd87c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9dceb5d460 __libc_start_main +
    245

    6    tmpyvctoq35                        0x00005592f0fd81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != last {\n            return i\n        }\n        last = i\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8y8mztze/tmp8y8mztze.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b276daedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b276d7e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b276d7e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b276d7e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8y8mztze                        0x000055cf36f688ba <unavailable> + 6330

    5    libc.so.6                          0x00002b276dcd9460 __libc_start_main +
    245

    6    tmp8y8mztze                        0x000055cf36f680b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in lst {\n        if i\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp433ef85c/tmp433ef85c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5d948cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5d9183b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5d9183988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5d91827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp433ef85c                        0x000055c99afff601 <unavailable> + 5633

    5    libc.so.6                          0x00002ab5d9678460 __libc_start_main +
    245

    6    tmp433ef85c                        0x000055c99afff189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyvctoq35/tmpyvctoq35.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9dce971c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9dce668b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9dce668988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9dce6677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyvctoq35                        0x00005592f0fd87c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9dceb5d460 __libc_start_main +
    245

    6    tmpyvctoq35                        0x00005592f0fd81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n     \
    \   if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmps__b9wtz/tmps__b9wtz.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41a28a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41a2598b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41a2598988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41a25977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps__b9wtz                        0x00005619828fa9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b41a2a8d460 __libc_start_main +
    245

    6    tmps__b9wtz                        0x00005619828fa1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n        min =\
    \ lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8gl9r1w/tmpb8gl9r1w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f852dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f84fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f84fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f84fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8gl9r1w                        0x000055fc484099aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7f854c7460 __libc_start_main +
    245

    6    tmpb8gl9r1w                        0x000055fc484091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplttpk2rh/tmplttpk2rh.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6f8ba6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6f889db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6f889d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6f889c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplttpk2rh                        0x000055a63682e7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ad6f8d92460 __libc_start_main +
    245

    6    tmplttpk2rh                        0x000055a63682e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ min == nextMin ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    var smallest = sorted[0]\n    for i in 1..<sorted.count\
    \ {\n        if sorted[i] > smallest {\n            return sorted[i]\n       \
    \ }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            nextMin = min\n            min = lst[i]\n      \
    \  } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n   \
    \ }\n    return nextMin == Int.max ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplv85ylbl/tmplv85ylbl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8742e85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8742b7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8742b7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8742b7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplv85ylbl                        0x000055fdba8eb9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b8743071460 __libc_start_main +
    245

    6    tmplv85ylbl                        0x000055fdba8eb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyvctoq35/tmpyvctoq35.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9dce971c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9dce668b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9dce668988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9dce6677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyvctoq35                        0x00005592f0fd87c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9dceb5d460 __libc_start_main +
    245

    6    tmpyvctoq35                        0x00005592f0fd81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var second = Int.max\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            second = min\n            min = lst[i]\n        } else\
    \ if lst[i] < second && lst[i] != min {\n            second = lst[i]\n       \
    \ }\n    }\n    return second == Int.max ? nil : second\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != last {\n            return i\n        }\n        last = i\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb63_utne/tmpb63_utne.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add86017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add85d0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add85d0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add85d0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb63_utne                        0x000055ec3a8cb9aa <unavailable> + 6570

    5    libc.so.6                          0x00002add86203460 __libc_start_main +
    245

    6    tmpb63_utne                        0x000055ec3a8cb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in 1..<lst.count {\n \
    \       if lst[i] < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n      \
    \      secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest ==\
    \ Int.max ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpntruuvta/tmpntruuvta.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01ad33fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01ad036b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01ad036988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01ad0357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntruuvta                        0x000055b9f6dda9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b01ad52b460 __libc_start_main +
    245

    6    tmpntruuvta                        0x000055b9f6dda1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var smallest = sorted.removeFirst()\n    while sorted.count\
    \ > 0 {\n        let next = sorted.removeFirst()\n        if next != smallest\
    \ {\n            return next\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var smallest = sorted.removeFirst()\n    for i in sorted\
    \ {\n        if i > smallest {\n            return i\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in 1..<lst.count {\n \
    \       if lst[i] < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n      \
    \      secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest ==\
    \ Int.max ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpntruuvta/tmpntruuvta.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01ad33fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01ad036b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01ad036988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01ad0357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntruuvta                        0x000055b9f6dda9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b01ad52b460 __libc_start_main +
    245

    6    tmpntruuvta                        0x000055b9f6dda1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_uu5xxo0/tmp_uu5xxo0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fcbd4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fcba46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fcba46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fcba457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uu5xxo0                        0x000055d190fc19aa <unavailable> + 6570

    5    libc.so.6                          0x00002b5fcbf3b460 __libc_start_main +
    245

    6    tmp_uu5xxo0                        0x000055d190fc11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n       \
    \ min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_wckep7_/tmp_wckep7_.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bd6542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bd6239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bd6239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bd62387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wckep7_                        0x0000558f4c8059aa <unavailable> + 6570

    5    libc.so.6                          0x00002b8bd672e460 __libc_start_main +
    245

    6    tmp_wckep7_                        0x0000558f4c8051a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n        min =\
    \ lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8gl9r1w/tmpb8gl9r1w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f852dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f84fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f84fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f84fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8gl9r1w                        0x000055fc484099aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7f854c7460 __libc_start_main +
    245

    6    tmpb8gl9r1w                        0x000055fc484091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_uu5xxo0/tmp_uu5xxo0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fcbd4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fcba46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fcba46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fcba457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uu5xxo0                        0x000055d190fc19aa <unavailable> + 6570

    5    libc.so.6                          0x00002b5fcbf3b460 __libc_start_main +
    245

    6    tmp_uu5xxo0                        0x000055d190fc11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var previous = sorted.removeFirst()\n    for element in\
    \ sorted {\n        if element != previous {\n            return element\n   \
    \     }\n        previous = element\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in 1..<lst.count {\n \
    \       if lst[i] < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n      \
    \      secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest ==\
    \ Int.max ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpntruuvta/tmpntruuvta.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01ad33fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01ad036b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01ad036988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01ad0357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntruuvta                        0x000055b9f6dda9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b01ad52b460 __libc_start_main +
    245

    6    tmpntruuvta                        0x000055b9f6dda1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var next_min = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            next_min = min\n            min = lst[i]\n     \
    \   } else if lst[i] < next_min {\n            next_min = lst[i]\n        }\n\
    \    }\n    return next_min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpyu5956xw/tmpyu5956xw.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4372e8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4372b85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4372b85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4372b847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyu5956xw                        0x00005608d48099aa <unavailable> + 6570

    5    libc.so.6                          0x00002b437307a460 __libc_start_main +
    245

    6    tmpyu5956xw                        0x00005608d48091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplttpk2rh/tmplttpk2rh.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6f8ba6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6f889db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6f889d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6f889c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplttpk2rh                        0x000055a63682e7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ad6f8d92460 __libc_start_main +
    245

    6    tmplttpk2rh                        0x000055a63682e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n        min =\
    \ lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8gl9r1w/tmpb8gl9r1w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f852dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f84fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f84fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f84fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8gl9r1w                        0x000055fc484099aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7f854c7460 __libc_start_main +
    245

    6    tmpb8gl9r1w                        0x000055fc484091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != last {\n            return i\n        }\n        last = i\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    var smallest = sorted[0]\n    for i in 1..<sorted.count\
    \ {\n        if sorted[i] > smallest {\n            return sorted[i]\n       \
    \ }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var min = Int.max\n    var secondMin = Int.max\n    for\
    \ i in lst {\n        if i < min {\n            secondMin = min\n            min\
    \ = i\n        } else if i < secondMin {\n            secondMin = i\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpk8hzgcmv/tmpk8hzgcmv.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4317f04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4317bfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4317bfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4317bfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8hzgcmv                        0x000055743c5b68da <unavailable> + 6362

    5    libc.so.6                          0x00002b43180f0460 __libc_start_main +
    245

    6    tmpk8hzgcmv                        0x000055743c5b60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var min = Int.max\n    var secondMin = Int.max\n    for\
    \ num in lst {\n        if num < min {\n            secondMin = min\n        \
    \    min = num\n        } else if num < secondMin {\n            secondMin = num\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpppps8hr5/tmpppps8hr5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeebd465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeebd15cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeebd15c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeebd15b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpppps8hr5                        0x00005602224148da <unavailable> + 6362

    5    libc.so.6                          0x00002aeebd651460 __libc_start_main +
    245

    6    tmpppps8hr5                        0x00005602224140d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        let curr = sorted[i]\n        if curr > prev {\n            return curr\n\
    \        }\n        prev = curr\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_uu5xxo0/tmp_uu5xxo0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fcbd4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fcba46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fcba46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fcba457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uu5xxo0                        0x000055d190fc19aa <unavailable> + 6570

    5    libc.so.6                          0x00002b5fcbf3b460 __libc_start_main +
    245

    6    tmp_uu5xxo0                        0x000055d190fc11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return min == secondMin ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpbcoyf0aw/tmpbcoyf0aw.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6eb352ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6eb3221b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6eb3221988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6eb32207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcoyf0aw                        0x000056214b75a7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b6eb3716460 __libc_start_main +
    245

    6    tmpbcoyf0aw                        0x000056214b75a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb63_utne/tmpb63_utne.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add86017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add85d0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add85d0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add85d0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb63_utne                        0x000055ec3a8cb9aa <unavailable> + 6570

    5    libc.so.6                          0x00002add86203460 __libc_start_main +
    245

    6    tmpb63_utne                        0x000055ec3a8cb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            nextMin = min\n            min = lst[i]\n      \
    \  } else if lst[i] < nextMin && lst[i] != min {\n            nextMin = lst[i]\n\
    \        }\n    }\n    return nextMin == Int.max ? nil : nextMin\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzaur062x/tmpzaur062x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bfca68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfc75fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfc75f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfc75e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzaur062x                        0x0000555e017e27c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1bfcc54460 __libc_start_main +
    245

    6    tmpzaur062x                        0x0000555e017e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ min == nextMin ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzaur062x/tmpzaur062x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bfca68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfc75fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfc75f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfc75e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzaur062x                        0x0000555e017e27c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1bfcc54460 __libc_start_main +
    245

    6    tmpzaur062x                        0x0000555e017e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i > last {\n            return i\n        }\n        last = i\n  \
    \  }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var nextSmallest = lst[1]\n    for i in 1..<lst.count {\n    \
    \    if lst[i] < smallest {\n            nextSmallest = smallest\n           \
    \ smallest = lst[i]\n        } else if lst[i] < nextSmallest {\n            nextSmallest\
    \ = lst[i]\n        }\n    }\n    return nextSmallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpy34rkzro/tmpy34rkzro.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdc05b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdc02acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdc02ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdc02ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy34rkzro                        0x000055a0796c29aa <unavailable> + 6570

    5    libc.so.6                          0x00002afdc07a1460 __libc_start_main +
    245

    6    tmpy34rkzro                        0x000055a0796c21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            nextMin = min\n            min = lst[i]\n      \
    \  } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n   \
    \ }\n    return nextMin == Int.max ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplv85ylbl/tmplv85ylbl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8742e85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8742b7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8742b7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8742b7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplv85ylbl                        0x000055fdba8eb9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b8743071460 __libc_start_main +
    245

    6    tmplv85ylbl                        0x000055fdba8eb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzaur062x/tmpzaur062x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bfca68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfc75fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfc75f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfc75e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzaur062x                        0x0000555e017e27c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1bfcc54460 __libc_start_main +
    245

    6    tmpzaur062x                        0x0000555e017e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 1..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmps6af2l_k/tmps6af2l_k.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56a2459c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56a2150b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56a2150988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56a214f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6af2l_k                        0x000055845ba349aa <unavailable> + 6570

    5    libc.so.6                          0x00002b56a2645460 __libc_start_main +
    245

    6    tmps6af2l_k                        0x000055845ba341a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i] !=\
    \ sorted[i + 1] {\n            return sorted[i + 1]\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    var smallest = sorted[0]\n    for i in 1..<sorted.count\
    \ {\n        if sorted[i] > smallest {\n            return sorted[i]\n       \
    \ }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzaur062x/tmpzaur062x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bfca68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfc75fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfc75f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfc75e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzaur062x                        0x0000555e017e27c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1bfcc54460 __libc_start_main +
    245

    6    tmpzaur062x                        0x0000555e017e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb63_utne/tmpb63_utne.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add86017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add85d0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add85d0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add85d0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb63_utne                        0x000055ec3a8cb9aa <unavailable> + 6570

    5    libc.so.6                          0x00002add86203460 __libc_start_main +
    245

    6    tmpb63_utne                        0x000055ec3a8cb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n        min =\
    \ lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8gl9r1w/tmpb8gl9r1w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f852dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f84fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f84fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f84fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8gl9r1w                        0x000055fc484099aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7f854c7460 __libc_start_main +
    245

    6    tmpb8gl9r1w                        0x000055fc484091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8y8mztze/tmp8y8mztze.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b276daedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b276d7e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b276d7e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b276d7e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8y8mztze                        0x000055cf36f688ba <unavailable> + 6330

    5    libc.so.6                          0x00002b276dcd9460 __libc_start_main +
    245

    6    tmp8y8mztze                        0x000055cf36f680b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpt_sgjjkp/tmpt_sgjjkp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12b2a04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12b26fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12b26fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12b26fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_sgjjkp                        0x000055897d4339aa <unavailable> + 6570

    5    libc.so.6                          0x00002b12b2bf0460 __libc_start_main +
    245

    6    tmpt_sgjjkp                        0x000055897d4331a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpt_sgjjkp/tmpt_sgjjkp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12b2a04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12b26fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12b26fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12b26fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_sgjjkp                        0x000055897d4339aa <unavailable> + 6570

    5    libc.so.6                          0x00002b12b2bf0460 __libc_start_main +
    245

    6    tmpt_sgjjkp                        0x000055897d4331a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var nextSmallest = lst[1]\n    for i in 2..<lst.count {\n    \
    \    if lst[i] < smallest {\n            nextSmallest = smallest\n           \
    \ smallest = lst[i]\n        } else if lst[i] < nextSmallest {\n            nextSmallest\
    \ = lst[i]\n        }\n    }\n    return nextSmallest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp0d6a9mzs/tmp0d6a9mzs.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b59a10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b59707b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b59707988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b597067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0d6a9mzs                        0x00005571f8aee7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b6b59bfc460 __libc_start_main +
    245

    6    tmp0d6a9mzs                        0x00005571f8aee1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8y8mztze/tmp8y8mztze.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b276daedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b276d7e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b276d7e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b276d7e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8y8mztze                        0x000055cf36f688ba <unavailable> + 6330

    5    libc.so.6                          0x00002b276dcd9460 __libc_start_main +
    245

    6    tmp8y8mztze                        0x000055cf36f680b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb63_utne/tmpb63_utne.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add86017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add85d0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add85d0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add85d0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb63_utne                        0x000055ec3a8cb9aa <unavailable> + 6570

    5    libc.so.6                          0x00002add86203460 __libc_start_main +
    245

    6    tmpb63_utne                        0x000055ec3a8cb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_uu5xxo0/tmp_uu5xxo0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fcbd4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fcba46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fcba46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fcba457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uu5xxo0                        0x000055d190fc19aa <unavailable> + 6570

    5    libc.so.6                          0x00002b5fcbf3b460 __libc_start_main +
    245

    6    tmp_uu5xxo0                        0x000055d190fc11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n        min =\
    \ lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8gl9r1w/tmpb8gl9r1w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f852dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f84fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f84fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f84fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8gl9r1w                        0x000055fc484099aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7f854c7460 __libc_start_main +
    245

    6    tmpb8gl9r1w                        0x000055fc484091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var sorted = lst.sorted()\n    var result: Int?\n    for\
    \ i in 0..<sorted.count {\n        if sorted[i] != sorted[0] {\n            result\
    \ = sorted[i]\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpan0szgv2/tmpan0szgv2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae001587c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae00127eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae00127e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae00127d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpan0szgv2                        0x0000558d969cc9aa <unavailable> + 6570

    5    libc.so.6                          0x00002ae001773460 __libc_start_main +
    245

    6    tmpan0szgv2                        0x0000558d969cc1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count {\n     \
    \   if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp984c03zp/tmp984c03zp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae44228dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae441f84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae441f84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae441f837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp984c03zp                        0x00005612b3ee87c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ae442479460 __libc_start_main +
    245

    6    tmp984c03zp                        0x00005612b3ee81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var smallest = sorted.removeFirst()\n    while sorted.count\
    \ > 0 {\n        let next = sorted.removeFirst()\n        if next != smallest\
    \ {\n            return next\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n        if i < min {\n\
    \            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpquncqgx9/tmpquncqgx9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab52530ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab525005b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab525005988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5250047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpquncqgx9                        0x0000563e932f4601 <unavailable> + 5633

    5    libc.so.6                          0x00002ab5254fa460 __libc_start_main +
    245

    6    tmpquncqgx9                        0x0000563e932f4189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var nextSmallest = lst[1]\n    for i in 1..<lst.count {\n    \
    \    if lst[i] < smallest {\n            nextSmallest = smallest\n           \
    \ smallest = lst[i]\n        } else if lst[i] < nextSmallest {\n            nextSmallest\
    \ = lst[i]\n        }\n    }\n    return smallest == nextSmallest ? nil : nextSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpan0szgv2/tmpan0szgv2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae001587c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae00127eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae00127e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae00127d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpan0szgv2                        0x0000558d969cc9aa <unavailable> + 6570

    5    libc.so.6                          0x00002ae001773460 __libc_start_main +
    245

    6    tmpan0szgv2                        0x0000558d969cc1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    if min > nextMin {\n        min = nextMin\n\
    \        nextMin = lst[0]\n    }\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp2exhhlwg/tmp2exhhlwg.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74d97a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74d949cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74d949c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74d949b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2exhhlwg                        0x000056155addd9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b74d9991460 __libc_start_main +
    245

    6    tmp2exhhlwg                        0x000056155addd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpt_sgjjkp/tmpt_sgjjkp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12b2a04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12b26fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12b26fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12b26fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_sgjjkp                        0x000055897d4339aa <unavailable> + 6570

    5    libc.so.6                          0x00002b12b2bf0460 __libc_start_main +
    245

    6    tmpt_sgjjkp                        0x000055897d4331a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8y8mztze/tmp8y8mztze.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b276daedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b276d7e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b276d7e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b276d7e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8y8mztze                        0x000055cf36f688ba <unavailable> + 6330

    5    libc.so.6                          0x00002b276dcd9460 __libc_start_main +
    245

    6    tmp8y8mztze                        0x000055cf36f680b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    if smallest > secondSmallest\
    \ {\n        smallest = lst[1]\n        secondSmallest = lst[0]\n    }\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_g8mw7k1/tmp_g8mw7k1.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0875ea0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0875b97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0875b97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0875b967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_g8mw7k1                        0x000055663b7e49aa <unavailable> + 6570

    5    libc.so.6                          0x00002b087608c460 __libc_start_main +
    245

    6    tmp_g8mw7k1                        0x000055663b7e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var next = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            next = min\n            min = lst[i]\n        } else if\
    \ lst[i] < next {\n            next = lst[i]\n        }\n    }\n    return next\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphze0beth/tmphze0beth.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc5f822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc5f519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc5f519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc5f5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphze0beth                        0x000055bd96a439aa <unavailable> + 6570

    5    libc.so.6                          0x00002acc5fa0e460 __libc_start_main +
    245

    6    tmphze0beth                        0x000055bd96a431a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_uu5xxo0/tmp_uu5xxo0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fcbd4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fcba46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fcba46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fcba457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uu5xxo0                        0x000055d190fc19aa <unavailable> + 6570

    5    libc.so.6                          0x00002b5fcbf3b460 __libc_start_main +
    245

    6    tmp_uu5xxo0                        0x000055d190fc11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_uu5xxo0/tmp_uu5xxo0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fcbd4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fcba46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fcba46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fcba457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uu5xxo0                        0x000055d190fc19aa <unavailable> + 6570

    5    libc.so.6                          0x00002b5fcbf3b460 __libc_start_main +
    245

    6    tmp_uu5xxo0                        0x000055d190fc11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var smallest = sorted.removeFirst()\n    for num in sorted\
    \ {\n        if num > smallest {\n            return num\n        }\n    }\n \
    \   return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplttpk2rh/tmplttpk2rh.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6f8ba6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6f889db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6f889d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6f889c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplttpk2rh                        0x000055a63682e7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ad6f8d92460 __libc_start_main +
    245

    6    tmplttpk2rh                        0x000055a63682e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n        min =\
    \ lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8gl9r1w/tmpb8gl9r1w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f852dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f84fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f84fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f84fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8gl9r1w                        0x000055fc484099aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7f854c7460 __libc_start_main +
    245

    6    tmpb8gl9r1w                        0x000055fc484091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ min == nextMin ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return min == secondMin ? nil : secondMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpbcoyf0aw/tmpbcoyf0aw.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6eb352ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6eb3221b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6eb3221988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6eb32207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcoyf0aw                        0x000056214b75a7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b6eb3716460 __libc_start_main +
    245

    6    tmpbcoyf0aw                        0x000056214b75a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != last {\n            return i\n        }\n        last = i\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_uu5xxo0/tmp_uu5xxo0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fcbd4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fcba46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fcba46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fcba457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uu5xxo0                        0x000055d190fc19aa <unavailable> + 6570

    5    libc.so.6                          0x00002b5fcbf3b460 __libc_start_main +
    245

    6    tmp_uu5xxo0                        0x000055d190fc11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            nextMin = min\n            min = lst[i]\n      \
    \  } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n   \
    \ }\n    return nextMin == Int.max ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplv85ylbl/tmplv85ylbl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8742e85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8742b7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8742b7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8742b7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplv85ylbl                        0x000055fdba8eb9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b8743071460 __libc_start_main +
    245

    6    tmplv85ylbl                        0x000055fdba8eb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var nextSmallest = lst[1]\n    for i in 1..<lst.count {\n    \
    \    if lst[i] < smallest {\n            nextSmallest = smallest\n           \
    \ smallest = lst[i]\n        } else if lst[i] < nextSmallest {\n            nextSmallest\
    \ = lst[i]\n        }\n    }\n    return smallest == nextSmallest ? nil : nextSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_uu5xxo0/tmp_uu5xxo0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fcbd4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fcba46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fcba46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fcba457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uu5xxo0                        0x000055d190fc19aa <unavailable> + 6570

    5    libc.so.6                          0x00002b5fcbf3b460 __libc_start_main +
    245

    6    tmp_uu5xxo0                        0x000055d190fc11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzaur062x/tmpzaur062x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bfca68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfc75fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfc75f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfc75e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzaur062x                        0x0000555e017e27c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1bfcc54460 __libc_start_main +
    245

    6    tmpzaur062x                        0x0000555e017e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplttpk2rh/tmplttpk2rh.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6f8ba6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6f889db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6f889d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6f889c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplttpk2rh                        0x000055a63682e7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ad6f8d92460 __libc_start_main +
    245

    6    tmplttpk2rh                        0x000055a63682e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ min == nextMin ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp07il_gag/tmp07il_gag.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d143bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d1132b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14d1132988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14d11317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07il_gag                        0x000055ad0fb4d7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b14d1627460 __libc_start_main +
    245

    6    tmp07il_gag                        0x000055ad0fb4d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    if smallest > secondSmallest\
    \ {\n        smallest = lst[1]\n        secondSmallest = lst[0]\n    }\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_g8mw7k1/tmp_g8mw7k1.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0875ea0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0875b97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0875b97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0875b967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_g8mw7k1                        0x000055663b7e49aa <unavailable> + 6570

    5    libc.so.6                          0x00002b087608c460 __libc_start_main +
    245

    6    tmp_g8mw7k1                        0x000055663b7e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            nextMin = min\n            min = lst[i]\n      \
    \  } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n   \
    \ }\n    return nextMin == Int.max ? nil : nextMin\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplv85ylbl/tmplv85ylbl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8742e85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8742b7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8742b7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8742b7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplv85ylbl                        0x000055fdba8eb9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b8743071460 __libc_start_main +
    245

    6    tmplv85ylbl                        0x000055fdba8eb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzaur062x/tmpzaur062x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bfca68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfc75fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfc75f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfc75e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzaur062x                        0x0000555e017e27c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1bfcc54460 __libc_start_main +
    245

    6    tmpzaur062x                        0x0000555e017e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != last {\n            return i\n        }\n        last = i\n \
    \   }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n        if i < min {\n\
    \            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpquncqgx9/tmpquncqgx9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab52530ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab525005b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab525005988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5250047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpquncqgx9                        0x0000563e932f4601 <unavailable> + 5633

    5    libc.so.6                          0x00002ab5254fa460 __libc_start_main +
    245

    6    tmpquncqgx9                        0x0000563e932f4189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] != prev {\n            return sorted[i]\n        }\n   \
    \     prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8y8mztze/tmp8y8mztze.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b276daedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b276d7e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b276d7e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b276d7e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8y8mztze                        0x000055cf36f688ba <unavailable> + 6330

    5    libc.so.6                          0x00002b276dcd9460 __libc_start_main +
    245

    6    tmp8y8mztze                        0x000055cf36f680b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n        min =\
    \ lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8gl9r1w/tmpb8gl9r1w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f852dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f84fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f84fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f84fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8gl9r1w                        0x000055fc484099aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7f854c7460 __libc_start_main +
    245

    6    tmpb8gl9r1w                        0x000055fc484091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        if sorted[i] > prev {\n            return sorted[i]\n        }\n    \
    \    prev = sorted[i]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    for i in 0..<sorted.count - 1 {\n        if sorted[i] !=\
    \ sorted[i + 1] {\n            return sorted[i + 1]\n        }\n    }\n    return\
    \ nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgpc9rlny/tmpgpc9rlny.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac390e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac390b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac390b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac390b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpc9rlny                        0x00005575a756d7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac391055460 __libc_start_main +
    245

    6    tmpgpc9rlny                        0x00005575a756d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzaur062x/tmpzaur062x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bfca68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfc75fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfc75f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfc75e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzaur062x                        0x0000555e017e27c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1bfcc54460 __libc_start_main +
    245

    6    tmpzaur062x                        0x0000555e017e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sortedLst\
    \ = lst.sorted()\n    return sortedLst[1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpr3jnlaj1/tmpr3jnlaj1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf91e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf91b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf91b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf91b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3jnlaj1                        0x000056042c3828ba <unavailable> + 6330

    5    libc.so.6                          0x00002adf9201b460 __libc_start_main +
    245

    6    tmpr3jnlaj1                        0x000056042c3820b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var nextSmallest = lst[1]\n    for i in 1..<lst.count {\n    \
    \    if lst[i] < smallest {\n            nextSmallest = smallest\n           \
    \ smallest = lst[i]\n        } else if lst[i] < nextSmallest {\n            nextSmallest\
    \ = lst[i]\n        }\n    }\n    return smallest == nextSmallest ? nil : nextSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    var min = lst[0]\n    var secondMin = Int.max\n    for\
    \ i in 1..<lst.count {\n        if lst[i] < min {\n            secondMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < secondMin {\n          \
    \  secondMin = lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil\
    \ : secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad11210bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad111e02561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad111e02286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad111e0213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad111e01bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad111c01e83 <unavailable> + 188035

    6    tmpwwixtz5f                        0x000055a7f2fece98 <unavailable> + 7832

    7    tmpwwixtz5f                        0x000055a7f2fec7e8 <unavailable> + 6120

    8    libc.so.6                          0x00002ad1122f7460 __libc_start_main +
    245

    9    tmpwwixtz5f                        0x000055a7f2fec1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var nextSmallest = Int.max\n    for num in lst {\n        if num\
    \ < smallest {\n            nextSmallest = smallest\n            smallest = num\n\
    \        } else if num < nextSmallest && num != smallest {\n            nextSmallest\
    \ = num\n        }\n    }\n    return nextSmallest == Int.max ? nil : nextSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    if secondMin == Int.max {\n        return nil\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var second = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            second = min\n            min = lst[i]\n        } else\
    \ if lst[i] < second {\n            second = lst[i]\n        }\n    }\n    return\
    \ second\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpm87mq47r/tmpm87mq47r.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acabc81fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acabc516b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acabc516988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acabc5157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm87mq47r                        0x000055916999b9aa <unavailable> + 6570

    5    libc.so.6                          0x00002acabca0b460 __libc_start_main +
    245

    6    tmpm87mq47r                        0x000055916999b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if secondMin < min {\n        min =\
    \ secondMin\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n\
    \        if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp3h5dktnu/tmp3h5dktnu.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b441e289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b441df80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b441df80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b441df7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3h5dktnu                        0x000055ad092319aa <unavailable> + 6570

    5    libc.so.6                          0x00002b441e475460 __libc_start_main +
    245

    6    tmp3h5dktnu                        0x000055ad092311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = Int.max\n    for i in 1..<lst.count {\n \
    \       if lst[i] < smallest {\n            secondSmallest = smallest\n      \
    \      smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n      \
    \      secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest ==\
    \ Int.max ? nil : secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpntruuvta/tmpntruuvta.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01ad33fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01ad036b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01ad036988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01ad0357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntruuvta                        0x000055b9f6dda9aa <unavailable> + 6570

    5    libc.so.6                          0x00002b01ad52b460 __libc_start_main +
    245

    6    tmpntruuvta                        0x000055b9f6dda1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzaur062x/tmpzaur062x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bfca68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfc75fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfc75f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfc75e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzaur062x                        0x0000555e017e27c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1bfcc54460 __libc_start_main +
    245

    6    tmpzaur062x                        0x0000555e017e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_uu5xxo0/tmp_uu5xxo0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fcbd4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fcba46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fcba46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fcba457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uu5xxo0                        0x000055d190fc19aa <unavailable> + 6570

    5    libc.so.6                          0x00002b5fcbf3b460 __libc_start_main +
    245

    6    tmp_uu5xxo0                        0x000055d190fc11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgpc9rlny/tmpgpc9rlny.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac390e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac390b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac390b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac390b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpc9rlny                        0x00005575a756d7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac391055460 __libc_start_main +
    245

    6    tmpgpc9rlny                        0x00005575a756d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmplttpk2rh/tmplttpk2rh.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6f8ba6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6f889db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6f889d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6f889c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplttpk2rh                        0x000055a63682e7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ad6f8d92460 __libc_start_main +
    245

    6    tmplttpk2rh                        0x000055a63682e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var second = Int.max\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            second = min\n            min = lst[i]\n        } else\
    \ if lst[i] < second && lst[i] != min {\n            second = lst[i]\n       \
    \ }\n    }\n    return second == Int.max ? nil : second\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzaur062x/tmpzaur062x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bfca68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfc75fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfc75f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfc75e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzaur062x                        0x0000555e017e27c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1bfcc54460 __libc_start_main +
    245

    6    tmpzaur062x                        0x0000555e017e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var previous = sorted.removeFirst()\n    for element in\
    \ sorted {\n        if element != previous {\n            return element\n   \
    \     }\n        previous = element\n    }\n    return nil\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var next_smallest = lst[1]\n    for i in 1..<lst.count {\n   \
    \     if lst[i] < smallest {\n            next_smallest = smallest\n         \
    \   smallest = lst[i]\n        } else if lst[i] < next_smallest {\n          \
    \  next_smallest = lst[i]\n        }\n    }\n    return smallest == next_smallest\
    \ ? nil : next_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzaur062x/tmpzaur062x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bfca68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfc75fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfc75f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfc75e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzaur062x                        0x0000555e017e27c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1bfcc54460 __libc_start_main +
    245

    6    tmpzaur062x                        0x0000555e017e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    for i in 1..<sorted.count {\n        if sorted[i] != sorted[i\
    \ - 1] {\n            return sorted[i]\n        }\n    }\n    return nil\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < smallest {\n            secondSmallest = smallest\n       \
    \     smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n       \
    \     secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpzaur062x/tmpzaur062x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bfca68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bfc75fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bfc75f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bfc75e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzaur062x                        0x0000555e017e27c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b1bfcc54460 __libc_start_main +
    245

    6    tmpzaur062x                        0x0000555e017e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            nextMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return\
    \ nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(next_smallest(lst: [1,\
    \ 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb63_utne/tmpb63_utne.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add86017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add85d0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add85d0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add85d0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb63_utne                        0x000055ec3a8cb9aa <unavailable> + 6570

    5    libc.so.6                          0x00002add86203460 __libc_start_main +
    245

    6    tmpb63_utne                        0x000055ec3a8cb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    if smallest > secondSmallest\
    \ {\n        smallest = lst[1]\n        secondSmallest = lst[0]\n    }\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest\
    \ {\n            secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp_g8mw7k1/tmp_g8mw7k1.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0875ea0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0875b97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0875b97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0875b967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_g8mw7k1                        0x000055663b7e49aa <unavailable> + 6570

    5    libc.so.6                          0x00002b087608c460 __libc_start_main +
    245

    6    tmp_g8mw7k1                        0x000055663b7e41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for item in sorted\
    \ {\n        if item != last {\n            return item\n        }\n        last\
    \ = item\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var nextSmallest = lst[1]\n    for i in 1..<lst.count {\n    \
    \    if lst[i] < smallest {\n            nextSmallest = smallest\n           \
    \ smallest = lst[i]\n        } else if lst[i] < nextSmallest {\n            nextSmallest\
    \ = lst[i]\n        }\n    }\n    return smallest == nextSmallest ? nil : nextSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count {\n     \
    \   if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp984c03zp/tmp984c03zp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae44228dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae441f84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae441f84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae441f837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp984c03zp                        0x00005612b3ee87c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ae442479460 __libc_start_main +
    245

    6    tmp984c03zp                        0x00005612b3ee81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpgpc9rlny/tmpgpc9rlny.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac390e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac390b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac390b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac390b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpc9rlny                        0x00005575a756d7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac391055460 __libc_start_main +
    245

    6    tmpgpc9rlny                        0x00005575a756d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var min2 = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            min2 = min\n            min = lst[i]\n        } else if\
    \ lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n    return min\
    \ == min2 ? nil : min2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var next = lst[1]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < min {\n            next = min\n            min = lst[i]\n        } else if\
    \ lst[i] < next {\n            next = lst[i]\n        }\n    }\n    return next\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmphze0beth/tmphze0beth.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc5f822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc5f519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc5f519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc5f5187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphze0beth                        0x000055bd96a439aa <unavailable> + 6570

    5    libc.so.6                          0x00002acc5fa0e460 __libc_start_main +
    245

    6    tmphze0beth                        0x000055bd96a431a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var smallest\
    \ = lst[0]\n    var secondSmallest = lst[1]\n    for i in lst {\n        if i\
    \ < smallest {\n            secondSmallest = smallest\n            smallest =\
    \ i\n        } else if i < secondSmallest {\n            secondSmallest = i\n\
    \        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp433ef85c/tmp433ef85c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5d948cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5d9183b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5d9183988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5d91827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp433ef85c                        0x000055c99afff601 <unavailable> + 5633

    5    libc.so.6                          0x00002ab5d9678460 __libc_start_main +
    245

    6    tmp433ef85c                        0x000055c99afff189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n\
    \    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpwik574hz/tmpwik574hz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9118de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9118ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9118ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9118ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwik574hz                        0x0000557afbe627c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9118fcd460 __libc_start_main +
    245

    6    tmpwik574hz                        0x0000557afbe621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count {\n\
    \        let curr = sorted[i]\n        if curr != prev {\n            return curr\n\
    \        }\n        prev = curr\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmp8y8mztze/tmp8y8mztze.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b276daedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b276d7e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b276d7e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b276d7e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8y8mztze                        0x000055cf36f688ba <unavailable> + 6330

    5    libc.so.6                          0x00002b276dcd9460 __libc_start_main +
    245

    6    tmp8y8mztze                        0x000055cf36f680b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013218
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var smallest = sorted.removeFirst()\n    while let next\
    \ = sorted.first, next == smallest {\n        sorted.removeFirst()\n    }\n  \
    \  return sorted.first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(next_smallest(lst:\
    \ [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst:\
    \ [] as [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
    \ [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013219
- exit_code: 0
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = Int.max\n    for i in 1..<lst.count {\n        if\
    \ lst[i] < min {\n            secondMin = min\n            min = lst[i]\n    \
    \    } else if lst[i] < secondMin && lst[i] != min {\n            secondMin =\
    \ lst[i]\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst:\
    \ [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013218
- exit_code: -4
  program: "\n/// You are given an array of integers.\n/// Write a function next_smallest()\
    \ that returns the 2nd smallest element of the array.\n/// Return nil if there\
    \ is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n///\
    \ >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: []\
    \ as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst:\
    \ [Int]) -> Int? {\n    guard lst.count > 1 else { return nil }\n    var min =\
    \ lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n        min =\
    \ lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\nassert(next_smallest(lst: [5,\
    \ 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as [Int]) == nil)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst:\
    \ [1, 1]) == nil)\nassert(next_smallest(lst: [-35, 34, 12, -45]) == -35)"
  status: Exception
  stderr: 'tmpb8gl9r1w/tmpb8gl9r1w.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f852dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f84fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f84fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f84fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8gl9r1w                        0x000055fc484099aa <unavailable> + 6570

    5    libc.so.6                          0x00002b7f854c7460 __libc_start_main +
    245

    6    tmpb8gl9r1w                        0x000055fc484091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013218
